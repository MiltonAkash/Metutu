2018-04-07T14:09:49.761Z - info: User function triggered, starting execution
2018-04-07T14:09:51.435Z - info: Execution took 1674 ms, user function completed successfully
2018-04-07T14:09:51.437Z - error: Error: The default Firebase app does not exist. Make sure you call initializeApp() before using any of the Firebase services.
    at FirebaseAppError.FirebaseError [as constructor] (/home/akash/Documents/pro/juspay/metutu-server/functions/node_modules/firebase-admin/lib/utils/error.js:39:28)
    at FirebaseAppError.PrefixedFirebaseError [as constructor] (/home/akash/Documents/pro/juspay/metutu-server/functions/node_modules/firebase-admin/lib/utils/error.js:85:28)
    at new FirebaseAppError (/home/akash/Documents/pro/juspay/metutu-server/functions/node_modules/firebase-admin/lib/utils/error.js:119:28)
    at FirebaseNamespaceInternals.app (/home/akash/Documents/pro/juspay/metutu-server/functions/node_modules/firebase-admin/lib/firebase-namespace.js:105:19)
    at FirebaseNamespace.app (/home/akash/Documents/pro/juspay/metutu-server/functions/node_modules/firebase-admin/lib/firebase-namespace.js:372:30)
    at FirebaseNamespace.ensureApp (/home/akash/Documents/pro/juspay/metutu-server/functions/node_modules/firebase-admin/lib/firebase-namespace.js:388:24)
    at FirebaseNamespace.fn (/home/akash/Documents/pro/juspay/metutu-server/functions/node_modules/firebase-admin/lib/firebase-namespace.js:283:30)
    at app.get (/home/akash/Documents/pro/juspay/metutu-server/functions/index.js:7:11)
    at Layer.handle [as handle_request] (/home/akash/Documents/pro/juspay/metutu-server/functions/node_modules/express/lib/router/layer.js:95:5)
    at next (/home/akash/Documents/pro/juspay/metutu-server/functions/node_modules/express/lib/router/route.js:137:13)
2018-04-07T14:10:46.559Z - info: Worker for updateSkill closed due to file changes.
2018-04-07T14:10:46.560Z - info: Worker for printsame closed due to file changes.
2018-04-07T14:10:46.564Z - info: Worker for api closed due to file changes.
2018-04-07T14:10:51.050Z - info: User function triggered, starting execution
2018-04-07T14:10:51.146Z - info: Execution took 97 ms, user function completed successfully
2018-04-07T14:10:51.149Z - error: Error: The default Firebase app does not exist. Make sure you call initializeApp() before using any of the Firebase services.
    at FirebaseAppError.FirebaseError [as constructor] (/home/akash/Documents/pro/juspay/metutu-server/functions/node_modules/firebase-admin/lib/utils/error.js:39:28)
    at FirebaseAppError.PrefixedFirebaseError [as constructor] (/home/akash/Documents/pro/juspay/metutu-server/functions/node_modules/firebase-admin/lib/utils/error.js:85:28)
    at new FirebaseAppError (/home/akash/Documents/pro/juspay/metutu-server/functions/node_modules/firebase-admin/lib/utils/error.js:119:28)
    at FirebaseNamespaceInternals.app (/home/akash/Documents/pro/juspay/metutu-server/functions/node_modules/firebase-admin/lib/firebase-namespace.js:105:19)
    at FirebaseNamespace.app (/home/akash/Documents/pro/juspay/metutu-server/functions/node_modules/firebase-admin/lib/firebase-namespace.js:372:30)
    at FirebaseNamespace.ensureApp (/home/akash/Documents/pro/juspay/metutu-server/functions/node_modules/firebase-admin/lib/firebase-namespace.js:388:24)
    at FirebaseNamespace.fn (/home/akash/Documents/pro/juspay/metutu-server/functions/node_modules/firebase-admin/lib/firebase-namespace.js:283:30)
    at app.get (/home/akash/Documents/pro/juspay/metutu-server/functions/index.js:7:11)
    at Layer.handle [as handle_request] (/home/akash/Documents/pro/juspay/metutu-server/functions/node_modules/express/lib/router/layer.js:95:5)
    at next (/home/akash/Documents/pro/juspay/metutu-server/functions/node_modules/express/lib/router/route.js:137:13)
2018-04-07T14:10:52.527Z - info: User function triggered, starting execution
2018-04-07T14:10:52.529Z - info: Execution took 2 ms, user function completed successfully
2018-04-07T14:10:52.530Z - error: Error: The default Firebase app does not exist. Make sure you call initializeApp() before using any of the Firebase services.
    at FirebaseAppError.FirebaseError [as constructor] (/home/akash/Documents/pro/juspay/metutu-server/functions/node_modules/firebase-admin/lib/utils/error.js:39:28)
    at FirebaseAppError.PrefixedFirebaseError [as constructor] (/home/akash/Documents/pro/juspay/metutu-server/functions/node_modules/firebase-admin/lib/utils/error.js:85:28)
    at new FirebaseAppError (/home/akash/Documents/pro/juspay/metutu-server/functions/node_modules/firebase-admin/lib/utils/error.js:119:28)
    at FirebaseNamespaceInternals.app (/home/akash/Documents/pro/juspay/metutu-server/functions/node_modules/firebase-admin/lib/firebase-namespace.js:105:19)
    at FirebaseNamespace.app (/home/akash/Documents/pro/juspay/metutu-server/functions/node_modules/firebase-admin/lib/firebase-namespace.js:372:30)
    at FirebaseNamespace.ensureApp (/home/akash/Documents/pro/juspay/metutu-server/functions/node_modules/firebase-admin/lib/firebase-namespace.js:388:24)
    at FirebaseNamespace.fn (/home/akash/Documents/pro/juspay/metutu-server/functions/node_modules/firebase-admin/lib/firebase-namespace.js:283:30)
    at app.get (/home/akash/Documents/pro/juspay/metutu-server/functions/index.js:7:11)
    at Layer.handle [as handle_request] (/home/akash/Documents/pro/juspay/metutu-server/functions/node_modules/express/lib/router/layer.js:95:5)
    at next (/home/akash/Documents/pro/juspay/metutu-server/functions/node_modules/express/lib/router/route.js:137:13)
2018-04-07T14:10:53.354Z - info: User function triggered, starting execution
2018-04-07T14:10:53.356Z - info: Execution took 1 ms, user function completed successfully
2018-04-07T14:10:53.356Z - error: Error: The default Firebase app does not exist. Make sure you call initializeApp() before using any of the Firebase services.
    at FirebaseAppError.FirebaseError [as constructor] (/home/akash/Documents/pro/juspay/metutu-server/functions/node_modules/firebase-admin/lib/utils/error.js:39:28)
    at FirebaseAppError.PrefixedFirebaseError [as constructor] (/home/akash/Documents/pro/juspay/metutu-server/functions/node_modules/firebase-admin/lib/utils/error.js:85:28)
    at new FirebaseAppError (/home/akash/Documents/pro/juspay/metutu-server/functions/node_modules/firebase-admin/lib/utils/error.js:119:28)
    at FirebaseNamespaceInternals.app (/home/akash/Documents/pro/juspay/metutu-server/functions/node_modules/firebase-admin/lib/firebase-namespace.js:105:19)
    at FirebaseNamespace.app (/home/akash/Documents/pro/juspay/metutu-server/functions/node_modules/firebase-admin/lib/firebase-namespace.js:372:30)
    at FirebaseNamespace.ensureApp (/home/akash/Documents/pro/juspay/metutu-server/functions/node_modules/firebase-admin/lib/firebase-namespace.js:388:24)
    at FirebaseNamespace.fn (/home/akash/Documents/pro/juspay/metutu-server/functions/node_modules/firebase-admin/lib/firebase-namespace.js:283:30)
    at app.get (/home/akash/Documents/pro/juspay/metutu-server/functions/index.js:7:11)
    at Layer.handle [as handle_request] (/home/akash/Documents/pro/juspay/metutu-server/functions/node_modules/express/lib/router/layer.js:95:5)
    at next (/home/akash/Documents/pro/juspay/metutu-server/functions/node_modules/express/lib/router/route.js:137:13)
2018-04-07T14:11:42.321Z - info: User function triggered, starting execution
2018-04-07T14:11:42.444Z - info: Execution took 123 ms, user function completed successfully
2018-04-07T14:11:42.445Z - error: Error: The default Firebase app does not exist. Make sure you call initializeApp() before using any of the Firebase services.
    at FirebaseAppError.FirebaseError [as constructor] (/home/akash/Documents/pro/juspay/metutu-server/functions/node_modules/firebase-admin/lib/utils/error.js:39:28)
    at FirebaseAppError.PrefixedFirebaseError [as constructor] (/home/akash/Documents/pro/juspay/metutu-server/functions/node_modules/firebase-admin/lib/utils/error.js:85:28)
    at new FirebaseAppError (/home/akash/Documents/pro/juspay/metutu-server/functions/node_modules/firebase-admin/lib/utils/error.js:119:28)
    at FirebaseNamespaceInternals.app (/home/akash/Documents/pro/juspay/metutu-server/functions/node_modules/firebase-admin/lib/firebase-namespace.js:105:19)
    at FirebaseNamespace.app (/home/akash/Documents/pro/juspay/metutu-server/functions/node_modules/firebase-admin/lib/firebase-namespace.js:372:30)
    at FirebaseNamespace.ensureApp (/home/akash/Documents/pro/juspay/metutu-server/functions/node_modules/firebase-admin/lib/firebase-namespace.js:388:24)
    at FirebaseNamespace.fn (/home/akash/Documents/pro/juspay/metutu-server/functions/node_modules/firebase-admin/lib/firebase-namespace.js:283:30)
    at app.get (/home/akash/Documents/pro/juspay/metutu-server/functions/index.js:7:11)
    at Layer.handle [as handle_request] (/home/akash/Documents/pro/juspay/metutu-server/functions/node_modules/express/lib/router/layer.js:95:5)
    at next (/home/akash/Documents/pro/juspay/metutu-server/functions/node_modules/express/lib/router/route.js:137:13)
2018-04-07T14:27:16.185Z - info: User function triggered, starting execution
2018-04-07T14:27:20.477Z - info: Execution took 4297 ms, user function completed successfully
2018-04-07T14:27:42.675Z - info: User function triggered, starting execution
2018-04-07T14:27:45.154Z - info: Execution took 2479 ms, user function completed successfully
2018-04-07T14:33:30.650Z - info: User function triggered, starting execution
2018-04-07T14:33:33.756Z - info: User function triggered, starting execution
2018-04-07T14:33:34.051Z - info: Execution took 295 ms, user function completed successfully
2018-04-07T14:34:30.652Z - info: Execution took 60843 ms, finished with status: 'timeout'
2018-04-07T14:48:01.227Z - error: SUPERVISOR error Error: listen EADDRINUSE 127.0.0.1:5000
    at Object._errnoException (util.js:1024:11)
    at _exceptionWithHostPort (util.js:1046:20)
    at Server.setupListenHandle [as _listen2] (net.js:1351:14)
    at listenInCluster (net.js:1392:12)
    at GetAddrInfoReqWrap.doListen [as callback] (net.js:1501:7)
    at GetAddrInfoReqWrap.onlookup [as oncomplete] (dns.js:97:10)
2018-04-07T14:48:01.228Z - error: supervisorPort (5000) is already in use
2018-04-07T14:48:01.229Z - error: restPort (5001) is already in use
2018-04-07T14:49:53.201Z - info: User function triggered, starting execution
2018-04-07T14:49:53.204Z - info: Function crashed
TypeError: Cannot read property 'toUpperCase' of undefined
    at exports.printsame.functions.https.onRequest (/home/akash/Documents/pro/juspay/metutu-server/functions/index.js:53:29)
    at cloudFunction (/home/akash/Documents/pro/juspay/metutu-server/functions/node_modules/firebase-functions/lib/providers/https.js:37:41)
    at app.use (/usr/lib/node_modules/firebase-tools/node_modules/@google-cloud/functions-emulator/src/supervisor/worker.js:142:11)
    at Layer.handle [as handle_request] (/usr/lib/node_modules/firebase-tools/node_modules/express/lib/router/layer.js:95:5)
    at trim_prefix (/usr/lib/node_modules/firebase-tools/node_modules/express/lib/router/index.js:317:13)
    at /usr/lib/node_modules/firebase-tools/node_modules/express/lib/router/index.js:284:7
    at Function.process_params (/usr/lib/node_modules/firebase-tools/node_modules/express/lib/router/index.js:335:12)
    at next (/usr/lib/node_modules/firebase-tools/node_modules/express/lib/router/index.js:275:10)
    at app.use (/usr/lib/node_modules/firebase-tools/node_modules/@google-cloud/functions-emulator/src/supervisor/worker.js:114:7)
    at Layer.handle [as handle_request] (/usr/lib/node_modules/firebase-tools/node_modules/express/lib/router/layer.js:95:5)
2018-04-07T14:49:53.211Z - info: Execution took 14 ms, user function completed successfully
2018-04-07T14:50:50.432Z - info: User function triggered, starting execution
2018-04-07T14:50:50.432Z - info: Function crashed
TypeError: Cannot read property 'toUpperCase' of undefined
    at exports.printsame.functions.https.onRequest (/home/akash/Documents/pro/juspay/metutu-server/functions/index.js:53:29)
    at cloudFunction (/home/akash/Documents/pro/juspay/metutu-server/functions/node_modules/firebase-functions/lib/providers/https.js:37:41)
    at app.use (/usr/lib/node_modules/firebase-tools/node_modules/@google-cloud/functions-emulator/src/supervisor/worker.js:142:11)
    at Layer.handle [as handle_request] (/usr/lib/node_modules/firebase-tools/node_modules/express/lib/router/layer.js:95:5)
    at trim_prefix (/usr/lib/node_modules/firebase-tools/node_modules/express/lib/router/index.js:317:13)
    at /usr/lib/node_modules/firebase-tools/node_modules/express/lib/router/index.js:284:7
    at Function.process_params (/usr/lib/node_modules/firebase-tools/node_modules/express/lib/router/index.js:335:12)
    at next (/usr/lib/node_modules/firebase-tools/node_modules/express/lib/router/index.js:275:10)
    at app.use (/usr/lib/node_modules/firebase-tools/node_modules/@google-cloud/functions-emulator/src/supervisor/worker.js:114:7)
    at Layer.handle [as handle_request] (/usr/lib/node_modules/firebase-tools/node_modules/express/lib/router/layer.js:95:5)
2018-04-07T14:50:50.434Z - info: Execution took 1 ms, user function completed successfully
2018-04-07T14:51:03.565Z - info: User function triggered, starting execution
2018-04-07T14:51:03.565Z - info: Function crashed
TypeError: Cannot read property 'toUpperCase' of undefined
    at exports.printsame.functions.https.onRequest (/home/akash/Documents/pro/juspay/metutu-server/functions/index.js:53:29)
    at cloudFunction (/home/akash/Documents/pro/juspay/metutu-server/functions/node_modules/firebase-functions/lib/providers/https.js:37:41)
    at app.use (/usr/lib/node_modules/firebase-tools/node_modules/@google-cloud/functions-emulator/src/supervisor/worker.js:142:11)
    at Layer.handle [as handle_request] (/usr/lib/node_modules/firebase-tools/node_modules/express/lib/router/layer.js:95:5)
    at trim_prefix (/usr/lib/node_modules/firebase-tools/node_modules/express/lib/router/index.js:317:13)
    at /usr/lib/node_modules/firebase-tools/node_modules/express/lib/router/index.js:284:7
    at Function.process_params (/usr/lib/node_modules/firebase-tools/node_modules/express/lib/router/index.js:335:12)
    at next (/usr/lib/node_modules/firebase-tools/node_modules/express/lib/router/index.js:275:10)
    at app.use (/usr/lib/node_modules/firebase-tools/node_modules/@google-cloud/functions-emulator/src/supervisor/worker.js:114:7)
    at Layer.handle [as handle_request] (/usr/lib/node_modules/firebase-tools/node_modules/express/lib/router/layer.js:95:5)
2018-04-07T14:51:03.566Z - info: Execution took 1 ms, user function completed successfully
2018-04-07T14:51:10.519Z - info: User function triggered, starting execution
2018-04-07T14:51:10.520Z - info: Function crashed
TypeError: Cannot read property 'toUpperCase' of undefined
    at exports.printsame.functions.https.onRequest (/home/akash/Documents/pro/juspay/metutu-server/functions/index.js:53:29)
    at cloudFunction (/home/akash/Documents/pro/juspay/metutu-server/functions/node_modules/firebase-functions/lib/providers/https.js:37:41)
    at app.use (/usr/lib/node_modules/firebase-tools/node_modules/@google-cloud/functions-emulator/src/supervisor/worker.js:142:11)
    at Layer.handle [as handle_request] (/usr/lib/node_modules/firebase-tools/node_modules/express/lib/router/layer.js:95:5)
    at trim_prefix (/usr/lib/node_modules/firebase-tools/node_modules/express/lib/router/index.js:317:13)
    at /usr/lib/node_modules/firebase-tools/node_modules/express/lib/router/index.js:284:7
    at Function.process_params (/usr/lib/node_modules/firebase-tools/node_modules/express/lib/router/index.js:335:12)
    at next (/usr/lib/node_modules/firebase-tools/node_modules/express/lib/router/index.js:275:10)
    at app.use (/usr/lib/node_modules/firebase-tools/node_modules/@google-cloud/functions-emulator/src/supervisor/worker.js:114:7)
    at Layer.handle [as handle_request] (/usr/lib/node_modules/firebase-tools/node_modules/express/lib/router/layer.js:95:5)
2018-04-07T14:51:10.521Z - info: Execution took 1 ms, user function completed successfully
2018-04-07T14:52:08.961Z - info: User function triggered, starting execution
2018-04-07T14:52:08.961Z - info: Function crashed
TypeError: Cannot read property 'toUpperCase' of undefined
    at exports.printsame.functions.https.onRequest (/home/akash/Documents/pro/juspay/metutu-server/functions/index.js:53:29)
    at cloudFunction (/home/akash/Documents/pro/juspay/metutu-server/functions/node_modules/firebase-functions/lib/providers/https.js:37:41)
    at app.use (/usr/lib/node_modules/firebase-tools/node_modules/@google-cloud/functions-emulator/src/supervisor/worker.js:142:11)
    at Layer.handle [as handle_request] (/usr/lib/node_modules/firebase-tools/node_modules/express/lib/router/layer.js:95:5)
    at trim_prefix (/usr/lib/node_modules/firebase-tools/node_modules/express/lib/router/index.js:317:13)
    at /usr/lib/node_modules/firebase-tools/node_modules/express/lib/router/index.js:284:7
    at Function.process_params (/usr/lib/node_modules/firebase-tools/node_modules/express/lib/router/index.js:335:12)
    at next (/usr/lib/node_modules/firebase-tools/node_modules/express/lib/router/index.js:275:10)
    at app.use (/usr/lib/node_modules/firebase-tools/node_modules/@google-cloud/functions-emulator/src/supervisor/worker.js:114:7)
    at Layer.handle [as handle_request] (/usr/lib/node_modules/firebase-tools/node_modules/express/lib/router/layer.js:95:5)
2018-04-07T14:52:08.962Z - info: Execution took 0 ms, user function completed successfully
2018-04-07T14:52:37.854Z - info: User function triggered, starting execution
2018-04-07T14:52:37.854Z - info: Function crashed
TypeError: Cannot read property 'toUpperCase' of undefined
    at exports.printsame.functions.https.onRequest (/home/akash/Documents/pro/juspay/metutu-server/functions/index.js:53:29)
    at cloudFunction (/home/akash/Documents/pro/juspay/metutu-server/functions/node_modules/firebase-functions/lib/providers/https.js:37:41)
    at app.use (/usr/lib/node_modules/firebase-tools/node_modules/@google-cloud/functions-emulator/src/supervisor/worker.js:142:11)
    at Layer.handle [as handle_request] (/usr/lib/node_modules/firebase-tools/node_modules/express/lib/router/layer.js:95:5)
    at trim_prefix (/usr/lib/node_modules/firebase-tools/node_modules/express/lib/router/index.js:317:13)
    at /usr/lib/node_modules/firebase-tools/node_modules/express/lib/router/index.js:284:7
    at Function.process_params (/usr/lib/node_modules/firebase-tools/node_modules/express/lib/router/index.js:335:12)
    at next (/usr/lib/node_modules/firebase-tools/node_modules/express/lib/router/index.js:275:10)
    at app.use (/usr/lib/node_modules/firebase-tools/node_modules/@google-cloud/functions-emulator/src/supervisor/worker.js:114:7)
    at Layer.handle [as handle_request] (/usr/lib/node_modules/firebase-tools/node_modules/express/lib/router/layer.js:95:5)
2018-04-07T14:52:37.856Z - info: Execution took 1 ms, user function completed successfully
2018-04-07T14:53:42.857Z - info: User function triggered, starting execution
2018-04-07T14:53:42.857Z - info: Function crashed
TypeError: Cannot read property 'toUpperCase' of undefined
    at exports.printsame.functions.https.onRequest (/home/akash/Documents/pro/juspay/metutu-server/functions/index.js:53:29)
    at cloudFunction (/home/akash/Documents/pro/juspay/metutu-server/functions/node_modules/firebase-functions/lib/providers/https.js:37:41)
    at app.use (/usr/lib/node_modules/firebase-tools/node_modules/@google-cloud/functions-emulator/src/supervisor/worker.js:142:11)
    at Layer.handle [as handle_request] (/usr/lib/node_modules/firebase-tools/node_modules/express/lib/router/layer.js:95:5)
    at trim_prefix (/usr/lib/node_modules/firebase-tools/node_modules/express/lib/router/index.js:317:13)
    at /usr/lib/node_modules/firebase-tools/node_modules/express/lib/router/index.js:284:7
    at Function.process_params (/usr/lib/node_modules/firebase-tools/node_modules/express/lib/router/index.js:335:12)
    at next (/usr/lib/node_modules/firebase-tools/node_modules/express/lib/router/index.js:275:10)
    at app.use (/usr/lib/node_modules/firebase-tools/node_modules/@google-cloud/functions-emulator/src/supervisor/worker.js:114:7)
    at Layer.handle [as handle_request] (/usr/lib/node_modules/firebase-tools/node_modules/express/lib/router/layer.js:95:5)
2018-04-07T14:53:42.858Z - info: Execution took 1 ms, user function completed successfully
2018-04-07T14:53:56.802Z - info: User function triggered, starting execution
2018-04-07T14:53:56.803Z - info: Function crashed
TypeError: Cannot read property 'toUpperCase' of undefined
    at exports.printsame.functions.https.onRequest (/home/akash/Documents/pro/juspay/metutu-server/functions/index.js:53:29)
    at cloudFunction (/home/akash/Documents/pro/juspay/metutu-server/functions/node_modules/firebase-functions/lib/providers/https.js:37:41)
    at app.use (/usr/lib/node_modules/firebase-tools/node_modules/@google-cloud/functions-emulator/src/supervisor/worker.js:142:11)
    at Layer.handle [as handle_request] (/usr/lib/node_modules/firebase-tools/node_modules/express/lib/router/layer.js:95:5)
    at trim_prefix (/usr/lib/node_modules/firebase-tools/node_modules/express/lib/router/index.js:317:13)
    at /usr/lib/node_modules/firebase-tools/node_modules/express/lib/router/index.js:284:7
    at Function.process_params (/usr/lib/node_modules/firebase-tools/node_modules/express/lib/router/index.js:335:12)
    at next (/usr/lib/node_modules/firebase-tools/node_modules/express/lib/router/index.js:275:10)
    at app.use (/usr/lib/node_modules/firebase-tools/node_modules/@google-cloud/functions-emulator/src/supervisor/worker.js:114:7)
    at Layer.handle [as handle_request] (/usr/lib/node_modules/firebase-tools/node_modules/express/lib/router/layer.js:95:5)
2018-04-07T14:53:56.806Z - info: Execution took 1 ms, user function completed successfully
2018-04-07T14:54:00.402Z - info: User function triggered, starting execution
2018-04-07T14:54:00.403Z - info: Function crashed
TypeError: Cannot read property 'toUpperCase' of undefined
    at exports.printsame.functions.https.onRequest (/home/akash/Documents/pro/juspay/metutu-server/functions/index.js:53:29)
    at cloudFunction (/home/akash/Documents/pro/juspay/metutu-server/functions/node_modules/firebase-functions/lib/providers/https.js:37:41)
    at app.use (/usr/lib/node_modules/firebase-tools/node_modules/@google-cloud/functions-emulator/src/supervisor/worker.js:142:11)
    at Layer.handle [as handle_request] (/usr/lib/node_modules/firebase-tools/node_modules/express/lib/router/layer.js:95:5)
    at trim_prefix (/usr/lib/node_modules/firebase-tools/node_modules/express/lib/router/index.js:317:13)
    at /usr/lib/node_modules/firebase-tools/node_modules/express/lib/router/index.js:284:7
    at Function.process_params (/usr/lib/node_modules/firebase-tools/node_modules/express/lib/router/index.js:335:12)
    at next (/usr/lib/node_modules/firebase-tools/node_modules/express/lib/router/index.js:275:10)
    at app.use (/usr/lib/node_modules/firebase-tools/node_modules/@google-cloud/functions-emulator/src/supervisor/worker.js:114:7)
    at Layer.handle [as handle_request] (/usr/lib/node_modules/firebase-tools/node_modules/express/lib/router/layer.js:95:5)
2018-04-07T14:54:00.404Z - info: Execution took 1 ms, user function completed successfully
2018-04-07T14:54:05.429Z - info: User function triggered, starting execution
2018-04-07T14:54:05.429Z - info: Function crashed
TypeError: Cannot read property 'toUpperCase' of undefined
    at exports.printsame.functions.https.onRequest (/home/akash/Documents/pro/juspay/metutu-server/functions/index.js:53:29)
    at cloudFunction (/home/akash/Documents/pro/juspay/metutu-server/functions/node_modules/firebase-functions/lib/providers/https.js:37:41)
    at app.use (/usr/lib/node_modules/firebase-tools/node_modules/@google-cloud/functions-emulator/src/supervisor/worker.js:142:11)
    at Layer.handle [as handle_request] (/usr/lib/node_modules/firebase-tools/node_modules/express/lib/router/layer.js:95:5)
    at trim_prefix (/usr/lib/node_modules/firebase-tools/node_modules/express/lib/router/index.js:317:13)
    at /usr/lib/node_modules/firebase-tools/node_modules/express/lib/router/index.js:284:7
    at Function.process_params (/usr/lib/node_modules/firebase-tools/node_modules/express/lib/router/index.js:335:12)
    at next (/usr/lib/node_modules/firebase-tools/node_modules/express/lib/router/index.js:275:10)
    at app.use (/usr/lib/node_modules/firebase-tools/node_modules/@google-cloud/functions-emulator/src/supervisor/worker.js:114:7)
    at Layer.handle [as handle_request] (/usr/lib/node_modules/firebase-tools/node_modules/express/lib/router/layer.js:95:5)
2018-04-07T14:54:05.430Z - info: Execution took 1 ms, user function completed successfully
2018-04-07T14:54:27.867Z - info: User function triggered, starting execution
2018-04-07T14:54:27.868Z - info: Function crashed
TypeError: Cannot read property 'toUpperCase' of undefined
    at exports.printsame.functions.https.onRequest (/home/akash/Documents/pro/juspay/metutu-server/functions/index.js:53:29)
    at cloudFunction (/home/akash/Documents/pro/juspay/metutu-server/functions/node_modules/firebase-functions/lib/providers/https.js:37:41)
    at app.use (/usr/lib/node_modules/firebase-tools/node_modules/@google-cloud/functions-emulator/src/supervisor/worker.js:142:11)
    at Layer.handle [as handle_request] (/usr/lib/node_modules/firebase-tools/node_modules/express/lib/router/layer.js:95:5)
    at trim_prefix (/usr/lib/node_modules/firebase-tools/node_modules/express/lib/router/index.js:317:13)
    at /usr/lib/node_modules/firebase-tools/node_modules/express/lib/router/index.js:284:7
    at Function.process_params (/usr/lib/node_modules/firebase-tools/node_modules/express/lib/router/index.js:335:12)
    at next (/usr/lib/node_modules/firebase-tools/node_modules/express/lib/router/index.js:275:10)
    at app.use (/usr/lib/node_modules/firebase-tools/node_modules/@google-cloud/functions-emulator/src/supervisor/worker.js:114:7)
    at Layer.handle [as handle_request] (/usr/lib/node_modules/firebase-tools/node_modules/express/lib/router/layer.js:95:5)
Execution took 0 ms, user function completed successfully
2018-04-07T14:55:13.849Z - info: User function triggered, starting execution
2018-04-07T14:55:13.850Z - info: Function crashed
TypeError: Cannot read property 'toUpperCase' of undefined
    at exports.printsame.functions.https.onRequest (/home/akash/Documents/pro/juspay/metutu-server/functions/index.js:53:29)
    at cloudFunction (/home/akash/Documents/pro/juspay/metutu-server/functions/node_modules/firebase-functions/lib/providers/https.js:37:41)
    at app.use (/usr/lib/node_modules/firebase-tools/node_modules/@google-cloud/functions-emulator/src/supervisor/worker.js:142:11)
    at Layer.handle [as handle_request] (/usr/lib/node_modules/firebase-tools/node_modules/express/lib/router/layer.js:95:5)
    at trim_prefix (/usr/lib/node_modules/firebase-tools/node_modules/express/lib/router/index.js:317:13)
    at /usr/lib/node_modules/firebase-tools/node_modules/express/lib/router/index.js:284:7
    at Function.process_params (/usr/lib/node_modules/firebase-tools/node_modules/express/lib/router/index.js:335:12)
    at next (/usr/lib/node_modules/firebase-tools/node_modules/express/lib/router/index.js:275:10)
    at app.use (/usr/lib/node_modules/firebase-tools/node_modules/@google-cloud/functions-emulator/src/supervisor/worker.js:114:7)
    at Layer.handle [as handle_request] (/usr/lib/node_modules/firebase-tools/node_modules/express/lib/router/layer.js:95:5)
2018-04-07T14:55:13.850Z - info: Execution took 1 ms, user function completed successfully
2018-04-07T17:13:23.008Z - error: SUPERVISOR error Error: listen EADDRINUSE 127.0.0.1:5000
    at Object._errnoException (util.js:1024:11)
    at _exceptionWithHostPort (util.js:1046:20)
    at Server.setupListenHandle [as _listen2] (net.js:1351:14)
    at listenInCluster (net.js:1392:12)
    at GetAddrInfoReqWrap.doListen [as callback] (net.js:1501:7)
    at GetAddrInfoReqWrap.onlookup [as oncomplete] (dns.js:97:10)
2018-04-07T17:13:23.010Z - error: supervisorPort (5000) is already in use
2018-04-07T17:13:23.011Z - error: restPort (5001) is already in use
2018-04-07T17:13:36.411Z - info: User function triggered, starting execution
2018-04-07T17:13:36.426Z - info: Execution took 15 ms, user function completed successfully
2018-04-07T17:13:57.444Z - info: User function triggered, starting execution
2018-04-07T17:14:02.722Z - error: (node:6971) UnhandledPromiseRejectionWarning: Unhandled promise rejection (rejection id: 2): Error: Credential implementation provided to initializeApp() via the "credential" property has insufficient permission to access the requested resource. See https://firebase.google.com/docs/admin/setup for details on how to authenticate this SDK with appropriate permissions.
2018-04-07T17:14:02.722Z - error: (node:6971) [DEP0018] DeprecationWarning: Unhandled promise rejections are deprecated. In the future, promise rejections that are not handled will terminate the Node.js process with a non-zero exit code.
2018-04-07T17:14:05.072Z - info: User function triggered, starting execution
2018-04-07T17:14:06.191Z - error: (node:6971) UnhandledPromiseRejectionWarning: Unhandled promise rejection (rejection id: 4): Error: Credential implementation provided to initializeApp() via the "credential" property has insufficient permission to access the requested resource. See https://firebase.google.com/docs/admin/setup for details on how to authenticate this SDK with appropriate permissions.
2018-04-07T17:14:11.392Z - info: User function triggered, starting execution
2018-04-07T17:14:12.444Z - error: (node:6971) UnhandledPromiseRejectionWarning: Unhandled promise rejection (rejection id: 6): Error: Credential implementation provided to initializeApp() via the "credential" property has insufficient permission to access the requested resource. See https://firebase.google.com/docs/admin/setup for details on how to authenticate this SDK with appropriate permissions.
2018-04-07T17:14:52.887Z - info: Execution took 41496 ms, finished with status: 'crash'
2018-04-07T17:14:52.889Z - info: Execution took 47819 ms, finished with status: 'crash'
2018-04-07T17:14:52.890Z - info: Execution took 55449 ms, finished with status: 'crash'
2018-04-07T17:14:53.020Z - error: Function worker killed by signal: SIGTERM
2018-04-07T17:15:58.326Z - info: User function triggered, starting execution
2018-04-07T17:16:02.662Z - error: (node:7112) UnhandledPromiseRejectionWarning: Unhandled promise rejection (rejection id: 2): Error: Credential implementation provided to initializeApp() via the "credential" property has insufficient permission to access the requested resource. See https://firebase.google.com/docs/admin/setup for details on how to authenticate this SDK with appropriate permissions.
2018-04-07T17:16:02.663Z - error: (node:7112) [DEP0018] DeprecationWarning: Unhandled promise rejections are deprecated. In the future, promise rejections that are not handled will terminate the Node.js process with a non-zero exit code.
2018-04-07T17:16:58.344Z - info: Execution took 60032 ms, finished with status: 'timeout'
2018-04-07T17:16:58.439Z - error: Function worker killed by signal: SIGTERM
2018-04-07T17:18:05.062Z - info: Worker for updateSkill closed due to file changes.
2018-04-07T17:18:05.073Z - info: Worker for printsame closed due to file changes.
2018-04-07T17:18:05.073Z - info: Worker for getChannels closed due to file changes.
2018-04-07T17:18:05.073Z - info: Worker for api closed due to file changes.
2018-04-07T17:18:21.852Z - info: User function triggered, starting execution
2018-04-07T17:18:24.546Z - error: (node:7309) UnhandledPromiseRejectionWarning: Unhandled promise rejection (rejection id: 2): Error: Credential implementation provided to initializeApp() via the "credential" property has insufficient permission to access the requested resource. See https://firebase.google.com/docs/admin/setup for details on how to authenticate this SDK with appropriate permissions.
2018-04-07T17:18:24.547Z - error: (node:7309) [DEP0018] DeprecationWarning: Unhandled promise rejections are deprecated. In the future, promise rejections that are not handled will terminate the Node.js process with a non-zero exit code.
2018-04-07T17:29:54.756Z - info: User function triggered, starting execution
2018-04-07T17:29:57.400Z - error: (node:7757) UnhandledPromiseRejectionWarning: Unhandled promise rejection (rejection id: 2): Error: Credential implementation provided to initializeApp() via the "credential" property has insufficient permission to access the requested resource. See https://firebase.google.com/docs/admin/setup for details on how to authenticate this SDK with appropriate permissions.
2018-04-07T17:29:57.401Z - error: (node:7757) [DEP0018] DeprecationWarning: Unhandled promise rejections are deprecated. In the future, promise rejections that are not handled will terminate the Node.js process with a non-zero exit code.
2018-04-07T17:30:54.751Z - info: Execution took 60908 ms, finished with status: 'timeout'
2018-04-07T17:30:54.897Z - error: Function worker killed by signal: SIGTERM
2018-04-07T17:34:37.792Z - info: User function triggered, starting execution
2018-04-07T17:34:44.875Z - error: (node:8226) UnhandledPromiseRejectionWarning: Unhandled promise rejection (rejection id: 1): Error: There is no user record corresponding to the provided identifier.
2018-04-07T17:34:44.875Z - error: (node:8226) [DEP0018] DeprecationWarning: Unhandled promise rejections are deprecated. In the future, promise rejections that are not handled will terminate the Node.js process with a non-zero exit code.
2018-04-07T17:35:37.835Z - info: Execution took 60724 ms, finished with status: 'timeout'
2018-04-07T17:35:37.901Z - error: Function worker killed by signal: SIGTERM
2018-04-07T17:36:06.177Z - info: User function triggered, starting execution
2018-04-07T17:36:09.243Z - info: [ UserRecord {
    uid: '2mZfdVQdOHXVAaaXRPSFV6n6Bwo2',
    email: 'mil10akash@gmail.com',
    emailVerified: true,
    displayName: 'Akash Milton M',
    photoURL: 'https://lh6.googleusercontent.com/-khwM1WEhtbs/AAAAAAAAAAI/AAAAAAAAHgE/FrmLJY2np7U/photo.jpg',
    phoneNumber: undefined,
    disabled: false,
    metadata: 
     UserMetadata {
       creationTime: 'Sat, 07 Apr 2018 10:30:00 GMT',
       lastSignInTime: 'Sat, 07 Apr 2018 10:37:40 GMT' },
    providerData: [ [Object] ],
    passwordHash: undefined,
    passwordSalt: undefined,
    customClaims: undefined,
    tokensValidAfterTime: 'Sat, 07 Apr 2018 10:30:00 GMT' } ]
2018-04-07T17:36:09.249Z - info: Execution took 3070 ms, user function completed successfully
2018-04-07T17:42:25.351Z - info: User function triggered, starting execution
2018-04-07T17:42:28.728Z - info: Execution took 3378 ms, user function completed successfully
2018-04-07T17:45:17.613Z - info: User function triggered, starting execution
2018-04-07T17:45:17.724Z - info: Execution took 111 ms, user function completed successfully
2018-04-07T17:45:41.426Z - info: User function triggered, starting execution
2018-04-07T17:45:41.546Z - info: Execution took 121 ms, user function completed successfully
2018-04-07T17:46:10.009Z - info: User function triggered, starting execution
2018-04-07T17:46:10.124Z - info: Execution took 115 ms, user function completed successfully
2018-04-07T17:46:13.084Z - info: [ UserRecord {
    uid: '2mZfdVQdOHXVAaaXRPSFV6n6Bwo2',
    email: 'mil10akash@gmail.com',
    emailVerified: true,
    displayName: 'Akash Milton M',
    photoURL: 'https://lh6.googleusercontent.com/-khwM1WEhtbs/AAAAAAAAAAI/AAAAAAAAHgE/FrmLJY2np7U/photo.jpg',
    phoneNumber: undefined,
    disabled: false,
    metadata: 
     UserMetadata {
       creationTime: 'Sat, 07 Apr 2018 10:30:00 GMT',
       lastSignInTime: 'Sat, 07 Apr 2018 10:37:40 GMT' },
    providerData: [ [Object] ],
    passwordHash: undefined,
    passwordSalt: undefined,
    customClaims: undefined,
    tokensValidAfterTime: 'Sat, 07 Apr 2018 10:30:00 GMT' } ]
2018-04-07T17:47:24.103Z - info: User function triggered, starting execution
2018-04-07T17:47:24.216Z - info: Execution took 114 ms, user function completed successfully
2018-04-07T17:48:42.098Z - info: User function triggered, starting execution
2018-04-07T17:48:49.245Z - info: Execution took 7149 ms, user function completed successfully
2018-04-07T18:00:00.916Z - error: SUPERVISOR error Error: listen EADDRINUSE 127.0.0.1:5000
    at Object._errnoException (util.js:1024:11)
    at _exceptionWithHostPort (util.js:1046:20)
    at Server.setupListenHandle [as _listen2] (net.js:1351:14)
    at listenInCluster (net.js:1392:12)
    at GetAddrInfoReqWrap.doListen [as callback] (net.js:1501:7)
    at GetAddrInfoReqWrap.onlookup [as oncomplete] (dns.js:97:10)
2018-04-07T18:00:00.918Z - error: supervisorPort (5000) is already in use
2018-04-07T18:00:00.920Z - error: restPort (5001) is already in use
2018-04-07T18:00:11.848Z - info: User function triggered, starting execution
2018-04-07T18:00:11.850Z - error: Request has invalid method. GET
2018-04-07T18:00:11.865Z - error: Invalid request IncomingMessage {
  _readableState: 
   ReadableState {
     objectMode: false,
     highWaterMark: 16384,
     buffer: BufferList { head: null, tail: null, length: 0 },
     length: 0,
     pipes: null,
     pipesCount: 0,
     flowing: null,
     ended: false,
     endEmitted: false,
     reading: false,
     sync: true,
     needReadable: false,
     emittedReadable: false,
     readableListening: false,
     resumeScheduled: false,
     destroyed: false,
     defaultEncoding: 'utf8',
     awaitDrain: 0,
     readingMore: true,
     decoder: null,
     encoding: null },
  readable: true,
  domain: null,
  _events: {},
  _eventsCount: 0,
  _maxListeners: undefined,
  socket: 
   Socket {
     connecting: false,
     _hadError: false,
     _handle: 
      TCP {
        reading: true,
        owner: [Circular],
        onread: [Function: onread],
        onconnection: null,
        writeQueueSize: 0,
        _consumed: true },
     _parent: null,
     _host: null,
     _readableState: 
      ReadableState {
        objectMode: false,
        highWaterMark: 16384,
        buffer: [Object],
        length: 0,
        pipes: null,
        pipesCount: 0,
        flowing: true,
        ended: false,
        endEmitted: false,
        reading: true,
        sync: false,
        needReadable: true,
        emittedReadable: false,
        readableListening: false,
        resumeScheduled: false,
        destroyed: false,
        defaultEncoding: 'utf8',
        awaitDrain: 0,
        readingMore: false,
        decoder: null,
        encoding: null },
     readable: true,
     domain: null,
     _events: 
      { end: [Array],
        finish: [Function: onSocketFinish],
        _socketEnd: [Function: onSocketEnd],
        drain: [Array],
        timeout: [Function: socketOnTimeout],
        data: [Function: bound socketOnData],
        error: [Function: socketOnError],
        close: [Array],
        resume: [Function: onSocketResume],
        pause: [Function: onSocketPause] },
     _eventsCount: 10,
     _maxListeners: undefined,
     _writableState: 
      WritableState {
        objectMode: false,
        highWaterMark: 16384,
        finalCalled: false,
        needDrain: false,
        ending: false,
        ended: false,
        finished: false,
        destroyed: false,
        decodeStrings: false,
        defaultEncoding: 'utf8',
        length: 0,
        writing: false,
        corked: 0,
        sync: true,
        bufferProcessing: false,
        onwrite: [Function: bound onwrite],
        writecb: null,
        writelen: 0,
        bufferedRequest: null,
        lastBufferedRequest: null,
        pendingcb: 0,
        prefinished: false,
        errorEmitted: false,
        bufferedRequestCount: 0,
        corkedRequestsFree: [Object] },
     writable: true,
     allowHalfOpen: true,
     _bytesDispatched: 0,
     _sockname: null,
     _pendingData: null,
     _pendingEncoding: '',
     server: 
      Server {
        domain: null,
        _events: [Object],
        _eventsCount: 2,
        _maxListeners: undefined,
        _connections: 1,
        _handle: [Object],
        _usingSlaves: false,
        _slaves: [],
        _unref: false,
        allowHalfOpen: true,
        pauseOnConnect: false,
        httpAllowHalfOpen: false,
        timeout: 120000,
        keepAliveTimeout: 5000,
        _pendingResponseData: 0,
        maxHeadersCount: null,
        _connectionKey: '4:127.0.0.1:0',
        [Symbol(asyncId)]: 9 },
     _server: 
      Server {
        domain: null,
        _events: [Object],
        _eventsCount: 2,
        _maxListeners: undefined,
        _connections: 1,
        _handle: [Object],
        _usingSlaves: false,
        _slaves: [],
        _unref: false,
        allowHalfOpen: true,
        pauseOnConnect: false,
        httpAllowHalfOpen: false,
        timeout: 120000,
        keepAliveTimeout: 5000,
        _pendingResponseData: 0,
        maxHeadersCount: null,
        _connectionKey: '4:127.0.0.1:0',
        [Symbol(asyncId)]: 9 },
     _idleTimeout: 120000,
     _idleNext: 
      TimersList {
        _idleNext: [Circular],
        _idlePrev: [Circular],
        _timer: [Object],
        _unrefed: true,
        msecs: 120000,
        nextTick: false },
     _idlePrev: 
      TimersList {
        _idleNext: [Circular],
        _idlePrev: [Circular],
        _timer: [Object],
        _unrefed: true,
        msecs: 120000,
        nextTick: false },
     _idleStart: 9273,
     _destroyed: false,
     parser: 
      HTTPParser {
        '0': [Function: parserOnHeaders],
        '1': [Function: parserOnHeadersComplete],
        '2': [Function: parserOnBody],
        '3': [Function: parserOnMessageComplete],
        '4': [Function: bound onParserExecute],
        _headers: [],
        _url: '',
        _consumed: true,
        socket: [Circular],
        incoming: [Circular],
        outgoing: null,
        maxHeaderPairs: 2000,
        onIncoming: [Function: bound parserOnIncoming] },
     on: [Function: socketOnWrap],
     _paused: false,
     read: [Function],
     _consuming: true,
     _httpMessage: 
      ServerResponse {
        domain: null,
        _events: [Object],
        _eventsCount: 1,
        _maxListeners: undefined,
        output: [],
        outputEncodings: [],
        outputCallbacks: [],
        outputSize: 0,
        writable: true,
        _last: false,
        upgrading: false,
        chunkedEncoding: false,
        shouldKeepAlive: false,
        useChunkedEncodingByDefault: true,
        sendDate: true,
        _removedConnection: false,
        _removedContLen: false,
        _removedTE: false,
        _contentLength: null,
        _hasBody: true,
        _trailer: '',
        finished: false,
        _headerSent: false,
        socket: [Circular],
        connection: [Circular],
        _header: null,
        _onPendingData: [Function: bound updateOutgoingData],
        _sent100: false,
        _expect_continue: false,
        req: [Circular],
        locals: {},
        [Symbol(outHeadersKey)]: [Object] },
     [Symbol(asyncId)]: 11,
     [Symbol(bytesRead)]: 0,
     [Symbol(asyncId)]: 13,
     [Symbol(triggerAsyncId)]: 9 },
  connection: 
   Socket {
     connecting: false,
     _hadError: false,
     _handle: 
      TCP {
        reading: true,
        owner: [Circular],
        onread: [Function: onread],
        onconnection: null,
        writeQueueSize: 0,
        _consumed: true },
     _parent: null,
     _host: null,
     _readableState: 
      ReadableState {
        objectMode: false,
        highWaterMark: 16384,
        buffer: [Object],
        length: 0,
        pipes: null,
        pipesCount: 0,
        flowing: true,
        ended: false,
        endEmitted: false,
        reading: true,
        sync: false,
        needReadable: true,
        emittedReadable: false,
        readableListening: false,
        resumeScheduled: false,
        destroyed: false,
        defaultEncoding: 'utf8',
        awaitDrain: 0,
        readingMore: false,
        decoder: null,
        encoding: null },
     readable: true,
     domain: null,
     _events: 
      { end: [Array],
        finish: [Function: onSocketFinish],
        _socketEnd: [Function: onSocketEnd],
        drain: [Array],
        timeout: [Function: socketOnTimeout],
        data: [Function: bound socketOnData],
        error: [Function: socketOnError],
        close: [Array],
        resume: [Function: onSocketResume],
        pause: [Function: onSocketPause] },
     _eventsCount: 10,
     _maxListeners: undefined,
     _writableState: 
      WritableState {
        objectMode: false,
        highWaterMark: 16384,
        finalCalled: false,
        needDrain: false,
        ending: false,
        ended: false,
        finished: false,
        destroyed: false,
        decodeStrings: false,
        defaultEncoding: 'utf8',
        length: 0,
        writing: false,
        corked: 0,
        sync: true,
        bufferProcessing: false,
        onwrite: [Function: bound onwrite],
        writecb: null,
        writelen: 0,
        bufferedRequest: null,
        lastBufferedRequest: null,
        pendingcb: 0,
        prefinished: false,
        errorEmitted: false,
        bufferedRequestCount: 0,
        corkedRequestsFree: [Object] },
     writable: true,
     allowHalfOpen: true,
     _bytesDispatched: 0,
     _sockname: null,
     _pendingData: null,
     _pendingEncoding: '',
     server: 
      Server {
        domain: null,
        _events: [Object],
        _eventsCount: 2,
        _maxListeners: undefined,
        _connections: 1,
        _handle: [Object],
        _usingSlaves: false,
        _slaves: [],
        _unref: false,
        allowHalfOpen: true,
        pauseOnConnect: false,
        httpAllowHalfOpen: false,
        timeout: 120000,
        keepAliveTimeout: 5000,
        _pendingResponseData: 0,
        maxHeadersCount: null,
        _connectionKey: '4:127.0.0.1:0',
        [Symbol(asyncId)]: 9 },
     _server: 
      Server {
        domain: null,
        _events: [Object],
        _eventsCount: 2,
        _maxListeners: undefined,
        _connections: 1,
        _handle: [Object],
        _usingSlaves: false,
        _slaves: [],
        _unref: false,
        allowHalfOpen: true,
        pauseOnConnect: false,
        httpAllowHalfOpen: false,
        timeout: 120000,
        keepAliveTimeout: 5000,
        _pendingResponseData: 0,
        maxHeadersCount: null,
        _connectionKey: '4:127.0.0.1:0',
        [Symbol(asyncId)]: 9 },
     _idleTimeout: 120000,
     _idleNext: 
      TimersList {
        _idleNext: [Circular],
        _idlePrev: [Circular],
        _timer: [Object],
        _unrefed: true,
        msecs: 120000,
        nextTick: false },
     _idlePrev: 
      TimersList {
        _idleNext: [Circular],
        _idlePrev: [Circular],
        _timer: [Object],
        _unrefed: true,
        msecs: 120000,
        nextTick: false },
     _idleStart: 9273,
     _destroyed: false,
     parser: 
      HTTPParser {
        '0': [Function: parserOnHeaders],
        '1': [Function: parserOnHeadersComplete],
        '2': [Function: parserOnBody],
        '3': [Function: parserOnMessageComplete],
        '4': [Function: bound onParserExecute],
        _headers: [],
        _url: '',
        _consumed: true,
        socket: [Circular],
        incoming: [Circular],
        outgoing: null,
        maxHeaderPairs: 2000,
        onIncoming: [Function: bound parserOnIncoming] },
     on: [Function: socketOnWrap],
     _paused: false,
     read: [Function],
     _consuming: true,
     _httpMessage: 
      ServerResponse {
        domain: null,
        _events: [Object],
        _eventsCount: 1,
        _maxListeners: undefined,
        output: [],
        outputEncodings: [],
        outputCallbacks: [],
        outputSize: 0,
        writable: true,
        _last: false,
        upgrading: false,
        chunkedEncoding: false,
        shouldKeepAlive: false,
        useChunkedEncodingByDefault: true,
        sendDate: true,
        _removedConnection: false,
        _removedContLen: false,
        _removedTE: false,
        _contentLength: null,
        _hasBody: true,
        _trailer: '',
        finished: false,
        _headerSent: false,
        socket: [Circular],
        connection: [Circular],
        _header: null,
        _onPendingData: [Function: bound updateOutgoingData],
        _sent100: false,
        _expect_continue: false,
        req: [Circular],
        locals: {},
        [Symbol(outHeadersKey)]: [Object] },
     [Symbol(asyncId)]: 11,
     [Symbol(bytesRead)]: 0,
     [Symbol(asyncId)]: 13,
     [Symbol(triggerAsyncId)]: 9 },
  httpVersionMajor: 1,
  httpVersionMinor: 1,
  httpVersion: '1.1',
  complete: false,
  headers: { connection: 'close', host: 'localhost:5000' },
  rawHeaders: [ 'connection', 'close', 'host', 'localhost:5000' ],
  trailers: {},
  rawTrailers: [],
  upgrade: false,
  url: '/',
  method: 'GET',
  statusCode: null,
  statusMessage: null,
  client: 
   Socket {
     connecting: false,
     _hadError: false,
     _handle: 
      TCP {
        reading: true,
        owner: [Circular],
        onread: [Function: onread],
        onconnection: null,
        writeQueueSize: 0,
        _consumed: true },
     _parent: null,
     _host: null,
     _readableState: 
      ReadableState {
        objectMode: false,
        highWaterMark: 16384,
        buffer: [Object],
        length: 0,
        pipes: null,
        pipesCount: 0,
        flowing: true,
        ended: false,
        endEmitted: false,
        reading: true,
        sync: false,
        needReadable: true,
        emittedReadable: false,
        readableListening: false,
        resumeScheduled: false,
        destroyed: false,
        defaultEncoding: 'utf8',
        awaitDrain: 0,
        readingMore: false,
        decoder: null,
        encoding: null },
     readable: true,
     domain: null,
     _events: 
      { end: [Array],
        finish: [Function: onSocketFinish],
        _socketEnd: [Function: onSocketEnd],
        drain: [Array],
        timeout: [Function: socketOnTimeout],
        data: [Function: bound socketOnData],
        error: [Function: socketOnError],
        close: [Array],
        resume: [Function: onSocketResume],
        pause: [Function: onSocketPause] },
     _eventsCount: 10,
     _maxListeners: undefined,
     _writableState: 
      WritableState {
        objectMode: false,
        highWaterMark: 16384,
        finalCalled: false,
        needDrain: false,
        ending: false,
        ended: false,
        finished: false,
        destroyed: false,
        decodeStrings: false,
        defaultEncoding: 'utf8',
        length: 0,
        writing: false,
        corked: 0,
        sync: true,
        bufferProcessing: false,
        onwrite: [Function: bound onwrite],
        writecb: null,
        writelen: 0,
        bufferedRequest: null,
        lastBufferedRequest: null,
        pendingcb: 0,
        prefinished: false,
        errorEmitted: false,
        bufferedRequestCount: 0,
        corkedRequestsFree: [Object] },
     writable: true,
     allowHalfOpen: true,
     _bytesDispatched: 0,
     _sockname: null,
     _pendingData: null,
     _pendingEncoding: '',
     server: 
      Server {
        domain: null,
        _events: [Object],
        _eventsCount: 2,
        _maxListeners: undefined,
        _connections: 1,
        _handle: [Object],
        _usingSlaves: false,
        _slaves: [],
        _unref: false,
        allowHalfOpen: true,
        pauseOnConnect: false,
        httpAllowHalfOpen: false,
        timeout: 120000,
        keepAliveTimeout: 5000,
        _pendingResponseData: 0,
        maxHeadersCount: null,
        _connectionKey: '4:127.0.0.1:0',
        [Symbol(asyncId)]: 9 },
     _server: 
      Server {
        domain: null,
        _events: [Object],
        _eventsCount: 2,
        _maxListeners: undefined,
        _connections: 1,
        _handle: [Object],
        _usingSlaves: false,
        _slaves: [],
        _unref: false,
        allowHalfOpen: true,
        pauseOnConnect: false,
        httpAllowHalfOpen: false,
        timeout: 120000,
        keepAliveTimeout: 5000,
        _pendingResponseData: 0,
        maxHeadersCount: null,
        _connectionKey: '4:127.0.0.1:0',
        [Symbol(asyncId)]: 9 },
     _idleTimeout: 120000,
     _idleNext: 
      TimersList {
        _idleNext: [Circular],
        _idlePrev: [Circular],
        _timer: [Object],
        _unrefed: true,
        msecs: 120000,
        nextTick: false },
     _idlePrev: 
      TimersList {
        _idleNext: [Circular],
        _idlePrev: [Circular],
        _timer: [Object],
        _unrefed: true,
        msecs: 120000,
        nextTick: false },
     _idleStart: 9273,
     _destroyed: false,
     parser: 
      HTTPParser {
        '0': [Function: parserOnHeaders],
        '1': [Function: parserOnHeadersComplete],
        '2': [Function: parserOnBody],
        '3': [Function: parserOnMessageComplete],
        '4': [Function: bound onParserExecute],
        _headers: [],
        _url: '',
        _consumed: true,
        socket: [Circular],
        incoming: [Circular],
        outgoing: null,
        maxHeaderPairs: 2000,
        onIncoming: [Function: bound parserOnIncoming] },
     on: [Function: socketOnWrap],
     _paused: false,
     read: [Function],
     _consuming: true,
     _httpMessage: 
      ServerResponse {
        domain: null,
        _events: [Object],
        _eventsCount: 1,
        _maxListeners: undefined,
        output: [],
        outputEncodings: [],
        outputCallbacks: [],
        outputSize: 0,
        writable: true,
        _last: false,
        upgrading: false,
        chunkedEncoding: false,
        shouldKeepAlive: false,
        useChunkedEncodingByDefault: true,
        sendDate: true,
        _removedConnection: false,
        _removedContLen: false,
        _removedTE: false,
        _contentLength: null,
        _hasBody: true,
        _trailer: '',
        finished: false,
        _headerSent: false,
        socket: [Circular],
        connection: [Circular],
        _header: null,
        _onPendingData: [Function: bound updateOutgoingData],
        _sent100: false,
        _expect_continue: false,
        req: [Circular],
        locals: {},
        [Symbol(outHeadersKey)]: [Object] },
     [Symbol(asyncId)]: 11,
     [Symbol(bytesRead)]: 0,
     [Symbol(asyncId)]: 13,
     [Symbol(triggerAsyncId)]: 9 },
  _consuming: false,
  _dumped: false,
  next: [Function: next],
  baseUrl: '',
  originalUrl: '/',
  _parsedUrl: 
   Url {
     protocol: null,
     slashes: null,
     auth: null,
     host: null,
     port: null,
     hostname: null,
     hash: null,
     search: null,
     query: null,
     pathname: '/',
     path: '/',
     href: '/',
     _raw: '/' },
  params: {},
  query: {},
  res: 
   ServerResponse {
     domain: null,
     _events: { finish: [Array] },
     _eventsCount: 1,
     _maxListeners: undefined,
     output: [],
     outputEncodings: [],
     outputCallbacks: [],
     outputSize: 0,
     writable: true,
     _last: false,
     upgrading: false,
     chunkedEncoding: false,
     shouldKeepAlive: false,
     useChunkedEncodingByDefault: true,
     sendDate: true,
     _removedConnection: false,
     _removedContLen: false,
     _removedTE: false,
     _contentLength: null,
     _hasBody: true,
     _trailer: '',
     finished: false,
     _headerSent: false,
     socket: 
      Socket {
        connecting: false,
        _hadError: false,
        _handle: [Object],
        _parent: null,
        _host: null,
        _readableState: [Object],
        readable: true,
        domain: null,
        _events: [Object],
        _eventsCount: 10,
        _maxListeners: undefined,
        _writableState: [Object],
        writable: true,
        allowHalfOpen: true,
        _bytesDispatched: 0,
        _sockname: null,
        _pendingData: null,
        _pendingEncoding: '',
        server: [Object],
        _server: [Object],
        _idleTimeout: 120000,
        _idleNext: [Object],
        _idlePrev: [Object],
        _idleStart: 9273,
        _destroyed: false,
        parser: [Object],
        on: [Function: socketOnWrap],
        _paused: false,
        read: [Function],
        _consuming: true,
        _httpMessage: [Circular],
        [Symbol(asyncId)]: 11,
        [Symbol(bytesRead)]: 0,
        [Symbol(asyncId)]: 13,
        [Symbol(triggerAsyncId)]: 9 },
     connection: 
      Socket {
        connecting: false,
        _hadError: false,
        _handle: [Object],
        _parent: null,
        _host: null,
        _readableState: [Object],
        readable: true,
        domain: null,
        _events: [Object],
        _eventsCount: 10,
        _maxListeners: undefined,
        _writableState: [Object],
        writable: true,
        allowHalfOpen: true,
        _bytesDispatched: 0,
        _sockname: null,
        _pendingData: null,
        _pendingEncoding: '',
        server: [Object],
        _server: [Object],
        _idleTimeout: 120000,
        _idleNext: [Object],
        _idlePrev: [Object],
        _idleStart: 9273,
        _destroyed: false,
        parser: [Object],
        on: [Function: socketOnWrap],
        _paused: false,
        read: [Function],
        _consuming: true,
        _httpMessage: [Circular],
        [Symbol(asyncId)]: 11,
        [Symbol(bytesRead)]: 0,
        [Symbol(asyncId)]: 13,
        [Symbol(triggerAsyncId)]: 9 },
     _header: null,
     _onPendingData: [Function: bound updateOutgoingData],
     _sent100: false,
     _expect_continue: false,
     req: [Circular],
     locals: {},
     [Symbol(outHeadersKey)]: 
      { 'x-powered-by': [Array],
        'cache-control': [Array],
        pragma: [Array],
        expires: [Array],
        vary: [Array] } },
  body: {} }
2018-04-07T18:00:11.884Z - info: Execution took 37 ms, user function completed successfully
2018-04-07T18:00:24.921Z - info: User function triggered, starting execution
2018-04-07T18:00:24.921Z - error: Request has invalid method. GET
2018-04-07T18:00:24.931Z - error: Invalid request IncomingMessage {
  _readableState: 
   ReadableState {
     objectMode: false,
     highWaterMark: 16384,
     buffer: BufferList { head: null, tail: null, length: 0 },
     length: 0,
     pipes: null,
     pipesCount: 0,
     flowing: null,
     ended: false,
     endEmitted: false,
     reading: false,
     sync: true,
     needReadable: false,
     emittedReadable: false,
     readableListening: false,
     resumeScheduled: false,
     destroyed: false,
     defaultEncoding: 'utf8',
     awaitDrain: 0,
     readingMore: true,
     decoder: null,
     encoding: null },
  readable: true,
  domain: null,
  _events: {},
  _eventsCount: 0,
  _maxListeners: undefined,
  socket: 
   Socket {
     connecting: false,
     _hadError: false,
     _handle: 
      TCP {
        reading: true,
        owner: [Circular],
        onread: [Function: onread],
        onconnection: null,
        writeQueueSize: 0,
        _consumed: true },
     _parent: null,
     _host: null,
     _readableState: 
      ReadableState {
        objectMode: false,
        highWaterMark: 16384,
        buffer: [Object],
        length: 0,
        pipes: null,
        pipesCount: 0,
        flowing: true,
        ended: false,
        endEmitted: false,
        reading: true,
        sync: false,
        needReadable: true,
        emittedReadable: false,
        readableListening: false,
        resumeScheduled: false,
        destroyed: false,
        defaultEncoding: 'utf8',
        awaitDrain: 0,
        readingMore: false,
        decoder: null,
        encoding: null },
     readable: true,
     domain: null,
     _events: 
      { end: [Array],
        finish: [Function: onSocketFinish],
        _socketEnd: [Function: onSocketEnd],
        drain: [Array],
        timeout: [Function: socketOnTimeout],
        data: [Function: bound socketOnData],
        error: [Function: socketOnError],
        close: [Array],
        resume: [Function: onSocketResume],
        pause: [Function: onSocketPause] },
     _eventsCount: 10,
     _maxListeners: undefined,
     _writableState: 
      WritableState {
        objectMode: false,
        highWaterMark: 16384,
        finalCalled: false,
        needDrain: false,
        ending: false,
        ended: false,
        finished: false,
        destroyed: false,
        decodeStrings: false,
        defaultEncoding: 'utf8',
        length: 0,
        writing: false,
        corked: 0,
        sync: true,
        bufferProcessing: false,
        onwrite: [Function: bound onwrite],
        writecb: null,
        writelen: 0,
        bufferedRequest: null,
        lastBufferedRequest: null,
        pendingcb: 0,
        prefinished: false,
        errorEmitted: false,
        bufferedRequestCount: 0,
        corkedRequestsFree: [Object] },
     writable: true,
     allowHalfOpen: true,
     _bytesDispatched: 0,
     _sockname: null,
     _pendingData: null,
     _pendingEncoding: '',
     server: 
      Server {
        domain: null,
        _events: [Object],
        _eventsCount: 2,
        _maxListeners: undefined,
        _connections: 1,
        _handle: [Object],
        _usingSlaves: false,
        _slaves: [],
        _unref: false,
        allowHalfOpen: true,
        pauseOnConnect: false,
        httpAllowHalfOpen: false,
        timeout: 120000,
        keepAliveTimeout: 5000,
        _pendingResponseData: 0,
        maxHeadersCount: null,
        _connectionKey: '4:127.0.0.1:0',
        [Symbol(asyncId)]: 9 },
     _server: 
      Server {
        domain: null,
        _events: [Object],
        _eventsCount: 2,
        _maxListeners: undefined,
        _connections: 1,
        _handle: [Object],
        _usingSlaves: false,
        _slaves: [],
        _unref: false,
        allowHalfOpen: true,
        pauseOnConnect: false,
        httpAllowHalfOpen: false,
        timeout: 120000,
        keepAliveTimeout: 5000,
        _pendingResponseData: 0,
        maxHeadersCount: null,
        _connectionKey: '4:127.0.0.1:0',
        [Symbol(asyncId)]: 9 },
     _idleTimeout: 120000,
     _idleNext: 
      TimersList {
        _idleNext: [Circular],
        _idlePrev: [Circular],
        _timer: [Object],
        _unrefed: true,
        msecs: 120000,
        nextTick: false },
     _idlePrev: 
      TimersList {
        _idleNext: [Circular],
        _idlePrev: [Circular],
        _timer: [Object],
        _unrefed: true,
        msecs: 120000,
        nextTick: false },
     _idleStart: 22353,
     _destroyed: false,
     parser: 
      HTTPParser {
        '0': [Function: parserOnHeaders],
        '1': [Function: parserOnHeadersComplete],
        '2': [Function: parserOnBody],
        '3': [Function: parserOnMessageComplete],
        '4': [Function: bound onParserExecute],
        _headers: [],
        _url: '',
        _consumed: true,
        socket: [Circular],
        incoming: [Circular],
        outgoing: null,
        maxHeaderPairs: 2000,
        onIncoming: [Function: bound parserOnIncoming] },
     on: [Function: socketOnWrap],
     _paused: false,
     read: [Function],
     _consuming: true,
     _httpMessage: 
      ServerResponse {
        domain: null,
        _events: [Object],
        _eventsCount: 1,
        _maxListeners: undefined,
        output: [],
        outputEncodings: [],
        outputCallbacks: [],
        outputSize: 0,
        writable: true,
        _last: false,
        upgrading: false,
        chunkedEncoding: false,
        shouldKeepAlive: false,
        useChunkedEncodingByDefault: true,
        sendDate: true,
        _removedConnection: false,
        _removedContLen: false,
        _removedTE: false,
        _contentLength: null,
        _hasBody: true,
        _trailer: '',
        finished: false,
        _headerSent: false,
        socket: [Circular],
        connection: [Circular],
        _header: null,
        _onPendingData: [Function: bound updateOutgoingData],
        _sent100: false,
        _expect_continue: false,
        req: [Circular],
        locals: {},
        [Symbol(outHeadersKey)]: [Object] },
     [Symbol(asyncId)]: 34,
     [Symbol(bytesRead)]: 0,
     [Symbol(asyncId)]: 35,
     [Symbol(triggerAsyncId)]: 9 },
  connection: 
   Socket {
     connecting: false,
     _hadError: false,
     _handle: 
      TCP {
        reading: true,
        owner: [Circular],
        onread: [Function: onread],
        onconnection: null,
        writeQueueSize: 0,
        _consumed: true },
     _parent: null,
     _host: null,
     _readableState: 
      ReadableState {
        objectMode: false,
        highWaterMark: 16384,
        buffer: [Object],
        length: 0,
        pipes: null,
        pipesCount: 0,
        flowing: true,
        ended: false,
        endEmitted: false,
        reading: true,
        sync: false,
        needReadable: true,
        emittedReadable: false,
        readableListening: false,
        resumeScheduled: false,
        destroyed: false,
        defaultEncoding: 'utf8',
        awaitDrain: 0,
        readingMore: false,
        decoder: null,
        encoding: null },
     readable: true,
     domain: null,
     _events: 
      { end: [Array],
        finish: [Function: onSocketFinish],
        _socketEnd: [Function: onSocketEnd],
        drain: [Array],
        timeout: [Function: socketOnTimeout],
        data: [Function: bound socketOnData],
        error: [Function: socketOnError],
        close: [Array],
        resume: [Function: onSocketResume],
        pause: [Function: onSocketPause] },
     _eventsCount: 10,
     _maxListeners: undefined,
     _writableState: 
      WritableState {
        objectMode: false,
        highWaterMark: 16384,
        finalCalled: false,
        needDrain: false,
        ending: false,
        ended: false,
        finished: false,
        destroyed: false,
        decodeStrings: false,
        defaultEncoding: 'utf8',
        length: 0,
        writing: false,
        corked: 0,
        sync: true,
        bufferProcessing: false,
        onwrite: [Function: bound onwrite],
        writecb: null,
        writelen: 0,
        bufferedRequest: null,
        lastBufferedRequest: null,
        pendingcb: 0,
        prefinished: false,
        errorEmitted: false,
        bufferedRequestCount: 0,
        corkedRequestsFree: [Object] },
     writable: true,
     allowHalfOpen: true,
     _bytesDispatched: 0,
     _sockname: null,
     _pendingData: null,
     _pendingEncoding: '',
     server: 
      Server {
        domain: null,
        _events: [Object],
        _eventsCount: 2,
        _maxListeners: undefined,
        _connections: 1,
        _handle: [Object],
        _usingSlaves: false,
        _slaves: [],
        _unref: false,
        allowHalfOpen: true,
        pauseOnConnect: false,
        httpAllowHalfOpen: false,
        timeout: 120000,
        keepAliveTimeout: 5000,
        _pendingResponseData: 0,
        maxHeadersCount: null,
        _connectionKey: '4:127.0.0.1:0',
        [Symbol(asyncId)]: 9 },
     _server: 
      Server {
        domain: null,
        _events: [Object],
        _eventsCount: 2,
        _maxListeners: undefined,
        _connections: 1,
        _handle: [Object],
        _usingSlaves: false,
        _slaves: [],
        _unref: false,
        allowHalfOpen: true,
        pauseOnConnect: false,
        httpAllowHalfOpen: false,
        timeout: 120000,
        keepAliveTimeout: 5000,
        _pendingResponseData: 0,
        maxHeadersCount: null,
        _connectionKey: '4:127.0.0.1:0',
        [Symbol(asyncId)]: 9 },
     _idleTimeout: 120000,
     _idleNext: 
      TimersList {
        _idleNext: [Circular],
        _idlePrev: [Circular],
        _timer: [Object],
        _unrefed: true,
        msecs: 120000,
        nextTick: false },
     _idlePrev: 
      TimersList {
        _idleNext: [Circular],
        _idlePrev: [Circular],
        _timer: [Object],
        _unrefed: true,
        msecs: 120000,
        nextTick: false },
     _idleStart: 22353,
     _destroyed: false,
     parser: 
      HTTPParser {
        '0': [Function: parserOnHeaders],
        '1': [Function: parserOnHeadersComplete],
        '2': [Function: parserOnBody],
        '3': [Function: parserOnMessageComplete],
        '4': [Function: bound onParserExecute],
        _headers: [],
        _url: '',
        _consumed: true,
        socket: [Circular],
        incoming: [Circular],
        outgoing: null,
        maxHeaderPairs: 2000,
        onIncoming: [Function: bound parserOnIncoming] },
     on: [Function: socketOnWrap],
     _paused: false,
     read: [Function],
     _consuming: true,
     _httpMessage: 
      ServerResponse {
        domain: null,
        _events: [Object],
        _eventsCount: 1,
        _maxListeners: undefined,
        output: [],
        outputEncodings: [],
        outputCallbacks: [],
        outputSize: 0,
        writable: true,
        _last: false,
        upgrading: false,
        chunkedEncoding: false,
        shouldKeepAlive: false,
        useChunkedEncodingByDefault: true,
        sendDate: true,
        _removedConnection: false,
        _removedContLen: false,
        _removedTE: false,
        _contentLength: null,
        _hasBody: true,
        _trailer: '',
        finished: false,
        _headerSent: false,
        socket: [Circular],
        connection: [Circular],
        _header: null,
        _onPendingData: [Function: bound updateOutgoingData],
        _sent100: false,
        _expect_continue: false,
        req: [Circular],
        locals: {},
        [Symbol(outHeadersKey)]: [Object] },
     [Symbol(asyncId)]: 34,
     [Symbol(bytesRead)]: 0,
     [Symbol(asyncId)]: 35,
     [Symbol(triggerAsyncId)]: 9 },
  httpVersionMajor: 1,
  httpVersionMinor: 1,
  httpVersion: '1.1',
  complete: false,
  headers: { connection: 'close', host: 'localhost:5000' },
  rawHeaders: [ 'connection', 'close', 'host', 'localhost:5000' ],
  trailers: {},
  rawTrailers: [],
  upgrade: false,
  url: '/',
  method: 'GET',
  statusCode: null,
  statusMessage: null,
  client: 
   Socket {
     connecting: false,
     _hadError: false,
     _handle: 
      TCP {
        reading: true,
        owner: [Circular],
        onread: [Function: onread],
        onconnection: null,
        writeQueueSize: 0,
        _consumed: true },
     _parent: null,
     _host: null,
     _readableState: 
      ReadableState {
        objectMode: false,
        highWaterMark: 16384,
        buffer: [Object],
        length: 0,
        pipes: null,
        pipesCount: 0,
        flowing: true,
        ended: false,
        endEmitted: false,
        reading: true,
        sync: false,
        needReadable: true,
        emittedReadable: false,
        readableListening: false,
        resumeScheduled: false,
        destroyed: false,
        defaultEncoding: 'utf8',
        awaitDrain: 0,
        readingMore: false,
        decoder: null,
        encoding: null },
     readable: true,
     domain: null,
     _events: 
      { end: [Array],
        finish: [Function: onSocketFinish],
        _socketEnd: [Function: onSocketEnd],
        drain: [Array],
        timeout: [Function: socketOnTimeout],
        data: [Function: bound socketOnData],
        error: [Function: socketOnError],
        close: [Array],
        resume: [Function: onSocketResume],
        pause: [Function: onSocketPause] },
     _eventsCount: 10,
     _maxListeners: undefined,
     _writableState: 
      WritableState {
        objectMode: false,
        highWaterMark: 16384,
        finalCalled: false,
        needDrain: false,
        ending: false,
        ended: false,
        finished: false,
        destroyed: false,
        decodeStrings: false,
        defaultEncoding: 'utf8',
        length: 0,
        writing: false,
        corked: 0,
        sync: true,
        bufferProcessing: false,
        onwrite: [Function: bound onwrite],
        writecb: null,
        writelen: 0,
        bufferedRequest: null,
        lastBufferedRequest: null,
        pendingcb: 0,
        prefinished: false,
        errorEmitted: false,
        bufferedRequestCount: 0,
        corkedRequestsFree: [Object] },
     writable: true,
     allowHalfOpen: true,
     _bytesDispatched: 0,
     _sockname: null,
     _pendingData: null,
     _pendingEncoding: '',
     server: 
      Server {
        domain: null,
        _events: [Object],
        _eventsCount: 2,
        _maxListeners: undefined,
        _connections: 1,
        _handle: [Object],
        _usingSlaves: false,
        _slaves: [],
        _unref: false,
        allowHalfOpen: true,
        pauseOnConnect: false,
        httpAllowHalfOpen: false,
        timeout: 120000,
        keepAliveTimeout: 5000,
        _pendingResponseData: 0,
        maxHeadersCount: null,
        _connectionKey: '4:127.0.0.1:0',
        [Symbol(asyncId)]: 9 },
     _server: 
      Server {
        domain: null,
        _events: [Object],
        _eventsCount: 2,
        _maxListeners: undefined,
        _connections: 1,
        _handle: [Object],
        _usingSlaves: false,
        _slaves: [],
        _unref: false,
        allowHalfOpen: true,
        pauseOnConnect: false,
        httpAllowHalfOpen: false,
        timeout: 120000,
        keepAliveTimeout: 5000,
        _pendingResponseData: 0,
        maxHeadersCount: null,
        _connectionKey: '4:127.0.0.1:0',
        [Symbol(asyncId)]: 9 },
     _idleTimeout: 120000,
     _idleNext: 
      TimersList {
        _idleNext: [Circular],
        _idlePrev: [Circular],
        _timer: [Object],
        _unrefed: true,
        msecs: 120000,
        nextTick: false },
     _idlePrev: 
      TimersList {
        _idleNext: [Circular],
        _idlePrev: [Circular],
        _timer: [Object],
        _unrefed: true,
        msecs: 120000,
        nextTick: false },
     _idleStart: 22353,
     _destroyed: false,
     parser: 
      HTTPParser {
        '0': [Function: parserOnHeaders],
        '1': [Function: parserOnHeadersComplete],
        '2': [Function: parserOnBody],
        '3': [Function: parserOnMessageComplete],
        '4': [Function: bound onParserExecute],
        _headers: [],
        _url: '',
        _consumed: true,
        socket: [Circular],
        incoming: [Circular],
        outgoing: null,
        maxHeaderPairs: 2000,
        onIncoming: [Function: bound parserOnIncoming] },
     on: [Function: socketOnWrap],
     _paused: false,
     read: [Function],
     _consuming: true,
     _httpMessage: 
      ServerResponse {
        domain: null,
        _events: [Object],
        _eventsCount: 1,
        _maxListeners: undefined,
        output: [],
        outputEncodings: [],
        outputCallbacks: [],
        outputSize: 0,
        writable: true,
        _last: false,
        upgrading: false,
        chunkedEncoding: false,
        shouldKeepAlive: false,
        useChunkedEncodingByDefault: true,
        sendDate: true,
        _removedConnection: false,
        _removedContLen: false,
        _removedTE: false,
        _contentLength: null,
        _hasBody: true,
        _trailer: '',
        finished: false,
        _headerSent: false,
        socket: [Circular],
        connection: [Circular],
        _header: null,
        _onPendingData: [Function: bound updateOutgoingData],
        _sent100: false,
        _expect_continue: false,
        req: [Circular],
        locals: {},
        [Symbol(outHeadersKey)]: [Object] },
     [Symbol(asyncId)]: 34,
     [Symbol(bytesRead)]: 0,
     [Symbol(asyncId)]: 35,
     [Symbol(triggerAsyncId)]: 9 },
  _consuming: false,
  _dumped: false,
  next: [Function: next],
  baseUrl: '',
  originalUrl: '/',
  _parsedUrl: 
   Url {
     protocol: null,
     slashes: null,
     auth: null,
     host: null,
     port: null,
     hostname: null,
     hash: null,
     search: null,
     query: null,
     pathname: '/',
     path: '/',
     href: '/',
     _raw: '/' },
  params: {},
  query: {},
  res: 
   ServerResponse {
     domain: null,
     _events: { finish: [Array] },
     _eventsCount: 1,
     _maxListeners: undefined,
     output: [],
     outputEncodings: [],
     outputCallbacks: [],
     outputSize: 0,
     writable: true,
     _last: false,
     upgrading: false,
     chunkedEncoding: false,
     shouldKeepAlive: false,
     useChunkedEncodingByDefault: true,
     sendDate: true,
     _removedConnection: false,
     _removedContLen: false,
     _removedTE: false,
     _contentLength: null,
     _hasBody: true,
     _trailer: '',
     finished: false,
     _headerSent: false,
     socket: 
      Socket {
        connecting: false,
        _hadError: false,
        _handle: [Object],
        _parent: null,
        _host: null,
        _readableState: [Object],
        readable: true,
        domain: null,
        _events: [Object],
        _eventsCount: 10,
        _maxListeners: undefined,
        _writableState: [Object],
        writable: true,
        allowHalfOpen: true,
        _bytesDispatched: 0,
        _sockname: null,
        _pendingData: null,
        _pendingEncoding: '',
        server: [Object],
        _server: [Object],
        _idleTimeout: 120000,
        _idleNext: [Object],
        _idlePrev: [Object],
        _idleStart: 22353,
        _destroyed: false,
        parser: [Object],
        on: [Function: socketOnWrap],
        _paused: false,
        read: [Function],
        _consuming: true,
        _httpMessage: [Circular],
        [Symbol(asyncId)]: 34,
        [Symbol(bytesRead)]: 0,
        [Symbol(asyncId)]: 35,
        [Symbol(triggerAsyncId)]: 9 },
     connection: 
      Socket {
        connecting: false,
        _hadError: false,
        _handle: [Object],
        _parent: null,
        _host: null,
        _readableState: [Object],
        readable: true,
        domain: null,
        _events: [Object],
        _eventsCount: 10,
        _maxListeners: undefined,
        _writableState: [Object],
        writable: true,
        allowHalfOpen: true,
        _bytesDispatched: 0,
        _sockname: null,
        _pendingData: null,
        _pendingEncoding: '',
        server: [Object],
        _server: [Object],
        _idleTimeout: 120000,
        _idleNext: [Object],
        _idlePrev: [Object],
        _idleStart: 22353,
        _destroyed: false,
        parser: [Object],
        on: [Function: socketOnWrap],
        _paused: false,
        read: [Function],
        _consuming: true,
        _httpMessage: [Circular],
        [Symbol(asyncId)]: 34,
        [Symbol(bytesRead)]: 0,
        [Symbol(asyncId)]: 35,
        [Symbol(triggerAsyncId)]: 9 },
     _header: null,
     _onPendingData: [Function: bound updateOutgoingData],
     _sent100: false,
     _expect_continue: false,
     req: [Circular],
     locals: {},
     [Symbol(outHeadersKey)]: 
      { 'x-powered-by': [Array],
        'cache-control': [Array],
        pragma: [Array],
        expires: [Array],
        vary: [Array] } },
  body: {} }
2018-04-07T18:00:24.933Z - info: Execution took 11 ms, user function completed successfully
2018-04-07T18:02:02.635Z - info: User function triggered, starting execution
2018-04-07T18:02:02.636Z - error: Request has incorrect Content-Type. 
2018-04-07T18:02:02.649Z - error: Invalid request IncomingMessage {
  _readableState: 
   ReadableState {
     objectMode: false,
     highWaterMark: 16384,
     buffer: BufferList { head: null, tail: null, length: 0 },
     length: 0,
     pipes: null,
     pipesCount: 0,
     flowing: null,
     ended: false,
     endEmitted: false,
     reading: false,
     sync: true,
     needReadable: false,
     emittedReadable: false,
     readableListening: false,
     resumeScheduled: false,
     destroyed: false,
     defaultEncoding: 'utf8',
     awaitDrain: 0,
     readingMore: true,
     decoder: null,
     encoding: null },
  readable: true,
  domain: null,
  _events: {},
  _eventsCount: 0,
  _maxListeners: undefined,
  socket: 
   Socket {
     connecting: false,
     _hadError: false,
     _handle: 
      TCP {
        reading: true,
        owner: [Circular],
        onread: [Function: onread],
        onconnection: null,
        writeQueueSize: 0,
        _consumed: true },
     _parent: null,
     _host: null,
     _readableState: 
      ReadableState {
        objectMode: false,
        highWaterMark: 16384,
        buffer: [Object],
        length: 0,
        pipes: null,
        pipesCount: 0,
        flowing: true,
        ended: false,
        endEmitted: false,
        reading: true,
        sync: false,
        needReadable: true,
        emittedReadable: false,
        readableListening: false,
        resumeScheduled: false,
        destroyed: false,
        defaultEncoding: 'utf8',
        awaitDrain: 0,
        readingMore: false,
        decoder: null,
        encoding: null },
     readable: true,
     domain: null,
     _events: 
      { end: [Array],
        finish: [Function: onSocketFinish],
        _socketEnd: [Function: onSocketEnd],
        drain: [Array],
        timeout: [Function: socketOnTimeout],
        data: [Function: bound socketOnData],
        error: [Function: socketOnError],
        close: [Array],
        resume: [Function: onSocketResume],
        pause: [Function: onSocketPause] },
     _eventsCount: 10,
     _maxListeners: undefined,
     _writableState: 
      WritableState {
        objectMode: false,
        highWaterMark: 16384,
        finalCalled: false,
        needDrain: false,
        ending: false,
        ended: false,
        finished: false,
        destroyed: false,
        decodeStrings: false,
        defaultEncoding: 'utf8',
        length: 0,
        writing: false,
        corked: 0,
        sync: true,
        bufferProcessing: false,
        onwrite: [Function: bound onwrite],
        writecb: null,
        writelen: 0,
        bufferedRequest: null,
        lastBufferedRequest: null,
        pendingcb: 0,
        prefinished: false,
        errorEmitted: false,
        bufferedRequestCount: 0,
        corkedRequestsFree: [Object] },
     writable: true,
     allowHalfOpen: true,
     _bytesDispatched: 0,
     _sockname: null,
     _pendingData: null,
     _pendingEncoding: '',
     server: 
      Server {
        domain: null,
        _events: [Object],
        _eventsCount: 2,
        _maxListeners: undefined,
        _connections: 1,
        _handle: [Object],
        _usingSlaves: false,
        _slaves: [],
        _unref: false,
        allowHalfOpen: true,
        pauseOnConnect: false,
        httpAllowHalfOpen: false,
        timeout: 120000,
        keepAliveTimeout: 5000,
        _pendingResponseData: 0,
        maxHeadersCount: null,
        _connectionKey: '4:127.0.0.1:0',
        [Symbol(asyncId)]: 9 },
     _server: 
      Server {
        domain: null,
        _events: [Object],
        _eventsCount: 2,
        _maxListeners: undefined,
        _connections: 1,
        _handle: [Object],
        _usingSlaves: false,
        _slaves: [],
        _unref: false,
        allowHalfOpen: true,
        pauseOnConnect: false,
        httpAllowHalfOpen: false,
        timeout: 120000,
        keepAliveTimeout: 5000,
        _pendingResponseData: 0,
        maxHeadersCount: null,
        _connectionKey: '4:127.0.0.1:0',
        [Symbol(asyncId)]: 9 },
     _idleTimeout: 120000,
     _idleNext: 
      TimersList {
        _idleNext: [Circular],
        _idlePrev: [Circular],
        _timer: [Object],
        _unrefed: true,
        msecs: 120000,
        nextTick: false },
     _idlePrev: 
      TimersList {
        _idleNext: [Circular],
        _idlePrev: [Circular],
        _timer: [Object],
        _unrefed: true,
        msecs: 120000,
        nextTick: false },
     _idleStart: 120067,
     _destroyed: false,
     parser: 
      HTTPParser {
        '0': [Function: parserOnHeaders],
        '1': [Function: parserOnHeadersComplete],
        '2': [Function: parserOnBody],
        '3': [Function: parserOnMessageComplete],
        '4': [Function: bound onParserExecute],
        _headers: [],
        _url: '',
        _consumed: true,
        socket: [Circular],
        incoming: [Circular],
        outgoing: null,
        maxHeaderPairs: 2000,
        onIncoming: [Function: bound parserOnIncoming] },
     on: [Function: socketOnWrap],
     _paused: false,
     read: [Function],
     _consuming: true,
     _httpMessage: 
      ServerResponse {
        domain: null,
        _events: [Object],
        _eventsCount: 1,
        _maxListeners: undefined,
        output: [],
        outputEncodings: [],
        outputCallbacks: [],
        outputSize: 0,
        writable: true,
        _last: false,
        upgrading: false,
        chunkedEncoding: false,
        shouldKeepAlive: false,
        useChunkedEncodingByDefault: true,
        sendDate: true,
        _removedConnection: false,
        _removedContLen: false,
        _removedTE: false,
        _contentLength: null,
        _hasBody: true,
        _trailer: '',
        finished: false,
        _headerSent: false,
        socket: [Circular],
        connection: [Circular],
        _header: null,
        _onPendingData: [Function: bound updateOutgoingData],
        _sent100: false,
        _expect_continue: false,
        req: [Circular],
        locals: {},
        [Symbol(outHeadersKey)]: [Object] },
     [Symbol(asyncId)]: 54,
     [Symbol(bytesRead)]: 0,
     [Symbol(asyncId)]: 55,
     [Symbol(triggerAsyncId)]: 9 },
  connection: 
   Socket {
     connecting: false,
     _hadError: false,
     _handle: 
      TCP {
        reading: true,
        owner: [Circular],
        onread: [Function: onread],
        onconnection: null,
        writeQueueSize: 0,
        _consumed: true },
     _parent: null,
     _host: null,
     _readableState: 
      ReadableState {
        objectMode: false,
        highWaterMark: 16384,
        buffer: [Object],
        length: 0,
        pipes: null,
        pipesCount: 0,
        flowing: true,
        ended: false,
        endEmitted: false,
        reading: true,
        sync: false,
        needReadable: true,
        emittedReadable: false,
        readableListening: false,
        resumeScheduled: false,
        destroyed: false,
        defaultEncoding: 'utf8',
        awaitDrain: 0,
        readingMore: false,
        decoder: null,
        encoding: null },
     readable: true,
     domain: null,
     _events: 
      { end: [Array],
        finish: [Function: onSocketFinish],
        _socketEnd: [Function: onSocketEnd],
        drain: [Array],
        timeout: [Function: socketOnTimeout],
        data: [Function: bound socketOnData],
        error: [Function: socketOnError],
        close: [Array],
        resume: [Function: onSocketResume],
        pause: [Function: onSocketPause] },
     _eventsCount: 10,
     _maxListeners: undefined,
     _writableState: 
      WritableState {
        objectMode: false,
        highWaterMark: 16384,
        finalCalled: false,
        needDrain: false,
        ending: false,
        ended: false,
        finished: false,
        destroyed: false,
        decodeStrings: false,
        defaultEncoding: 'utf8',
        length: 0,
        writing: false,
        corked: 0,
        sync: true,
        bufferProcessing: false,
        onwrite: [Function: bound onwrite],
        writecb: null,
        writelen: 0,
        bufferedRequest: null,
        lastBufferedRequest: null,
        pendingcb: 0,
        prefinished: false,
        errorEmitted: false,
        bufferedRequestCount: 0,
        corkedRequestsFree: [Object] },
     writable: true,
     allowHalfOpen: true,
     _bytesDispatched: 0,
     _sockname: null,
     _pendingData: null,
     _pendingEncoding: '',
     server: 
      Server {
        domain: null,
        _events: [Object],
        _eventsCount: 2,
        _maxListeners: undefined,
        _connections: 1,
        _handle: [Object],
        _usingSlaves: false,
        _slaves: [],
        _unref: false,
        allowHalfOpen: true,
        pauseOnConnect: false,
        httpAllowHalfOpen: false,
        timeout: 120000,
        keepAliveTimeout: 5000,
        _pendingResponseData: 0,
        maxHeadersCount: null,
        _connectionKey: '4:127.0.0.1:0',
        [Symbol(asyncId)]: 9 },
     _server: 
      Server {
        domain: null,
        _events: [Object],
        _eventsCount: 2,
        _maxListeners: undefined,
        _connections: 1,
        _handle: [Object],
        _usingSlaves: false,
        _slaves: [],
        _unref: false,
        allowHalfOpen: true,
        pauseOnConnect: false,
        httpAllowHalfOpen: false,
        timeout: 120000,
        keepAliveTimeout: 5000,
        _pendingResponseData: 0,
        maxHeadersCount: null,
        _connectionKey: '4:127.0.0.1:0',
        [Symbol(asyncId)]: 9 },
     _idleTimeout: 120000,
     _idleNext: 
      TimersList {
        _idleNext: [Circular],
        _idlePrev: [Circular],
        _timer: [Object],
        _unrefed: true,
        msecs: 120000,
        nextTick: false },
     _idlePrev: 
      TimersList {
        _idleNext: [Circular],
        _idlePrev: [Circular],
        _timer: [Object],
        _unrefed: true,
        msecs: 120000,
        nextTick: false },
     _idleStart: 120067,
     _destroyed: false,
     parser: 
      HTTPParser {
        '0': [Function: parserOnHeaders],
        '1': [Function: parserOnHeadersComplete],
        '2': [Function: parserOnBody],
        '3': [Function: parserOnMessageComplete],
        '4': [Function: bound onParserExecute],
        _headers: [],
        _url: '',
        _consumed: true,
        socket: [Circular],
        incoming: [Circular],
        outgoing: null,
        maxHeaderPairs: 2000,
        onIncoming: [Function: bound parserOnIncoming] },
     on: [Function: socketOnWrap],
     _paused: false,
     read: [Function],
     _consuming: true,
     _httpMessage: 
      ServerResponse {
        domain: null,
        _events: [Object],
        _eventsCount: 1,
        _maxListeners: undefined,
        output: [],
        outputEncodings: [],
        outputCallbacks: [],
        outputSize: 0,
        writable: true,
        _last: false,
        upgrading: false,
        chunkedEncoding: false,
        shouldKeepAlive: false,
        useChunkedEncodingByDefault: true,
        sendDate: true,
        _removedConnection: false,
        _removedContLen: false,
        _removedTE: false,
        _contentLength: null,
        _hasBody: true,
        _trailer: '',
        finished: false,
        _headerSent: false,
        socket: [Circular],
        connection: [Circular],
        _header: null,
        _onPendingData: [Function: bound updateOutgoingData],
        _sent100: false,
        _expect_continue: false,
        req: [Circular],
        locals: {},
        [Symbol(outHeadersKey)]: [Object] },
     [Symbol(asyncId)]: 54,
     [Symbol(bytesRead)]: 0,
     [Symbol(asyncId)]: 55,
     [Symbol(triggerAsyncId)]: 9 },
  httpVersionMajor: 1,
  httpVersionMinor: 1,
  httpVersion: '1.1',
  complete: false,
  headers: 
   { connection: 'close',
     'content-length': '0',
     host: 'localhost:5000' },
  rawHeaders: 
   [ 'connection',
     'close',
     'content-length',
     '0',
     'host',
     'localhost:5000' ],
  trailers: {},
  rawTrailers: [],
  upgrade: false,
  url: '/',
  method: 'POST',
  statusCode: null,
  statusMessage: null,
  client: 
   Socket {
     connecting: false,
     _hadError: false,
     _handle: 
      TCP {
        reading: true,
        owner: [Circular],
        onread: [Function: onread],
        onconnection: null,
        writeQueueSize: 0,
        _consumed: true },
     _parent: null,
     _host: null,
     _readableState: 
      ReadableState {
        objectMode: false,
        highWaterMark: 16384,
        buffer: [Object],
        length: 0,
        pipes: null,
        pipesCount: 0,
        flowing: true,
        ended: false,
        endEmitted: false,
        reading: true,
        sync: false,
        needReadable: true,
        emittedReadable: false,
        readableListening: false,
        resumeScheduled: false,
        destroyed: false,
        defaultEncoding: 'utf8',
        awaitDrain: 0,
        readingMore: false,
        decoder: null,
        encoding: null },
     readable: true,
     domain: null,
     _events: 
      { end: [Array],
        finish: [Function: onSocketFinish],
        _socketEnd: [Function: onSocketEnd],
        drain: [Array],
        timeout: [Function: socketOnTimeout],
        data: [Function: bound socketOnData],
        error: [Function: socketOnError],
        close: [Array],
        resume: [Function: onSocketResume],
        pause: [Function: onSocketPause] },
     _eventsCount: 10,
     _maxListeners: undefined,
     _writableState: 
      WritableState {
        objectMode: false,
        highWaterMark: 16384,
        finalCalled: false,
        needDrain: false,
        ending: false,
        ended: false,
        finished: false,
        destroyed: false,
        decodeStrings: false,
        defaultEncoding: 'utf8',
        length: 0,
        writing: false,
        corked: 0,
        sync: true,
        bufferProcessing: false,
        onwrite: [Function: bound onwrite],
        writecb: null,
        writelen: 0,
        bufferedRequest: null,
        lastBufferedRequest: null,
        pendingcb: 0,
        prefinished: false,
        errorEmitted: false,
        bufferedRequestCount: 0,
        corkedRequestsFree: [Object] },
     writable: true,
     allowHalfOpen: true,
     _bytesDispatched: 0,
     _sockname: null,
     _pendingData: null,
     _pendingEncoding: '',
     server: 
      Server {
        domain: null,
        _events: [Object],
        _eventsCount: 2,
        _maxListeners: undefined,
        _connections: 1,
        _handle: [Object],
        _usingSlaves: false,
        _slaves: [],
        _unref: false,
        allowHalfOpen: true,
        pauseOnConnect: false,
        httpAllowHalfOpen: false,
        timeout: 120000,
        keepAliveTimeout: 5000,
        _pendingResponseData: 0,
        maxHeadersCount: null,
        _connectionKey: '4:127.0.0.1:0',
        [Symbol(asyncId)]: 9 },
     _server: 
      Server {
        domain: null,
        _events: [Object],
        _eventsCount: 2,
        _maxListeners: undefined,
        _connections: 1,
        _handle: [Object],
        _usingSlaves: false,
        _slaves: [],
        _unref: false,
        allowHalfOpen: true,
        pauseOnConnect: false,
        httpAllowHalfOpen: false,
        timeout: 120000,
        keepAliveTimeout: 5000,
        _pendingResponseData: 0,
        maxHeadersCount: null,
        _connectionKey: '4:127.0.0.1:0',
        [Symbol(asyncId)]: 9 },
     _idleTimeout: 120000,
     _idleNext: 
      TimersList {
        _idleNext: [Circular],
        _idlePrev: [Circular],
        _timer: [Object],
        _unrefed: true,
        msecs: 120000,
        nextTick: false },
     _idlePrev: 
      TimersList {
        _idleNext: [Circular],
        _idlePrev: [Circular],
        _timer: [Object],
        _unrefed: true,
        msecs: 120000,
        nextTick: false },
     _idleStart: 120067,
     _destroyed: false,
     parser: 
      HTTPParser {
        '0': [Function: parserOnHeaders],
        '1': [Function: parserOnHeadersComplete],
        '2': [Function: parserOnBody],
        '3': [Function: parserOnMessageComplete],
        '4': [Function: bound onParserExecute],
        _headers: [],
        _url: '',
        _consumed: true,
        socket: [Circular],
        incoming: [Circular],
        outgoing: null,
        maxHeaderPairs: 2000,
        onIncoming: [Function: bound parserOnIncoming] },
     on: [Function: socketOnWrap],
     _paused: false,
     read: [Function],
     _consuming: true,
     _httpMessage: 
      ServerResponse {
        domain: null,
        _events: [Object],
        _eventsCount: 1,
        _maxListeners: undefined,
        output: [],
        outputEncodings: [],
        outputCallbacks: [],
        outputSize: 0,
        writable: true,
        _last: false,
        upgrading: false,
        chunkedEncoding: false,
        shouldKeepAlive: false,
        useChunkedEncodingByDefault: true,
        sendDate: true,
        _removedConnection: false,
        _removedContLen: false,
        _removedTE: false,
        _contentLength: null,
        _hasBody: true,
        _trailer: '',
        finished: false,
        _headerSent: false,
        socket: [Circular],
        connection: [Circular],
        _header: null,
        _onPendingData: [Function: bound updateOutgoingData],
        _sent100: false,
        _expect_continue: false,
        req: [Circular],
        locals: {},
        [Symbol(outHeadersKey)]: [Object] },
     [Symbol(asyncId)]: 54,
     [Symbol(bytesRead)]: 0,
     [Symbol(asyncId)]: 55,
     [Symbol(triggerAsyncId)]: 9 },
  _consuming: false,
  _dumped: false,
  next: [Function: next],
  baseUrl: '',
  originalUrl: '/',
  _parsedUrl: 
   Url {
     protocol: null,
     slashes: null,
     auth: null,
     host: null,
     port: null,
     hostname: null,
     hash: null,
     search: null,
     query: null,
     pathname: '/',
     path: '/',
     href: '/',
     _raw: '/' },
  params: {},
  query: {},
  res: 
   ServerResponse {
     domain: null,
     _events: { finish: [Array] },
     _eventsCount: 1,
     _maxListeners: undefined,
     output: [],
     outputEncodings: [],
     outputCallbacks: [],
     outputSize: 0,
     writable: true,
     _last: false,
     upgrading: false,
     chunkedEncoding: false,
     shouldKeepAlive: false,
     useChunkedEncodingByDefault: true,
     sendDate: true,
     _removedConnection: false,
     _removedContLen: false,
     _removedTE: false,
     _contentLength: null,
     _hasBody: true,
     _trailer: '',
     finished: false,
     _headerSent: false,
     socket: 
      Socket {
        connecting: false,
        _hadError: false,
        _handle: [Object],
        _parent: null,
        _host: null,
        _readableState: [Object],
        readable: true,
        domain: null,
        _events: [Object],
        _eventsCount: 10,
        _maxListeners: undefined,
        _writableState: [Object],
        writable: true,
        allowHalfOpen: true,
        _bytesDispatched: 0,
        _sockname: null,
        _pendingData: null,
        _pendingEncoding: '',
        server: [Object],
        _server: [Object],
        _idleTimeout: 120000,
        _idleNext: [Object],
        _idlePrev: [Object],
        _idleStart: 120067,
        _destroyed: false,
        parser: [Object],
        on: [Function: socketOnWrap],
        _paused: false,
        read: [Function],
        _consuming: true,
        _httpMessage: [Circular],
        [Symbol(asyncId)]: 54,
        [Symbol(bytesRead)]: 0,
        [Symbol(asyncId)]: 55,
        [Symbol(triggerAsyncId)]: 9 },
     connection: 
      Socket {
        connecting: false,
        _hadError: false,
        _handle: [Object],
        _parent: null,
        _host: null,
        _readableState: [Object],
        readable: true,
        domain: null,
        _events: [Object],
        _eventsCount: 10,
        _maxListeners: undefined,
        _writableState: [Object],
        writable: true,
        allowHalfOpen: true,
        _bytesDispatched: 0,
        _sockname: null,
        _pendingData: null,
        _pendingEncoding: '',
        server: [Object],
        _server: [Object],
        _idleTimeout: 120000,
        _idleNext: [Object],
        _idlePrev: [Object],
        _idleStart: 120067,
        _destroyed: false,
        parser: [Object],
        on: [Function: socketOnWrap],
        _paused: false,
        read: [Function],
        _consuming: true,
        _httpMessage: [Circular],
        [Symbol(asyncId)]: 54,
        [Symbol(bytesRead)]: 0,
        [Symbol(asyncId)]: 55,
        [Symbol(triggerAsyncId)]: 9 },
     _header: null,
     _onPendingData: [Function: bound updateOutgoingData],
     _sent100: false,
     _expect_continue: false,
     req: [Circular],
     locals: {},
     [Symbol(outHeadersKey)]: 
      { 'x-powered-by': [Array],
        'cache-control': [Array],
        pragma: [Array],
        expires: [Array],
        vary: [Array] } },
  body: {} }
2018-04-07T18:02:02.651Z - info: Execution took 15 ms, user function completed successfully
2018-04-07T18:02:08.894Z - info: User function triggered, starting execution
2018-04-07T18:02:08.895Z - error: Request has incorrect Content-Type. 
2018-04-07T18:02:08.903Z - error: Invalid request IncomingMessage {
  _readableState: 
   ReadableState {
     objectMode: false,
     highWaterMark: 16384,
     buffer: BufferList { head: null, tail: null, length: 0 },
     length: 0,
     pipes: null,
     pipesCount: 0,
     flowing: null,
     ended: false,
     endEmitted: false,
     reading: false,
     sync: true,
     needReadable: false,
     emittedReadable: false,
     readableListening: false,
     resumeScheduled: false,
     destroyed: false,
     defaultEncoding: 'utf8',
     awaitDrain: 0,
     readingMore: true,
     decoder: null,
     encoding: null },
  readable: true,
  domain: null,
  _events: {},
  _eventsCount: 0,
  _maxListeners: undefined,
  socket: 
   Socket {
     connecting: false,
     _hadError: false,
     _handle: 
      TCP {
        reading: true,
        owner: [Circular],
        onread: [Function: onread],
        onconnection: null,
        writeQueueSize: 0,
        _consumed: true },
     _parent: null,
     _host: null,
     _readableState: 
      ReadableState {
        objectMode: false,
        highWaterMark: 16384,
        buffer: [Object],
        length: 0,
        pipes: null,
        pipesCount: 0,
        flowing: true,
        ended: false,
        endEmitted: false,
        reading: true,
        sync: false,
        needReadable: true,
        emittedReadable: false,
        readableListening: false,
        resumeScheduled: false,
        destroyed: false,
        defaultEncoding: 'utf8',
        awaitDrain: 0,
        readingMore: false,
        decoder: null,
        encoding: null },
     readable: true,
     domain: null,
     _events: 
      { end: [Array],
        finish: [Function: onSocketFinish],
        _socketEnd: [Function: onSocketEnd],
        drain: [Array],
        timeout: [Function: socketOnTimeout],
        data: [Function: bound socketOnData],
        error: [Function: socketOnError],
        close: [Array],
        resume: [Function: onSocketResume],
        pause: [Function: onSocketPause] },
     _eventsCount: 10,
     _maxListeners: undefined,
     _writableState: 
      WritableState {
        objectMode: false,
        highWaterMark: 16384,
        finalCalled: false,
        needDrain: false,
        ending: false,
        ended: false,
        finished: false,
        destroyed: false,
        decodeStrings: false,
        defaultEncoding: 'utf8',
        length: 0,
        writing: false,
        corked: 0,
        sync: true,
        bufferProcessing: false,
        onwrite: [Function: bound onwrite],
        writecb: null,
        writelen: 0,
        bufferedRequest: null,
        lastBufferedRequest: null,
        pendingcb: 0,
        prefinished: false,
        errorEmitted: false,
        bufferedRequestCount: 0,
        corkedRequestsFree: [Object] },
     writable: true,
     allowHalfOpen: true,
     _bytesDispatched: 0,
     _sockname: null,
     _pendingData: null,
     _pendingEncoding: '',
     server: 
      Server {
        domain: null,
        _events: [Object],
        _eventsCount: 2,
        _maxListeners: undefined,
        _connections: 1,
        _handle: [Object],
        _usingSlaves: false,
        _slaves: [],
        _unref: false,
        allowHalfOpen: true,
        pauseOnConnect: false,
        httpAllowHalfOpen: false,
        timeout: 120000,
        keepAliveTimeout: 5000,
        _pendingResponseData: 0,
        maxHeadersCount: null,
        _connectionKey: '4:127.0.0.1:0',
        [Symbol(asyncId)]: 9 },
     _server: 
      Server {
        domain: null,
        _events: [Object],
        _eventsCount: 2,
        _maxListeners: undefined,
        _connections: 1,
        _handle: [Object],
        _usingSlaves: false,
        _slaves: [],
        _unref: false,
        allowHalfOpen: true,
        pauseOnConnect: false,
        httpAllowHalfOpen: false,
        timeout: 120000,
        keepAliveTimeout: 5000,
        _pendingResponseData: 0,
        maxHeadersCount: null,
        _connectionKey: '4:127.0.0.1:0',
        [Symbol(asyncId)]: 9 },
     _idleTimeout: 120000,
     _idleNext: 
      TimersList {
        _idleNext: [Circular],
        _idlePrev: [Circular],
        _timer: [Object],
        _unrefed: true,
        msecs: 120000,
        nextTick: false },
     _idlePrev: 
      TimersList {
        _idleNext: [Circular],
        _idlePrev: [Circular],
        _timer: [Object],
        _unrefed: true,
        msecs: 120000,
        nextTick: false },
     _idleStart: 126326,
     _destroyed: false,
     parser: 
      HTTPParser {
        '0': [Function: parserOnHeaders],
        '1': [Function: parserOnHeadersComplete],
        '2': [Function: parserOnBody],
        '3': [Function: parserOnMessageComplete],
        '4': [Function: bound onParserExecute],
        _headers: [],
        _url: '',
        _consumed: true,
        socket: [Circular],
        incoming: [Circular],
        outgoing: null,
        maxHeaderPairs: 2000,
        onIncoming: [Function: bound parserOnIncoming] },
     on: [Function: socketOnWrap],
     _paused: false,
     read: [Function],
     _consuming: true,
     _httpMessage: 
      ServerResponse {
        domain: null,
        _events: [Object],
        _eventsCount: 1,
        _maxListeners: undefined,
        output: [],
        outputEncodings: [],
        outputCallbacks: [],
        outputSize: 0,
        writable: true,
        _last: false,
        upgrading: false,
        chunkedEncoding: false,
        shouldKeepAlive: false,
        useChunkedEncodingByDefault: true,
        sendDate: true,
        _removedConnection: false,
        _removedContLen: false,
        _removedTE: false,
        _contentLength: null,
        _hasBody: true,
        _trailer: '',
        finished: false,
        _headerSent: false,
        socket: [Circular],
        connection: [Circular],
        _header: null,
        _onPendingData: [Function: bound updateOutgoingData],
        _sent100: false,
        _expect_continue: false,
        req: [Circular],
        locals: {},
        [Symbol(outHeadersKey)]: [Object] },
     [Symbol(asyncId)]: 74,
     [Symbol(bytesRead)]: 0,
     [Symbol(asyncId)]: 75,
     [Symbol(triggerAsyncId)]: 9 },
  connection: 
   Socket {
     connecting: false,
     _hadError: false,
     _handle: 
      TCP {
        reading: true,
        owner: [Circular],
        onread: [Function: onread],
        onconnection: null,
        writeQueueSize: 0,
        _consumed: true },
     _parent: null,
     _host: null,
     _readableState: 
      ReadableState {
        objectMode: false,
        highWaterMark: 16384,
        buffer: [Object],
        length: 0,
        pipes: null,
        pipesCount: 0,
        flowing: true,
        ended: false,
        endEmitted: false,
        reading: true,
        sync: false,
        needReadable: true,
        emittedReadable: false,
        readableListening: false,
        resumeScheduled: false,
        destroyed: false,
        defaultEncoding: 'utf8',
        awaitDrain: 0,
        readingMore: false,
        decoder: null,
        encoding: null },
     readable: true,
     domain: null,
     _events: 
      { end: [Array],
        finish: [Function: onSocketFinish],
        _socketEnd: [Function: onSocketEnd],
        drain: [Array],
        timeout: [Function: socketOnTimeout],
        data: [Function: bound socketOnData],
        error: [Function: socketOnError],
        close: [Array],
        resume: [Function: onSocketResume],
        pause: [Function: onSocketPause] },
     _eventsCount: 10,
     _maxListeners: undefined,
     _writableState: 
      WritableState {
        objectMode: false,
        highWaterMark: 16384,
        finalCalled: false,
        needDrain: false,
        ending: false,
        ended: false,
        finished: false,
        destroyed: false,
        decodeStrings: false,
        defaultEncoding: 'utf8',
        length: 0,
        writing: false,
        corked: 0,
        sync: true,
        bufferProcessing: false,
        onwrite: [Function: bound onwrite],
        writecb: null,
        writelen: 0,
        bufferedRequest: null,
        lastBufferedRequest: null,
        pendingcb: 0,
        prefinished: false,
        errorEmitted: false,
        bufferedRequestCount: 0,
        corkedRequestsFree: [Object] },
     writable: true,
     allowHalfOpen: true,
     _bytesDispatched: 0,
     _sockname: null,
     _pendingData: null,
     _pendingEncoding: '',
     server: 
      Server {
        domain: null,
        _events: [Object],
        _eventsCount: 2,
        _maxListeners: undefined,
        _connections: 1,
        _handle: [Object],
        _usingSlaves: false,
        _slaves: [],
        _unref: false,
        allowHalfOpen: true,
        pauseOnConnect: false,
        httpAllowHalfOpen: false,
        timeout: 120000,
        keepAliveTimeout: 5000,
        _pendingResponseData: 0,
        maxHeadersCount: null,
        _connectionKey: '4:127.0.0.1:0',
        [Symbol(asyncId)]: 9 },
     _server: 
      Server {
        domain: null,
        _events: [Object],
        _eventsCount: 2,
        _maxListeners: undefined,
        _connections: 1,
        _handle: [Object],
        _usingSlaves: false,
        _slaves: [],
        _unref: false,
        allowHalfOpen: true,
        pauseOnConnect: false,
        httpAllowHalfOpen: false,
        timeout: 120000,
        keepAliveTimeout: 5000,
        _pendingResponseData: 0,
        maxHeadersCount: null,
        _connectionKey: '4:127.0.0.1:0',
        [Symbol(asyncId)]: 9 },
     _idleTimeout: 120000,
     _idleNext: 
      TimersList {
        _idleNext: [Circular],
        _idlePrev: [Circular],
        _timer: [Object],
        _unrefed: true,
        msecs: 120000,
        nextTick: false },
     _idlePrev: 
      TimersList {
        _idleNext: [Circular],
        _idlePrev: [Circular],
        _timer: [Object],
        _unrefed: true,
        msecs: 120000,
        nextTick: false },
     _idleStart: 126326,
     _destroyed: false,
     parser: 
      HTTPParser {
        '0': [Function: parserOnHeaders],
        '1': [Function: parserOnHeadersComplete],
        '2': [Function: parserOnBody],
        '3': [Function: parserOnMessageComplete],
        '4': [Function: bound onParserExecute],
        _headers: [],
        _url: '',
        _consumed: true,
        socket: [Circular],
        incoming: [Circular],
        outgoing: null,
        maxHeaderPairs: 2000,
        onIncoming: [Function: bound parserOnIncoming] },
     on: [Function: socketOnWrap],
     _paused: false,
     read: [Function],
     _consuming: true,
     _httpMessage: 
      ServerResponse {
        domain: null,
        _events: [Object],
        _eventsCount: 1,
        _maxListeners: undefined,
        output: [],
        outputEncodings: [],
        outputCallbacks: [],
        outputSize: 0,
        writable: true,
        _last: false,
        upgrading: false,
        chunkedEncoding: false,
        shouldKeepAlive: false,
        useChunkedEncodingByDefault: true,
        sendDate: true,
        _removedConnection: false,
        _removedContLen: false,
        _removedTE: false,
        _contentLength: null,
        _hasBody: true,
        _trailer: '',
        finished: false,
        _headerSent: false,
        socket: [Circular],
        connection: [Circular],
        _header: null,
        _onPendingData: [Function: bound updateOutgoingData],
        _sent100: false,
        _expect_continue: false,
        req: [Circular],
        locals: {},
        [Symbol(outHeadersKey)]: [Object] },
     [Symbol(asyncId)]: 74,
     [Symbol(bytesRead)]: 0,
     [Symbol(asyncId)]: 75,
     [Symbol(triggerAsyncId)]: 9 },
  httpVersionMajor: 1,
  httpVersionMinor: 1,
  httpVersion: '1.1',
  complete: false,
  headers: 
   { connection: 'close',
     'content-length': '0',
     host: 'localhost:5000' },
  rawHeaders: 
   [ 'connection',
     'close',
     'content-length',
     '0',
     'host',
     'localhost:5000' ],
  trailers: {},
  rawTrailers: [],
  upgrade: false,
  url: '/',
  method: 'POST',
  statusCode: null,
  statusMessage: null,
  client: 
   Socket {
     connecting: false,
     _hadError: false,
     _handle: 
      TCP {
        reading: true,
        owner: [Circular],
        onread: [Function: onread],
        onconnection: null,
        writeQueueSize: 0,
        _consumed: true },
     _parent: null,
     _host: null,
     _readableState: 
      ReadableState {
        objectMode: false,
        highWaterMark: 16384,
        buffer: [Object],
        length: 0,
        pipes: null,
        pipesCount: 0,
        flowing: true,
        ended: false,
        endEmitted: false,
        reading: true,
        sync: false,
        needReadable: true,
        emittedReadable: false,
        readableListening: false,
        resumeScheduled: false,
        destroyed: false,
        defaultEncoding: 'utf8',
        awaitDrain: 0,
        readingMore: false,
        decoder: null,
        encoding: null },
     readable: true,
     domain: null,
     _events: 
      { end: [Array],
        finish: [Function: onSocketFinish],
        _socketEnd: [Function: onSocketEnd],
        drain: [Array],
        timeout: [Function: socketOnTimeout],
        data: [Function: bound socketOnData],
        error: [Function: socketOnError],
        close: [Array],
        resume: [Function: onSocketResume],
        pause: [Function: onSocketPause] },
     _eventsCount: 10,
     _maxListeners: undefined,
     _writableState: 
      WritableState {
        objectMode: false,
        highWaterMark: 16384,
        finalCalled: false,
        needDrain: false,
        ending: false,
        ended: false,
        finished: false,
        destroyed: false,
        decodeStrings: false,
        defaultEncoding: 'utf8',
        length: 0,
        writing: false,
        corked: 0,
        sync: true,
        bufferProcessing: false,
        onwrite: [Function: bound onwrite],
        writecb: null,
        writelen: 0,
        bufferedRequest: null,
        lastBufferedRequest: null,
        pendingcb: 0,
        prefinished: false,
        errorEmitted: false,
        bufferedRequestCount: 0,
        corkedRequestsFree: [Object] },
     writable: true,
     allowHalfOpen: true,
     _bytesDispatched: 0,
     _sockname: null,
     _pendingData: null,
     _pendingEncoding: '',
     server: 
      Server {
        domain: null,
        _events: [Object],
        _eventsCount: 2,
        _maxListeners: undefined,
        _connections: 1,
        _handle: [Object],
        _usingSlaves: false,
        _slaves: [],
        _unref: false,
        allowHalfOpen: true,
        pauseOnConnect: false,
        httpAllowHalfOpen: false,
        timeout: 120000,
        keepAliveTimeout: 5000,
        _pendingResponseData: 0,
        maxHeadersCount: null,
        _connectionKey: '4:127.0.0.1:0',
        [Symbol(asyncId)]: 9 },
     _server: 
      Server {
        domain: null,
        _events: [Object],
        _eventsCount: 2,
        _maxListeners: undefined,
        _connections: 1,
        _handle: [Object],
        _usingSlaves: false,
        _slaves: [],
        _unref: false,
        allowHalfOpen: true,
        pauseOnConnect: false,
        httpAllowHalfOpen: false,
        timeout: 120000,
        keepAliveTimeout: 5000,
        _pendingResponseData: 0,
        maxHeadersCount: null,
        _connectionKey: '4:127.0.0.1:0',
        [Symbol(asyncId)]: 9 },
     _idleTimeout: 120000,
     _idleNext: 
      TimersList {
        _idleNext: [Circular],
        _idlePrev: [Circular],
        _timer: [Object],
        _unrefed: true,
        msecs: 120000,
        nextTick: false },
     _idlePrev: 
      TimersList {
        _idleNext: [Circular],
        _idlePrev: [Circular],
        _timer: [Object],
        _unrefed: true,
        msecs: 120000,
        nextTick: false },
     _idleStart: 126326,
     _destroyed: false,
     parser: 
      HTTPParser {
        '0': [Function: parserOnHeaders],
        '1': [Function: parserOnHeadersComplete],
        '2': [Function: parserOnBody],
        '3': [Function: parserOnMessageComplete],
        '4': [Function: bound onParserExecute],
        _headers: [],
        _url: '',
        _consumed: true,
        socket: [Circular],
        incoming: [Circular],
        outgoing: null,
        maxHeaderPairs: 2000,
        onIncoming: [Function: bound parserOnIncoming] },
     on: [Function: socketOnWrap],
     _paused: false,
     read: [Function],
     _consuming: true,
     _httpMessage: 
      ServerResponse {
        domain: null,
        _events: [Object],
        _eventsCount: 1,
        _maxListeners: undefined,
        output: [],
        outputEncodings: [],
        outputCallbacks: [],
        outputSize: 0,
        writable: true,
        _last: false,
        upgrading: false,
        chunkedEncoding: false,
        shouldKeepAlive: false,
        useChunkedEncodingByDefault: true,
        sendDate: true,
        _removedConnection: false,
        _removedContLen: false,
        _removedTE: false,
        _contentLength: null,
        _hasBody: true,
        _trailer: '',
        finished: false,
        _headerSent: false,
        socket: [Circular],
        connection: [Circular],
        _header: null,
        _onPendingData: [Function: bound updateOutgoingData],
        _sent100: false,
        _expect_continue: false,
        req: [Circular],
        locals: {},
        [Symbol(outHeadersKey)]: [Object] },
     [Symbol(asyncId)]: 74,
     [Symbol(bytesRead)]: 0,
     [Symbol(asyncId)]: 75,
     [Symbol(triggerAsyncId)]: 9 },
  _consuming: false,
  _dumped: false,
  next: [Function: next],
  baseUrl: '',
  originalUrl: '/',
  _parsedUrl: 
   Url {
     protocol: null,
     slashes: null,
     auth: null,
     host: null,
     port: null,
     hostname: null,
     hash: null,
     search: null,
     query: null,
     pathname: '/',
     path: '/',
     href: '/',
     _raw: '/' },
  params: {},
  query: {},
  res: 
   ServerResponse {
     domain: null,
     _events: { finish: [Array] },
     _eventsCount: 1,
     _maxListeners: undefined,
     output: [],
     outputEncodings: [],
     outputCallbacks: [],
     outputSize: 0,
     writable: true,
     _last: false,
     upgrading: false,
     chunkedEncoding: false,
     shouldKeepAlive: false,
     useChunkedEncodingByDefault: true,
     sendDate: true,
     _removedConnection: false,
     _removedContLen: false,
     _removedTE: false,
     _contentLength: null,
     _hasBody: true,
     _trailer: '',
     finished: false,
     _headerSent: false,
     socket: 
      Socket {
        connecting: false,
        _hadError: false,
        _handle: [Object],
        _parent: null,
        _host: null,
        _readableState: [Object],
        readable: true,
        domain: null,
        _events: [Object],
        _eventsCount: 10,
        _maxListeners: undefined,
        _writableState: [Object],
        writable: true,
        allowHalfOpen: true,
        _bytesDispatched: 0,
        _sockname: null,
        _pendingData: null,
        _pendingEncoding: '',
        server: [Object],
        _server: [Object],
        _idleTimeout: 120000,
        _idleNext: [Object],
        _idlePrev: [Object],
        _idleStart: 126326,
        _destroyed: false,
        parser: [Object],
        on: [Function: socketOnWrap],
        _paused: false,
        read: [Function],
        _consuming: true,
        _httpMessage: [Circular],
        [Symbol(asyncId)]: 74,
        [Symbol(bytesRead)]: 0,
        [Symbol(asyncId)]: 75,
        [Symbol(triggerAsyncId)]: 9 },
     connection: 
      Socket {
        connecting: false,
        _hadError: false,
        _handle: [Object],
        _parent: null,
        _host: null,
        _readableState: [Object],
        readable: true,
        domain: null,
        _events: [Object],
        _eventsCount: 10,
        _maxListeners: undefined,
        _writableState: [Object],
        writable: true,
        allowHalfOpen: true,
        _bytesDispatched: 0,
        _sockname: null,
        _pendingData: null,
        _pendingEncoding: '',
        server: [Object],
        _server: [Object],
        _idleTimeout: 120000,
        _idleNext: [Object],
        _idlePrev: [Object],
        _idleStart: 126326,
        _destroyed: false,
        parser: [Object],
        on: [Function: socketOnWrap],
        _paused: false,
        read: [Function],
        _consuming: true,
        _httpMessage: [Circular],
        [Symbol(asyncId)]: 74,
        [Symbol(bytesRead)]: 0,
        [Symbol(asyncId)]: 75,
        [Symbol(triggerAsyncId)]: 9 },
     _header: null,
     _onPendingData: [Function: bound updateOutgoingData],
     _sent100: false,
     _expect_continue: false,
     req: [Circular],
     locals: {},
     [Symbol(outHeadersKey)]: 
      { 'x-powered-by': [Array],
        'cache-control': [Array],
        pragma: [Array],
        expires: [Array],
        vary: [Array] } },
  body: {} }
2018-04-07T18:02:08.930Z - info: Execution took 11 ms, user function completed successfully
2018-04-07T18:02:16.111Z - info: User function triggered, starting execution
2018-04-07T18:02:16.111Z - error: Request has incorrect Content-Type. 
2018-04-07T18:02:16.123Z - error: Invalid request IncomingMessage {
  _readableState: 
   ReadableState {
     objectMode: false,
     highWaterMark: 16384,
     buffer: BufferList { head: null, tail: null, length: 0 },
     length: 0,
     pipes: null,
     pipesCount: 0,
     flowing: null,
     ended: false,
     endEmitted: false,
     reading: false,
     sync: true,
     needReadable: false,
     emittedReadable: false,
     readableListening: false,
     resumeScheduled: false,
     destroyed: false,
     defaultEncoding: 'utf8',
     awaitDrain: 0,
     readingMore: true,
     decoder: null,
     encoding: null },
  readable: true,
  domain: null,
  _events: {},
  _eventsCount: 0,
  _maxListeners: undefined,
  socket: 
   Socket {
     connecting: false,
     _hadError: false,
     _handle: 
      TCP {
        reading: true,
        owner: [Circular],
        onread: [Function: onread],
        onconnection: null,
        writeQueueSize: 0,
        _consumed: true },
     _parent: null,
     _host: null,
     _readableState: 
      ReadableState {
        objectMode: false,
        highWaterMark: 16384,
        buffer: [Object],
        length: 0,
        pipes: null,
        pipesCount: 0,
        flowing: true,
        ended: false,
        endEmitted: false,
        reading: true,
        sync: false,
        needReadable: true,
        emittedReadable: false,
        readableListening: false,
        resumeScheduled: false,
        destroyed: false,
        defaultEncoding: 'utf8',
        awaitDrain: 0,
        readingMore: false,
        decoder: null,
        encoding: null },
     readable: true,
     domain: null,
     _events: 
      { end: [Array],
        finish: [Function: onSocketFinish],
        _socketEnd: [Function: onSocketEnd],
        drain: [Array],
        timeout: [Function: socketOnTimeout],
        data: [Function: bound socketOnData],
        error: [Function: socketOnError],
        close: [Array],
        resume: [Function: onSocketResume],
        pause: [Function: onSocketPause] },
     _eventsCount: 10,
     _maxListeners: undefined,
     _writableState: 
      WritableState {
        objectMode: false,
        highWaterMark: 16384,
        finalCalled: false,
        needDrain: false,
        ending: false,
        ended: false,
        finished: false,
        destroyed: false,
        decodeStrings: false,
        defaultEncoding: 'utf8',
        length: 0,
        writing: false,
        corked: 0,
        sync: true,
        bufferProcessing: false,
        onwrite: [Function: bound onwrite],
        writecb: null,
        writelen: 0,
        bufferedRequest: null,
        lastBufferedRequest: null,
        pendingcb: 0,
        prefinished: false,
        errorEmitted: false,
        bufferedRequestCount: 0,
        corkedRequestsFree: [Object] },
     writable: true,
     allowHalfOpen: true,
     _bytesDispatched: 0,
     _sockname: null,
     _pendingData: null,
     _pendingEncoding: '',
     server: 
      Server {
        domain: null,
        _events: [Object],
        _eventsCount: 2,
        _maxListeners: undefined,
        _connections: 1,
        _handle: [Object],
        _usingSlaves: false,
        _slaves: [],
        _unref: false,
        allowHalfOpen: true,
        pauseOnConnect: false,
        httpAllowHalfOpen: false,
        timeout: 120000,
        keepAliveTimeout: 5000,
        _pendingResponseData: 0,
        maxHeadersCount: null,
        _connectionKey: '4:127.0.0.1:0',
        [Symbol(asyncId)]: 9 },
     _server: 
      Server {
        domain: null,
        _events: [Object],
        _eventsCount: 2,
        _maxListeners: undefined,
        _connections: 1,
        _handle: [Object],
        _usingSlaves: false,
        _slaves: [],
        _unref: false,
        allowHalfOpen: true,
        pauseOnConnect: false,
        httpAllowHalfOpen: false,
        timeout: 120000,
        keepAliveTimeout: 5000,
        _pendingResponseData: 0,
        maxHeadersCount: null,
        _connectionKey: '4:127.0.0.1:0',
        [Symbol(asyncId)]: 9 },
     _idleTimeout: 120000,
     _idleNext: 
      TimersList {
        _idleNext: [Circular],
        _idlePrev: [Circular],
        _timer: [Object],
        _unrefed: true,
        msecs: 120000,
        nextTick: false },
     _idlePrev: 
      TimersList {
        _idleNext: [Circular],
        _idlePrev: [Circular],
        _timer: [Object],
        _unrefed: true,
        msecs: 120000,
        nextTick: false },
     _idleStart: 133543,
     _destroyed: false,
     parser: 
      HTTPParser {
        '0': [Function: parserOnHeaders],
        '1': [Function: parserOnHeadersComplete],
        '2': [Function: parserOnBody],
        '3': [Function: parserOnMessageComplete],
        '4': [Function: bound onParserExecute],
        _headers: [],
        _url: '',
        _consumed: true,
        socket: [Circular],
        incoming: [Circular],
        outgoing: null,
        maxHeaderPairs: 2000,
        onIncoming: [Function: bound parserOnIncoming] },
     on: [Function: socketOnWrap],
     _paused: false,
     read: [Function],
     _consuming: true,
     _httpMessage: 
      ServerResponse {
        domain: null,
        _events: [Object],
        _eventsCount: 1,
        _maxListeners: undefined,
        output: [],
        outputEncodings: [],
        outputCallbacks: [],
        outputSize: 0,
        writable: true,
        _last: false,
        upgrading: false,
        chunkedEncoding: false,
        shouldKeepAlive: false,
        useChunkedEncodingByDefault: true,
        sendDate: true,
        _removedConnection: false,
        _removedContLen: false,
        _removedTE: false,
        _contentLength: null,
        _hasBody: true,
        _trailer: '',
        finished: false,
        _headerSent: false,
        socket: [Circular],
        connection: [Circular],
        _header: null,
        _onPendingData: [Function: bound updateOutgoingData],
        _sent100: false,
        _expect_continue: false,
        req: [Circular],
        locals: {},
        [Symbol(outHeadersKey)]: [Object] },
     [Symbol(asyncId)]: 94,
     [Symbol(bytesRead)]: 0,
     [Symbol(asyncId)]: 96,
     [Symbol(triggerAsyncId)]: 9 },
  connection: 
   Socket {
     connecting: false,
     _hadError: false,
     _handle: 
      TCP {
        reading: true,
        owner: [Circular],
        onread: [Function: onread],
        onconnection: null,
        writeQueueSize: 0,
        _consumed: true },
     _parent: null,
     _host: null,
     _readableState: 
      ReadableState {
        objectMode: false,
        highWaterMark: 16384,
        buffer: [Object],
        length: 0,
        pipes: null,
        pipesCount: 0,
        flowing: true,
        ended: false,
        endEmitted: false,
        reading: true,
        sync: false,
        needReadable: true,
        emittedReadable: false,
        readableListening: false,
        resumeScheduled: false,
        destroyed: false,
        defaultEncoding: 'utf8',
        awaitDrain: 0,
        readingMore: false,
        decoder: null,
        encoding: null },
     readable: true,
     domain: null,
     _events: 
      { end: [Array],
        finish: [Function: onSocketFinish],
        _socketEnd: [Function: onSocketEnd],
        drain: [Array],
        timeout: [Function: socketOnTimeout],
        data: [Function: bound socketOnData],
        error: [Function: socketOnError],
        close: [Array],
        resume: [Function: onSocketResume],
        pause: [Function: onSocketPause] },
     _eventsCount: 10,
     _maxListeners: undefined,
     _writableState: 
      WritableState {
        objectMode: false,
        highWaterMark: 16384,
        finalCalled: false,
        needDrain: false,
        ending: false,
        ended: false,
        finished: false,
        destroyed: false,
        decodeStrings: false,
        defaultEncoding: 'utf8',
        length: 0,
        writing: false,
        corked: 0,
        sync: true,
        bufferProcessing: false,
        onwrite: [Function: bound onwrite],
        writecb: null,
        writelen: 0,
        bufferedRequest: null,
        lastBufferedRequest: null,
        pendingcb: 0,
        prefinished: false,
        errorEmitted: false,
        bufferedRequestCount: 0,
        corkedRequestsFree: [Object] },
     writable: true,
     allowHalfOpen: true,
     _bytesDispatched: 0,
     _sockname: null,
     _pendingData: null,
     _pendingEncoding: '',
     server: 
      Server {
        domain: null,
        _events: [Object],
        _eventsCount: 2,
        _maxListeners: undefined,
        _connections: 1,
        _handle: [Object],
        _usingSlaves: false,
        _slaves: [],
        _unref: false,
        allowHalfOpen: true,
        pauseOnConnect: false,
        httpAllowHalfOpen: false,
        timeout: 120000,
        keepAliveTimeout: 5000,
        _pendingResponseData: 0,
        maxHeadersCount: null,
        _connectionKey: '4:127.0.0.1:0',
        [Symbol(asyncId)]: 9 },
     _server: 
      Server {
        domain: null,
        _events: [Object],
        _eventsCount: 2,
        _maxListeners: undefined,
        _connections: 1,
        _handle: [Object],
        _usingSlaves: false,
        _slaves: [],
        _unref: false,
        allowHalfOpen: true,
        pauseOnConnect: false,
        httpAllowHalfOpen: false,
        timeout: 120000,
        keepAliveTimeout: 5000,
        _pendingResponseData: 0,
        maxHeadersCount: null,
        _connectionKey: '4:127.0.0.1:0',
        [Symbol(asyncId)]: 9 },
     _idleTimeout: 120000,
     _idleNext: 
      TimersList {
        _idleNext: [Circular],
        _idlePrev: [Circular],
        _timer: [Object],
        _unrefed: true,
        msecs: 120000,
        nextTick: false },
     _idlePrev: 
      TimersList {
        _idleNext: [Circular],
        _idlePrev: [Circular],
        _timer: [Object],
        _unrefed: true,
        msecs: 120000,
        nextTick: false },
     _idleStart: 133543,
     _destroyed: false,
     parser: 
      HTTPParser {
        '0': [Function: parserOnHeaders],
        '1': [Function: parserOnHeadersComplete],
        '2': [Function: parserOnBody],
        '3': [Function: parserOnMessageComplete],
        '4': [Function: bound onParserExecute],
        _headers: [],
        _url: '',
        _consumed: true,
        socket: [Circular],
        incoming: [Circular],
        outgoing: null,
        maxHeaderPairs: 2000,
        onIncoming: [Function: bound parserOnIncoming] },
     on: [Function: socketOnWrap],
     _paused: false,
     read: [Function],
     _consuming: true,
     _httpMessage: 
      ServerResponse {
        domain: null,
        _events: [Object],
        _eventsCount: 1,
        _maxListeners: undefined,
        output: [],
        outputEncodings: [],
        outputCallbacks: [],
        outputSize: 0,
        writable: true,
        _last: false,
        upgrading: false,
        chunkedEncoding: false,
        shouldKeepAlive: false,
        useChunkedEncodingByDefault: true,
        sendDate: true,
        _removedConnection: false,
        _removedContLen: false,
        _removedTE: false,
        _contentLength: null,
        _hasBody: true,
        _trailer: '',
        finished: false,
        _headerSent: false,
        socket: [Circular],
        connection: [Circular],
        _header: null,
        _onPendingData: [Function: bound updateOutgoingData],
        _sent100: false,
        _expect_continue: false,
        req: [Circular],
        locals: {},
        [Symbol(outHeadersKey)]: [Object] },
     [Symbol(asyncId)]: 94,
     [Symbol(bytesRead)]: 0,
     [Symbol(asyncId)]: 96,
     [Symbol(triggerAsyncId)]: 9 },
  httpVersionMajor: 1,
  httpVersionMinor: 1,
  httpVersion: '1.1',
  complete: false,
  headers: 
   { connection: 'close',
     'content-length': '0',
     host: 'localhost:5000' },
  rawHeaders: 
   [ 'connection',
     'close',
     'content-length',
     '0',
     'host',
     'localhost:5000' ],
  trailers: {},
  rawTrailers: [],
  upgrade: false,
  url: '/',
  method: 'POST',
  statusCode: null,
  statusMessage: null,
  client: 
   Socket {
     connecting: false,
     _hadError: false,
     _handle: 
      TCP {
        reading: true,
        owner: [Circular],
        onread: [Function: onread],
        onconnection: null,
        writeQueueSize: 0,
        _consumed: true },
     _parent: null,
     _host: null,
     _readableState: 
      ReadableState {
        objectMode: false,
        highWaterMark: 16384,
        buffer: [Object],
        length: 0,
        pipes: null,
        pipesCount: 0,
        flowing: true,
        ended: false,
        endEmitted: false,
        reading: true,
        sync: false,
        needReadable: true,
        emittedReadable: false,
        readableListening: false,
        resumeScheduled: false,
        destroyed: false,
        defaultEncoding: 'utf8',
        awaitDrain: 0,
        readingMore: false,
        decoder: null,
        encoding: null },
     readable: true,
     domain: null,
     _events: 
      { end: [Array],
        finish: [Function: onSocketFinish],
        _socketEnd: [Function: onSocketEnd],
        drain: [Array],
        timeout: [Function: socketOnTimeout],
        data: [Function: bound socketOnData],
        error: [Function: socketOnError],
        close: [Array],
        resume: [Function: onSocketResume],
        pause: [Function: onSocketPause] },
     _eventsCount: 10,
     _maxListeners: undefined,
     _writableState: 
      WritableState {
        objectMode: false,
        highWaterMark: 16384,
        finalCalled: false,
        needDrain: false,
        ending: false,
        ended: false,
        finished: false,
        destroyed: false,
        decodeStrings: false,
        defaultEncoding: 'utf8',
        length: 0,
        writing: false,
        corked: 0,
        sync: true,
        bufferProcessing: false,
        onwrite: [Function: bound onwrite],
        writecb: null,
        writelen: 0,
        bufferedRequest: null,
        lastBufferedRequest: null,
        pendingcb: 0,
        prefinished: false,
        errorEmitted: false,
        bufferedRequestCount: 0,
        corkedRequestsFree: [Object] },
     writable: true,
     allowHalfOpen: true,
     _bytesDispatched: 0,
     _sockname: null,
     _pendingData: null,
     _pendingEncoding: '',
     server: 
      Server {
        domain: null,
        _events: [Object],
        _eventsCount: 2,
        _maxListeners: undefined,
        _connections: 1,
        _handle: [Object],
        _usingSlaves: false,
        _slaves: [],
        _unref: false,
        allowHalfOpen: true,
        pauseOnConnect: false,
        httpAllowHalfOpen: false,
        timeout: 120000,
        keepAliveTimeout: 5000,
        _pendingResponseData: 0,
        maxHeadersCount: null,
        _connectionKey: '4:127.0.0.1:0',
        [Symbol(asyncId)]: 9 },
     _server: 
      Server {
        domain: null,
        _events: [Object],
        _eventsCount: 2,
        _maxListeners: undefined,
        _connections: 1,
        _handle: [Object],
        _usingSlaves: false,
        _slaves: [],
        _unref: false,
        allowHalfOpen: true,
        pauseOnConnect: false,
        httpAllowHalfOpen: false,
        timeout: 120000,
        keepAliveTimeout: 5000,
        _pendingResponseData: 0,
        maxHeadersCount: null,
        _connectionKey: '4:127.0.0.1:0',
        [Symbol(asyncId)]: 9 },
     _idleTimeout: 120000,
     _idleNext: 
      TimersList {
        _idleNext: [Circular],
        _idlePrev: [Circular],
        _timer: [Object],
        _unrefed: true,
        msecs: 120000,
        nextTick: false },
     _idlePrev: 
      TimersList {
        _idleNext: [Circular],
        _idlePrev: [Circular],
        _timer: [Object],
        _unrefed: true,
        msecs: 120000,
        nextTick: false },
     _idleStart: 133543,
     _destroyed: false,
     parser: 
      HTTPParser {
        '0': [Function: parserOnHeaders],
        '1': [Function: parserOnHeadersComplete],
        '2': [Function: parserOnBody],
        '3': [Function: parserOnMessageComplete],
        '4': [Function: bound onParserExecute],
        _headers: [],
        _url: '',
        _consumed: true,
        socket: [Circular],
        incoming: [Circular],
        outgoing: null,
        maxHeaderPairs: 2000,
        onIncoming: [Function: bound parserOnIncoming] },
     on: [Function: socketOnWrap],
     _paused: false,
     read: [Function],
     _consuming: true,
     _httpMessage: 
      ServerResponse {
        domain: null,
        _events: [Object],
        _eventsCount: 1,
        _maxListeners: undefined,
        output: [],
        outputEncodings: [],
        outputCallbacks: [],
        outputSize: 0,
        writable: true,
        _last: false,
        upgrading: false,
        chunkedEncoding: false,
        shouldKeepAlive: false,
        useChunkedEncodingByDefault: true,
        sendDate: true,
        _removedConnection: false,
        _removedContLen: false,
        _removedTE: false,
        _contentLength: null,
        _hasBody: true,
        _trailer: '',
        finished: false,
        _headerSent: false,
        socket: [Circular],
        connection: [Circular],
        _header: null,
        _onPendingData: [Function: bound updateOutgoingData],
        _sent100: false,
        _expect_continue: false,
        req: [Circular],
        locals: {},
        [Symbol(outHeadersKey)]: [Object] },
     [Symbol(asyncId)]: 94,
     [Symbol(bytesRead)]: 0,
     [Symbol(asyncId)]: 96,
     [Symbol(triggerAsyncId)]: 9 },
  _consuming: false,
  _dumped: false,
  next: [Function: next],
  baseUrl: '',
  originalUrl: '/',
  _parsedUrl: 
   Url {
     protocol: null,
     slashes: null,
     auth: null,
     host: null,
     port: null,
     hostname: null,
     hash: null,
     search: null,
     query: null,
     pathname: '/',
     path: '/',
     href: '/',
     _raw: '/' },
  params: {},
  query: {},
  res: 
   ServerResponse {
     domain: null,
     _events: { finish: [Array] },
     _eventsCount: 1,
     _maxListeners: undefined,
     output: [],
     outputEncodings: [],
     outputCallbacks: [],
     outputSize: 0,
     writable: true,
     _last: false,
     upgrading: false,
     chunkedEncoding: false,
     shouldKeepAlive: false,
     useChunkedEncodingByDefault: true,
     sendDate: true,
     _removedConnection: false,
     _removedContLen: false,
     _removedTE: false,
     _contentLength: null,
     _hasBody: true,
     _trailer: '',
     finished: false,
     _headerSent: false,
     socket: 
      Socket {
        connecting: false,
        _hadError: false,
        _handle: [Object],
        _parent: null,
        _host: null,
        _readableState: [Object],
        readable: true,
        domain: null,
        _events: [Object],
        _eventsCount: 10,
        _maxListeners: undefined,
        _writableState: [Object],
        writable: true,
        allowHalfOpen: true,
        _bytesDispatched: 0,
        _sockname: null,
        _pendingData: null,
        _pendingEncoding: '',
        server: [Object],
        _server: [Object],
        _idleTimeout: 120000,
        _idleNext: [Object],
        _idlePrev: [Object],
        _idleStart: 133543,
        _destroyed: false,
        parser: [Object],
        on: [Function: socketOnWrap],
        _paused: false,
        read: [Function],
        _consuming: true,
        _httpMessage: [Circular],
        [Symbol(asyncId)]: 94,
        [Symbol(bytesRead)]: 0,
        [Symbol(asyncId)]: 96,
        [Symbol(triggerAsyncId)]: 9 },
     connection: 
      Socket {
        connecting: false,
        _hadError: false,
        _handle: [Object],
        _parent: null,
        _host: null,
        _readableState: [Object],
        readable: true,
        domain: null,
        _events: [Object],
        _eventsCount: 10,
        _maxListeners: undefined,
        _writableState: [Object],
        writable: true,
        allowHalfOpen: true,
        _bytesDispatched: 0,
        _sockname: null,
        _pendingData: null,
        _pendingEncoding: '',
        server: [Object],
        _server: [Object],
        _idleTimeout: 120000,
        _idleNext: [Object],
        _idlePrev: [Object],
        _idleStart: 133543,
        _destroyed: false,
        parser: [Object],
        on: [Function: socketOnWrap],
        _paused: false,
        read: [Function],
        _consuming: true,
        _httpMessage: [Circular],
        [Symbol(asyncId)]: 94,
        [Symbol(bytesRead)]: 0,
        [Symbol(asyncId)]: 96,
        [Symbol(triggerAsyncId)]: 9 },
     _header: null,
     _onPendingData: [Function: bound updateOutgoingData],
     _sent100: false,
     _expect_continue: false,
     req: [Circular],
     locals: {},
     [Symbol(outHeadersKey)]: 
      { 'x-powered-by': [Array],
        'cache-control': [Array],
        pragma: [Array],
        expires: [Array],
        vary: [Array] } },
  body: {} }
2018-04-07T18:02:16.125Z - info: Execution took 13 ms, user function completed successfully
2018-04-07T18:02:33.907Z - error: Function worker killed by signal: SIGTERM
2018-04-07T18:02:39.186Z - info: User function triggered, starting execution
2018-04-07T18:02:39.189Z - error: Request has incorrect Content-Type. 
2018-04-07T18:02:39.205Z - error: Invalid request IncomingMessage {
  _readableState: 
   ReadableState {
     objectMode: false,
     highWaterMark: 16384,
     buffer: BufferList { head: null, tail: null, length: 0 },
     length: 0,
     pipes: null,
     pipesCount: 0,
     flowing: null,
     ended: false,
     endEmitted: false,
     reading: false,
     sync: true,
     needReadable: false,
     emittedReadable: false,
     readableListening: false,
     resumeScheduled: false,
     destroyed: false,
     defaultEncoding: 'utf8',
     awaitDrain: 0,
     readingMore: true,
     decoder: null,
     encoding: null },
  readable: true,
  domain: null,
  _events: {},
  _eventsCount: 0,
  _maxListeners: undefined,
  socket: 
   Socket {
     connecting: false,
     _hadError: false,
     _handle: 
      TCP {
        reading: true,
        owner: [Circular],
        onread: [Function: onread],
        onconnection: null,
        writeQueueSize: 0,
        _consumed: true },
     _parent: null,
     _host: null,
     _readableState: 
      ReadableState {
        objectMode: false,
        highWaterMark: 16384,
        buffer: [Object],
        length: 0,
        pipes: null,
        pipesCount: 0,
        flowing: true,
        ended: false,
        endEmitted: false,
        reading: true,
        sync: false,
        needReadable: true,
        emittedReadable: false,
        readableListening: false,
        resumeScheduled: false,
        destroyed: false,
        defaultEncoding: 'utf8',
        awaitDrain: 0,
        readingMore: false,
        decoder: null,
        encoding: null },
     readable: true,
     domain: null,
     _events: 
      { end: [Array],
        finish: [Function: onSocketFinish],
        _socketEnd: [Function: onSocketEnd],
        drain: [Array],
        timeout: [Function: socketOnTimeout],
        data: [Function: bound socketOnData],
        error: [Function: socketOnError],
        close: [Array],
        resume: [Function: onSocketResume],
        pause: [Function: onSocketPause] },
     _eventsCount: 10,
     _maxListeners: undefined,
     _writableState: 
      WritableState {
        objectMode: false,
        highWaterMark: 16384,
        finalCalled: false,
        needDrain: false,
        ending: false,
        ended: false,
        finished: false,
        destroyed: false,
        decodeStrings: false,
        defaultEncoding: 'utf8',
        length: 0,
        writing: false,
        corked: 0,
        sync: true,
        bufferProcessing: false,
        onwrite: [Function: bound onwrite],
        writecb: null,
        writelen: 0,
        bufferedRequest: null,
        lastBufferedRequest: null,
        pendingcb: 0,
        prefinished: false,
        errorEmitted: false,
        bufferedRequestCount: 0,
        corkedRequestsFree: [Object] },
     writable: true,
     allowHalfOpen: true,
     _bytesDispatched: 0,
     _sockname: null,
     _pendingData: null,
     _pendingEncoding: '',
     server: 
      Server {
        domain: null,
        _events: [Object],
        _eventsCount: 2,
        _maxListeners: undefined,
        _connections: 1,
        _handle: [Object],
        _usingSlaves: false,
        _slaves: [],
        _unref: false,
        allowHalfOpen: true,
        pauseOnConnect: false,
        httpAllowHalfOpen: false,
        timeout: 120000,
        keepAliveTimeout: 5000,
        _pendingResponseData: 0,
        maxHeadersCount: null,
        _connectionKey: '4:127.0.0.1:0',
        [Symbol(asyncId)]: 9 },
     _server: 
      Server {
        domain: null,
        _events: [Object],
        _eventsCount: 2,
        _maxListeners: undefined,
        _connections: 1,
        _handle: [Object],
        _usingSlaves: false,
        _slaves: [],
        _unref: false,
        allowHalfOpen: true,
        pauseOnConnect: false,
        httpAllowHalfOpen: false,
        timeout: 120000,
        keepAliveTimeout: 5000,
        _pendingResponseData: 0,
        maxHeadersCount: null,
        _connectionKey: '4:127.0.0.1:0',
        [Symbol(asyncId)]: 9 },
     _idleTimeout: 120000,
     _idleNext: 
      TimersList {
        _idleNext: [Circular],
        _idlePrev: [Circular],
        _timer: [Object],
        _unrefed: true,
        msecs: 120000,
        nextTick: false },
     _idlePrev: 
      TimersList {
        _idleNext: [Circular],
        _idlePrev: [Circular],
        _timer: [Object],
        _unrefed: true,
        msecs: 120000,
        nextTick: false },
     _idleStart: 598,
     _destroyed: false,
     parser: 
      HTTPParser {
        '0': [Function: parserOnHeaders],
        '1': [Function: parserOnHeadersComplete],
        '2': [Function: parserOnBody],
        '3': [Function: parserOnMessageComplete],
        '4': [Function: bound onParserExecute],
        _headers: [],
        _url: '',
        _consumed: true,
        socket: [Circular],
        incoming: [Circular],
        outgoing: null,
        maxHeaderPairs: 2000,
        onIncoming: [Function: bound parserOnIncoming] },
     on: [Function: socketOnWrap],
     _paused: false,
     read: [Function],
     _consuming: true,
     _httpMessage: 
      ServerResponse {
        domain: null,
        _events: [Object],
        _eventsCount: 1,
        _maxListeners: undefined,
        output: [],
        outputEncodings: [],
        outputCallbacks: [],
        outputSize: 0,
        writable: true,
        _last: false,
        upgrading: false,
        chunkedEncoding: false,
        shouldKeepAlive: false,
        useChunkedEncodingByDefault: true,
        sendDate: true,
        _removedConnection: false,
        _removedContLen: false,
        _removedTE: false,
        _contentLength: null,
        _hasBody: true,
        _trailer: '',
        finished: false,
        _headerSent: false,
        socket: [Circular],
        connection: [Circular],
        _header: null,
        _onPendingData: [Function: bound updateOutgoingData],
        _sent100: false,
        _expect_continue: false,
        req: [Circular],
        locals: {},
        [Symbol(outHeadersKey)]: [Object] },
     [Symbol(asyncId)]: 11,
     [Symbol(bytesRead)]: 0,
     [Symbol(asyncId)]: 13,
     [Symbol(triggerAsyncId)]: 9 },
  connection: 
   Socket {
     connecting: false,
     _hadError: false,
     _handle: 
      TCP {
        reading: true,
        owner: [Circular],
        onread: [Function: onread],
        onconnection: null,
        writeQueueSize: 0,
        _consumed: true },
     _parent: null,
     _host: null,
     _readableState: 
      ReadableState {
        objectMode: false,
        highWaterMark: 16384,
        buffer: [Object],
        length: 0,
        pipes: null,
        pipesCount: 0,
        flowing: true,
        ended: false,
        endEmitted: false,
        reading: true,
        sync: false,
        needReadable: true,
        emittedReadable: false,
        readableListening: false,
        resumeScheduled: false,
        destroyed: false,
        defaultEncoding: 'utf8',
        awaitDrain: 0,
        readingMore: false,
        decoder: null,
        encoding: null },
     readable: true,
     domain: null,
     _events: 
      { end: [Array],
        finish: [Function: onSocketFinish],
        _socketEnd: [Function: onSocketEnd],
        drain: [Array],
        timeout: [Function: socketOnTimeout],
        data: [Function: bound socketOnData],
        error: [Function: socketOnError],
        close: [Array],
        resume: [Function: onSocketResume],
        pause: [Function: onSocketPause] },
     _eventsCount: 10,
     _maxListeners: undefined,
     _writableState: 
      WritableState {
        objectMode: false,
        highWaterMark: 16384,
        finalCalled: false,
        needDrain: false,
        ending: false,
        ended: false,
        finished: false,
        destroyed: false,
        decodeStrings: false,
        defaultEncoding: 'utf8',
        length: 0,
        writing: false,
        corked: 0,
        sync: true,
        bufferProcessing: false,
        onwrite: [Function: bound onwrite],
        writecb: null,
        writelen: 0,
        bufferedRequest: null,
        lastBufferedRequest: null,
        pendingcb: 0,
        prefinished: false,
        errorEmitted: false,
        bufferedRequestCount: 0,
        corkedRequestsFree: [Object] },
     writable: true,
     allowHalfOpen: true,
     _bytesDispatched: 0,
     _sockname: null,
     _pendingData: null,
     _pendingEncoding: '',
     server: 
      Server {
        domain: null,
        _events: [Object],
        _eventsCount: 2,
        _maxListeners: undefined,
        _connections: 1,
        _handle: [Object],
        _usingSlaves: false,
        _slaves: [],
        _unref: false,
        allowHalfOpen: true,
        pauseOnConnect: false,
        httpAllowHalfOpen: false,
        timeout: 120000,
        keepAliveTimeout: 5000,
        _pendingResponseData: 0,
        maxHeadersCount: null,
        _connectionKey: '4:127.0.0.1:0',
        [Symbol(asyncId)]: 9 },
     _server: 
      Server {
        domain: null,
        _events: [Object],
        _eventsCount: 2,
        _maxListeners: undefined,
        _connections: 1,
        _handle: [Object],
        _usingSlaves: false,
        _slaves: [],
        _unref: false,
        allowHalfOpen: true,
        pauseOnConnect: false,
        httpAllowHalfOpen: false,
        timeout: 120000,
        keepAliveTimeout: 5000,
        _pendingResponseData: 0,
        maxHeadersCount: null,
        _connectionKey: '4:127.0.0.1:0',
        [Symbol(asyncId)]: 9 },
     _idleTimeout: 120000,
     _idleNext: 
      TimersList {
        _idleNext: [Circular],
        _idlePrev: [Circular],
        _timer: [Object],
        _unrefed: true,
        msecs: 120000,
        nextTick: false },
     _idlePrev: 
      TimersList {
        _idleNext: [Circular],
        _idlePrev: [Circular],
        _timer: [Object],
        _unrefed: true,
        msecs: 120000,
        nextTick: false },
     _idleStart: 598,
     _destroyed: false,
     parser: 
      HTTPParser {
        '0': [Function: parserOnHeaders],
        '1': [Function: parserOnHeadersComplete],
        '2': [Function: parserOnBody],
        '3': [Function: parserOnMessageComplete],
        '4': [Function: bound onParserExecute],
        _headers: [],
        _url: '',
        _consumed: true,
        socket: [Circular],
        incoming: [Circular],
        outgoing: null,
        maxHeaderPairs: 2000,
        onIncoming: [Function: bound parserOnIncoming] },
     on: [Function: socketOnWrap],
     _paused: false,
     read: [Function],
     _consuming: true,
     _httpMessage: 
      ServerResponse {
        domain: null,
        _events: [Object],
        _eventsCount: 1,
        _maxListeners: undefined,
        output: [],
        outputEncodings: [],
        outputCallbacks: [],
        outputSize: 0,
        writable: true,
        _last: false,
        upgrading: false,
        chunkedEncoding: false,
        shouldKeepAlive: false,
        useChunkedEncodingByDefault: true,
        sendDate: true,
        _removedConnection: false,
        _removedContLen: false,
        _removedTE: false,
        _contentLength: null,
        _hasBody: true,
        _trailer: '',
        finished: false,
        _headerSent: false,
        socket: [Circular],
        connection: [Circular],
        _header: null,
        _onPendingData: [Function: bound updateOutgoingData],
        _sent100: false,
        _expect_continue: false,
        req: [Circular],
        locals: {},
        [Symbol(outHeadersKey)]: [Object] },
     [Symbol(asyncId)]: 11,
     [Symbol(bytesRead)]: 0,
     [Symbol(asyncId)]: 13,
     [Symbol(triggerAsyncId)]: 9 },
  httpVersionMajor: 1,
  httpVersionMinor: 1,
  httpVersion: '1.1',
  complete: false,
  headers: 
   { connection: 'close',
     'content-length': '0',
     host: 'localhost:5000' },
  rawHeaders: 
   [ 'connection',
     'close',
     'content-length',
     '0',
     'host',
     'localhost:5000' ],
  trailers: {},
  rawTrailers: [],
  upgrade: false,
  url: '/',
  method: 'POST',
  statusCode: null,
  statusMessage: null,
  client: 
   Socket {
     connecting: false,
     _hadError: false,
     _handle: 
      TCP {
        reading: true,
        owner: [Circular],
        onread: [Function: onread],
        onconnection: null,
        writeQueueSize: 0,
        _consumed: true },
     _parent: null,
     _host: null,
     _readableState: 
      ReadableState {
        objectMode: false,
        highWaterMark: 16384,
        buffer: [Object],
        length: 0,
        pipes: null,
        pipesCount: 0,
        flowing: true,
        ended: false,
        endEmitted: false,
        reading: true,
        sync: false,
        needReadable: true,
        emittedReadable: false,
        readableListening: false,
        resumeScheduled: false,
        destroyed: false,
        defaultEncoding: 'utf8',
        awaitDrain: 0,
        readingMore: false,
        decoder: null,
        encoding: null },
     readable: true,
     domain: null,
     _events: 
      { end: [Array],
        finish: [Function: onSocketFinish],
        _socketEnd: [Function: onSocketEnd],
        drain: [Array],
        timeout: [Function: socketOnTimeout],
        data: [Function: bound socketOnData],
        error: [Function: socketOnError],
        close: [Array],
        resume: [Function: onSocketResume],
        pause: [Function: onSocketPause] },
     _eventsCount: 10,
     _maxListeners: undefined,
     _writableState: 
      WritableState {
        objectMode: false,
        highWaterMark: 16384,
        finalCalled: false,
        needDrain: false,
        ending: false,
        ended: false,
        finished: false,
        destroyed: false,
        decodeStrings: false,
        defaultEncoding: 'utf8',
        length: 0,
        writing: false,
        corked: 0,
        sync: true,
        bufferProcessing: false,
        onwrite: [Function: bound onwrite],
        writecb: null,
        writelen: 0,
        bufferedRequest: null,
        lastBufferedRequest: null,
        pendingcb: 0,
        prefinished: false,
        errorEmitted: false,
        bufferedRequestCount: 0,
        corkedRequestsFree: [Object] },
     writable: true,
     allowHalfOpen: true,
     _bytesDispatched: 0,
     _sockname: null,
     _pendingData: null,
     _pendingEncoding: '',
     server: 
      Server {
        domain: null,
        _events: [Object],
        _eventsCount: 2,
        _maxListeners: undefined,
        _connections: 1,
        _handle: [Object],
        _usingSlaves: false,
        _slaves: [],
        _unref: false,
        allowHalfOpen: true,
        pauseOnConnect: false,
        httpAllowHalfOpen: false,
        timeout: 120000,
        keepAliveTimeout: 5000,
        _pendingResponseData: 0,
        maxHeadersCount: null,
        _connectionKey: '4:127.0.0.1:0',
        [Symbol(asyncId)]: 9 },
     _server: 
      Server {
        domain: null,
        _events: [Object],
        _eventsCount: 2,
        _maxListeners: undefined,
        _connections: 1,
        _handle: [Object],
        _usingSlaves: false,
        _slaves: [],
        _unref: false,
        allowHalfOpen: true,
        pauseOnConnect: false,
        httpAllowHalfOpen: false,
        timeout: 120000,
        keepAliveTimeout: 5000,
        _pendingResponseData: 0,
        maxHeadersCount: null,
        _connectionKey: '4:127.0.0.1:0',
        [Symbol(asyncId)]: 9 },
     _idleTimeout: 120000,
     _idleNext: 
      TimersList {
        _idleNext: [Circular],
        _idlePrev: [Circular],
        _timer: [Object],
        _unrefed: true,
        msecs: 120000,
        nextTick: false },
     _idlePrev: 
      TimersList {
        _idleNext: [Circular],
        _idlePrev: [Circular],
        _timer: [Object],
        _unrefed: true,
        msecs: 120000,
        nextTick: false },
     _idleStart: 598,
     _destroyed: false,
     parser: 
      HTTPParser {
        '0': [Function: parserOnHeaders],
        '1': [Function: parserOnHeadersComplete],
        '2': [Function: parserOnBody],
        '3': [Function: parserOnMessageComplete],
        '4': [Function: bound onParserExecute],
        _headers: [],
        _url: '',
        _consumed: true,
        socket: [Circular],
        incoming: [Circular],
        outgoing: null,
        maxHeaderPairs: 2000,
        onIncoming: [Function: bound parserOnIncoming] },
     on: [Function: socketOnWrap],
     _paused: false,
     read: [Function],
     _consuming: true,
     _httpMessage: 
      ServerResponse {
        domain: null,
        _events: [Object],
        _eventsCount: 1,
        _maxListeners: undefined,
        output: [],
        outputEncodings: [],
        outputCallbacks: [],
        outputSize: 0,
        writable: true,
        _last: false,
        upgrading: false,
        chunkedEncoding: false,
        shouldKeepAlive: false,
        useChunkedEncodingByDefault: true,
        sendDate: true,
        _removedConnection: false,
        _removedContLen: false,
        _removedTE: false,
        _contentLength: null,
        _hasBody: true,
        _trailer: '',
        finished: false,
        _headerSent: false,
        socket: [Circular],
        connection: [Circular],
        _header: null,
        _onPendingData: [Function: bound updateOutgoingData],
        _sent100: false,
        _expect_continue: false,
        req: [Circular],
        locals: {},
        [Symbol(outHeadersKey)]: [Object] },
     [Symbol(asyncId)]: 11,
     [Symbol(bytesRead)]: 0,
     [Symbol(asyncId)]: 13,
     [Symbol(triggerAsyncId)]: 9 },
  _consuming: false,
  _dumped: false,
  next: [Function: next],
  baseUrl: '',
  originalUrl: '/',
  _parsedUrl: 
   Url {
     protocol: null,
     slashes: null,
     auth: null,
     host: null,
     port: null,
     hostname: null,
     hash: null,
     search: null,
     query: null,
     pathname: '/',
     path: '/',
     href: '/',
     _raw: '/' },
  params: {},
  query: {},
  res: 
   ServerResponse {
     domain: null,
     _events: { finish: [Array] },
     _eventsCount: 1,
     _maxListeners: undefined,
     output: [],
     outputEncodings: [],
     outputCallbacks: [],
     outputSize: 0,
     writable: true,
     _last: false,
     upgrading: false,
     chunkedEncoding: false,
     shouldKeepAlive: false,
     useChunkedEncodingByDefault: true,
     sendDate: true,
     _removedConnection: false,
     _removedContLen: false,
     _removedTE: false,
     _contentLength: null,
     _hasBody: true,
     _trailer: '',
     finished: false,
     _headerSent: false,
     socket: 
      Socket {
        connecting: false,
        _hadError: false,
        _handle: [Object],
        _parent: null,
        _host: null,
        _readableState: [Object],
        readable: true,
        domain: null,
        _events: [Object],
        _eventsCount: 10,
        _maxListeners: undefined,
        _writableState: [Object],
        writable: true,
        allowHalfOpen: true,
        _bytesDispatched: 0,
        _sockname: null,
        _pendingData: null,
        _pendingEncoding: '',
        server: [Object],
        _server: [Object],
        _idleTimeout: 120000,
        _idleNext: [Object],
        _idlePrev: [Object],
        _idleStart: 598,
        _destroyed: false,
        parser: [Object],
        on: [Function: socketOnWrap],
        _paused: false,
        read: [Function],
        _consuming: true,
        _httpMessage: [Circular],
        [Symbol(asyncId)]: 11,
        [Symbol(bytesRead)]: 0,
        [Symbol(asyncId)]: 13,
        [Symbol(triggerAsyncId)]: 9 },
     connection: 
      Socket {
        connecting: false,
        _hadError: false,
        _handle: [Object],
        _parent: null,
        _host: null,
        _readableState: [Object],
        readable: true,
        domain: null,
        _events: [Object],
        _eventsCount: 10,
        _maxListeners: undefined,
        _writableState: [Object],
        writable: true,
        allowHalfOpen: true,
        _bytesDispatched: 0,
        _sockname: null,
        _pendingData: null,
        _pendingEncoding: '',
        server: [Object],
        _server: [Object],
        _idleTimeout: 120000,
        _idleNext: [Object],
        _idlePrev: [Object],
        _idleStart: 598,
        _destroyed: false,
        parser: [Object],
        on: [Function: socketOnWrap],
        _paused: false,
        read: [Function],
        _consuming: true,
        _httpMessage: [Circular],
        [Symbol(asyncId)]: 11,
        [Symbol(bytesRead)]: 0,
        [Symbol(asyncId)]: 13,
        [Symbol(triggerAsyncId)]: 9 },
     _header: null,
     _onPendingData: [Function: bound updateOutgoingData],
     _sent100: false,
     _expect_continue: false,
     req: [Circular],
     locals: {},
     [Symbol(outHeadersKey)]: 
      { 'x-powered-by': [Array],
        'cache-control': [Array],
        pragma: [Array],
        expires: [Array],
        vary: [Array] } },
  body: {} }
2018-04-07T18:02:39.214Z - info: Execution took 30 ms, user function completed successfully
2018-04-07T18:02:46.208Z - info: User function triggered, starting execution
2018-04-07T18:02:46.208Z - error: Request has invalid method. GET
2018-04-07T18:02:46.221Z - error: Invalid request IncomingMessage {
  _readableState: 
   ReadableState {
     objectMode: false,
     highWaterMark: 16384,
     buffer: BufferList { head: null, tail: null, length: 0 },
     length: 0,
     pipes: null,
     pipesCount: 0,
     flowing: null,
     ended: false,
     endEmitted: false,
     reading: false,
     sync: true,
     needReadable: false,
     emittedReadable: false,
     readableListening: false,
     resumeScheduled: false,
     destroyed: false,
     defaultEncoding: 'utf8',
     awaitDrain: 0,
     readingMore: true,
     decoder: null,
     encoding: null },
  readable: true,
  domain: null,
  _events: {},
  _eventsCount: 0,
  _maxListeners: undefined,
  socket: 
   Socket {
     connecting: false,
     _hadError: false,
     _handle: 
      TCP {
        reading: true,
        owner: [Circular],
        onread: [Function: onread],
        onconnection: null,
        writeQueueSize: 0,
        _consumed: true },
     _parent: null,
     _host: null,
     _readableState: 
      ReadableState {
        objectMode: false,
        highWaterMark: 16384,
        buffer: [Object],
        length: 0,
        pipes: null,
        pipesCount: 0,
        flowing: true,
        ended: false,
        endEmitted: false,
        reading: true,
        sync: false,
        needReadable: true,
        emittedReadable: false,
        readableListening: false,
        resumeScheduled: false,
        destroyed: false,
        defaultEncoding: 'utf8',
        awaitDrain: 0,
        readingMore: false,
        decoder: null,
        encoding: null },
     readable: true,
     domain: null,
     _events: 
      { end: [Array],
        finish: [Function: onSocketFinish],
        _socketEnd: [Function: onSocketEnd],
        drain: [Array],
        timeout: [Function: socketOnTimeout],
        data: [Function: bound socketOnData],
        error: [Function: socketOnError],
        close: [Array],
        resume: [Function: onSocketResume],
        pause: [Function: onSocketPause] },
     _eventsCount: 10,
     _maxListeners: undefined,
     _writableState: 
      WritableState {
        objectMode: false,
        highWaterMark: 16384,
        finalCalled: false,
        needDrain: false,
        ending: false,
        ended: false,
        finished: false,
        destroyed: false,
        decodeStrings: false,
        defaultEncoding: 'utf8',
        length: 0,
        writing: false,
        corked: 0,
        sync: true,
        bufferProcessing: false,
        onwrite: [Function: bound onwrite],
        writecb: null,
        writelen: 0,
        bufferedRequest: null,
        lastBufferedRequest: null,
        pendingcb: 0,
        prefinished: false,
        errorEmitted: false,
        bufferedRequestCount: 0,
        corkedRequestsFree: [Object] },
     writable: true,
     allowHalfOpen: true,
     _bytesDispatched: 0,
     _sockname: null,
     _pendingData: null,
     _pendingEncoding: '',
     server: 
      Server {
        domain: null,
        _events: [Object],
        _eventsCount: 2,
        _maxListeners: undefined,
        _connections: 1,
        _handle: [Object],
        _usingSlaves: false,
        _slaves: [],
        _unref: false,
        allowHalfOpen: true,
        pauseOnConnect: false,
        httpAllowHalfOpen: false,
        timeout: 120000,
        keepAliveTimeout: 5000,
        _pendingResponseData: 0,
        maxHeadersCount: null,
        _connectionKey: '4:127.0.0.1:0',
        [Symbol(asyncId)]: 9 },
     _server: 
      Server {
        domain: null,
        _events: [Object],
        _eventsCount: 2,
        _maxListeners: undefined,
        _connections: 1,
        _handle: [Object],
        _usingSlaves: false,
        _slaves: [],
        _unref: false,
        allowHalfOpen: true,
        pauseOnConnect: false,
        httpAllowHalfOpen: false,
        timeout: 120000,
        keepAliveTimeout: 5000,
        _pendingResponseData: 0,
        maxHeadersCount: null,
        _connectionKey: '4:127.0.0.1:0',
        [Symbol(asyncId)]: 9 },
     _idleTimeout: 120000,
     _idleNext: 
      TimersList {
        _idleNext: [Circular],
        _idlePrev: [Circular],
        _timer: [Object],
        _unrefed: true,
        msecs: 120000,
        nextTick: false },
     _idlePrev: 
      TimersList {
        _idleNext: [Circular],
        _idlePrev: [Circular],
        _timer: [Object],
        _unrefed: true,
        msecs: 120000,
        nextTick: false },
     _idleStart: 7626,
     _destroyed: false,
     parser: 
      HTTPParser {
        '0': [Function: parserOnHeaders],
        '1': [Function: parserOnHeadersComplete],
        '2': [Function: parserOnBody],
        '3': [Function: parserOnMessageComplete],
        '4': [Function: bound onParserExecute],
        _headers: [],
        _url: '',
        _consumed: true,
        socket: [Circular],
        incoming: [Circular],
        outgoing: null,
        maxHeaderPairs: 2000,
        onIncoming: [Function: bound parserOnIncoming] },
     on: [Function: socketOnWrap],
     _paused: false,
     read: [Function],
     _consuming: true,
     _httpMessage: 
      ServerResponse {
        domain: null,
        _events: [Object],
        _eventsCount: 1,
        _maxListeners: undefined,
        output: [],
        outputEncodings: [],
        outputCallbacks: [],
        outputSize: 0,
        writable: true,
        _last: false,
        upgrading: false,
        chunkedEncoding: false,
        shouldKeepAlive: false,
        useChunkedEncodingByDefault: true,
        sendDate: true,
        _removedConnection: false,
        _removedContLen: false,
        _removedTE: false,
        _contentLength: null,
        _hasBody: true,
        _trailer: '',
        finished: false,
        _headerSent: false,
        socket: [Circular],
        connection: [Circular],
        _header: null,
        _onPendingData: [Function: bound updateOutgoingData],
        _sent100: false,
        _expect_continue: false,
        req: [Circular],
        locals: {},
        [Symbol(outHeadersKey)]: [Object] },
     [Symbol(asyncId)]: 34,
     [Symbol(bytesRead)]: 0,
     [Symbol(asyncId)]: 35,
     [Symbol(triggerAsyncId)]: 9 },
  connection: 
   Socket {
     connecting: false,
     _hadError: false,
     _handle: 
      TCP {
        reading: true,
        owner: [Circular],
        onread: [Function: onread],
        onconnection: null,
        writeQueueSize: 0,
        _consumed: true },
     _parent: null,
     _host: null,
     _readableState: 
      ReadableState {
        objectMode: false,
        highWaterMark: 16384,
        buffer: [Object],
        length: 0,
        pipes: null,
        pipesCount: 0,
        flowing: true,
        ended: false,
        endEmitted: false,
        reading: true,
        sync: false,
        needReadable: true,
        emittedReadable: false,
        readableListening: false,
        resumeScheduled: false,
        destroyed: false,
        defaultEncoding: 'utf8',
        awaitDrain: 0,
        readingMore: false,
        decoder: null,
        encoding: null },
     readable: true,
     domain: null,
     _events: 
      { end: [Array],
        finish: [Function: onSocketFinish],
        _socketEnd: [Function: onSocketEnd],
        drain: [Array],
        timeout: [Function: socketOnTimeout],
        data: [Function: bound socketOnData],
        error: [Function: socketOnError],
        close: [Array],
        resume: [Function: onSocketResume],
        pause: [Function: onSocketPause] },
     _eventsCount: 10,
     _maxListeners: undefined,
     _writableState: 
      WritableState {
        objectMode: false,
        highWaterMark: 16384,
        finalCalled: false,
        needDrain: false,
        ending: false,
        ended: false,
        finished: false,
        destroyed: false,
        decodeStrings: false,
        defaultEncoding: 'utf8',
        length: 0,
        writing: false,
        corked: 0,
        sync: true,
        bufferProcessing: false,
        onwrite: [Function: bound onwrite],
        writecb: null,
        writelen: 0,
        bufferedRequest: null,
        lastBufferedRequest: null,
        pendingcb: 0,
        prefinished: false,
        errorEmitted: false,
        bufferedRequestCount: 0,
        corkedRequestsFree: [Object] },
     writable: true,
     allowHalfOpen: true,
     _bytesDispatched: 0,
     _sockname: null,
     _pendingData: null,
     _pendingEncoding: '',
     server: 
      Server {
        domain: null,
        _events: [Object],
        _eventsCount: 2,
        _maxListeners: undefined,
        _connections: 1,
        _handle: [Object],
        _usingSlaves: false,
        _slaves: [],
        _unref: false,
        allowHalfOpen: true,
        pauseOnConnect: false,
        httpAllowHalfOpen: false,
        timeout: 120000,
        keepAliveTimeout: 5000,
        _pendingResponseData: 0,
        maxHeadersCount: null,
        _connectionKey: '4:127.0.0.1:0',
        [Symbol(asyncId)]: 9 },
     _server: 
      Server {
        domain: null,
        _events: [Object],
        _eventsCount: 2,
        _maxListeners: undefined,
        _connections: 1,
        _handle: [Object],
        _usingSlaves: false,
        _slaves: [],
        _unref: false,
        allowHalfOpen: true,
        pauseOnConnect: false,
        httpAllowHalfOpen: false,
        timeout: 120000,
        keepAliveTimeout: 5000,
        _pendingResponseData: 0,
        maxHeadersCount: null,
        _connectionKey: '4:127.0.0.1:0',
        [Symbol(asyncId)]: 9 },
     _idleTimeout: 120000,
     _idleNext: 
      TimersList {
        _idleNext: [Circular],
        _idlePrev: [Circular],
        _timer: [Object],
        _unrefed: true,
        msecs: 120000,
        nextTick: false },
     _idlePrev: 
      TimersList {
        _idleNext: [Circular],
        _idlePrev: [Circular],
        _timer: [Object],
        _unrefed: true,
        msecs: 120000,
        nextTick: false },
     _idleStart: 7626,
     _destroyed: false,
     parser: 
      HTTPParser {
        '0': [Function: parserOnHeaders],
        '1': [Function: parserOnHeadersComplete],
        '2': [Function: parserOnBody],
        '3': [Function: parserOnMessageComplete],
        '4': [Function: bound onParserExecute],
        _headers: [],
        _url: '',
        _consumed: true,
        socket: [Circular],
        incoming: [Circular],
        outgoing: null,
        maxHeaderPairs: 2000,
        onIncoming: [Function: bound parserOnIncoming] },
     on: [Function: socketOnWrap],
     _paused: false,
     read: [Function],
     _consuming: true,
     _httpMessage: 
      ServerResponse {
        domain: null,
        _events: [Object],
        _eventsCount: 1,
        _maxListeners: undefined,
        output: [],
        outputEncodings: [],
        outputCallbacks: [],
        outputSize: 0,
        writable: true,
        _last: false,
        upgrading: false,
        chunkedEncoding: false,
        shouldKeepAlive: false,
        useChunkedEncodingByDefault: true,
        sendDate: true,
        _removedConnection: false,
        _removedContLen: false,
        _removedTE: false,
        _contentLength: null,
        _hasBody: true,
        _trailer: '',
        finished: false,
        _headerSent: false,
        socket: [Circular],
        connection: [Circular],
        _header: null,
        _onPendingData: [Function: bound updateOutgoingData],
        _sent100: false,
        _expect_continue: false,
        req: [Circular],
        locals: {},
        [Symbol(outHeadersKey)]: [Object] },
     [Symbol(asyncId)]: 34,
     [Symbol(bytesRead)]: 0,
     [Symbol(asyncId)]: 35,
     [Symbol(triggerAsyncId)]: 9 },
  httpVersionMajor: 1,
  httpVersionMinor: 1,
  httpVersion: '1.1',
  complete: false,
  headers: { connection: 'close', host: 'localhost:5000' },
  rawHeaders: [ 'connection', 'close', 'host', 'localhost:5000' ],
  trailers: {},
  rawTrailers: [],
  upgrade: false,
  url: '/',
  method: 'GET',
  statusCode: null,
  statusMessage: null,
  client: 
   Socket {
     connecting: false,
     _hadError: false,
     _handle: 
      TCP {
        reading: true,
        owner: [Circular],
        onread: [Function: onread],
        onconnection: null,
        writeQueueSize: 0,
        _consumed: true },
     _parent: null,
     _host: null,
     _readableState: 
      ReadableState {
        objectMode: false,
        highWaterMark: 16384,
        buffer: [Object],
        length: 0,
        pipes: null,
        pipesCount: 0,
        flowing: true,
        ended: false,
        endEmitted: false,
        reading: true,
        sync: false,
        needReadable: true,
        emittedReadable: false,
        readableListening: false,
        resumeScheduled: false,
        destroyed: false,
        defaultEncoding: 'utf8',
        awaitDrain: 0,
        readingMore: false,
        decoder: null,
        encoding: null },
     readable: true,
     domain: null,
     _events: 
      { end: [Array],
        finish: [Function: onSocketFinish],
        _socketEnd: [Function: onSocketEnd],
        drain: [Array],
        timeout: [Function: socketOnTimeout],
        data: [Function: bound socketOnData],
        error: [Function: socketOnError],
        close: [Array],
        resume: [Function: onSocketResume],
        pause: [Function: onSocketPause] },
     _eventsCount: 10,
     _maxListeners: undefined,
     _writableState: 
      WritableState {
        objectMode: false,
        highWaterMark: 16384,
        finalCalled: false,
        needDrain: false,
        ending: false,
        ended: false,
        finished: false,
        destroyed: false,
        decodeStrings: false,
        defaultEncoding: 'utf8',
        length: 0,
        writing: false,
        corked: 0,
        sync: true,
        bufferProcessing: false,
        onwrite: [Function: bound onwrite],
        writecb: null,
        writelen: 0,
        bufferedRequest: null,
        lastBufferedRequest: null,
        pendingcb: 0,
        prefinished: false,
        errorEmitted: false,
        bufferedRequestCount: 0,
        corkedRequestsFree: [Object] },
     writable: true,
     allowHalfOpen: true,
     _bytesDispatched: 0,
     _sockname: null,
     _pendingData: null,
     _pendingEncoding: '',
     server: 
      Server {
        domain: null,
        _events: [Object],
        _eventsCount: 2,
        _maxListeners: undefined,
        _connections: 1,
        _handle: [Object],
        _usingSlaves: false,
        _slaves: [],
        _unref: false,
        allowHalfOpen: true,
        pauseOnConnect: false,
        httpAllowHalfOpen: false,
        timeout: 120000,
        keepAliveTimeout: 5000,
        _pendingResponseData: 0,
        maxHeadersCount: null,
        _connectionKey: '4:127.0.0.1:0',
        [Symbol(asyncId)]: 9 },
     _server: 
      Server {
        domain: null,
        _events: [Object],
        _eventsCount: 2,
        _maxListeners: undefined,
        _connections: 1,
        _handle: [Object],
        _usingSlaves: false,
        _slaves: [],
        _unref: false,
        allowHalfOpen: true,
        pauseOnConnect: false,
        httpAllowHalfOpen: false,
        timeout: 120000,
        keepAliveTimeout: 5000,
        _pendingResponseData: 0,
        maxHeadersCount: null,
        _connectionKey: '4:127.0.0.1:0',
        [Symbol(asyncId)]: 9 },
     _idleTimeout: 120000,
     _idleNext: 
      TimersList {
        _idleNext: [Circular],
        _idlePrev: [Circular],
        _timer: [Object],
        _unrefed: true,
        msecs: 120000,
        nextTick: false },
     _idlePrev: 
      TimersList {
        _idleNext: [Circular],
        _idlePrev: [Circular],
        _timer: [Object],
        _unrefed: true,
        msecs: 120000,
        nextTick: false },
     _idleStart: 7626,
     _destroyed: false,
     parser: 
      HTTPParser {
        '0': [Function: parserOnHeaders],
        '1': [Function: parserOnHeadersComplete],
        '2': [Function: parserOnBody],
        '3': [Function: parserOnMessageComplete],
        '4': [Function: bound onParserExecute],
        _headers: [],
        _url: '',
        _consumed: true,
        socket: [Circular],
        incoming: [Circular],
        outgoing: null,
        maxHeaderPairs: 2000,
        onIncoming: [Function: bound parserOnIncoming] },
     on: [Function: socketOnWrap],
     _paused: false,
     read: [Function],
     _consuming: true,
     _httpMessage: 
      ServerResponse {
        domain: null,
        _events: [Object],
        _eventsCount: 1,
        _maxListeners: undefined,
        output: [],
        outputEncodings: [],
        outputCallbacks: [],
        outputSize: 0,
        writable: true,
        _last: false,
        upgrading: false,
        chunkedEncoding: false,
        shouldKeepAlive: false,
        useChunkedEncodingByDefault: true,
        sendDate: true,
        _removedConnection: false,
        _removedContLen: false,
        _removedTE: false,
        _contentLength: null,
        _hasBody: true,
        _trailer: '',
        finished: false,
        _headerSent: false,
        socket: [Circular],
        connection: [Circular],
        _header: null,
        _onPendingData: [Function: bound updateOutgoingData],
        _sent100: false,
        _expect_continue: false,
        req: [Circular],
        locals: {},
        [Symbol(outHeadersKey)]: [Object] },
     [Symbol(asyncId)]: 34,
     [Symbol(bytesRead)]: 0,
     [Symbol(asyncId)]: 35,
     [Symbol(triggerAsyncId)]: 9 },
  _consuming: false,
  _dumped: false,
  next: [Function: next],
  baseUrl: '',
  originalUrl: '/',
  _parsedUrl: 
   Url {
     protocol: null,
     slashes: null,
     auth: null,
     host: null,
     port: null,
     hostname: null,
     hash: null,
     search: null,
     query: null,
     pathname: '/',
     path: '/',
     href: '/',
     _raw: '/' },
  params: {},
  query: {},
  res: 
   ServerResponse {
     domain: null,
     _events: { finish: [Array] },
     _eventsCount: 1,
     _maxListeners: undefined,
     output: [],
     outputEncodings: [],
     outputCallbacks: [],
     outputSize: 0,
     writable: true,
     _last: false,
     upgrading: false,
     chunkedEncoding: false,
     shouldKeepAlive: false,
     useChunkedEncodingByDefault: true,
     sendDate: true,
     _removedConnection: false,
     _removedContLen: false,
     _removedTE: false,
     _contentLength: null,
     _hasBody: true,
     _trailer: '',
     finished: false,
     _headerSent: false,
     socket: 
      Socket {
        connecting: false,
        _hadError: false,
        _handle: [Object],
        _parent: null,
        _host: null,
        _readableState: [Object],
        readable: true,
        domain: null,
        _events: [Object],
        _eventsCount: 10,
        _maxListeners: undefined,
        _writableState: [Object],
        writable: true,
        allowHalfOpen: true,
        _bytesDispatched: 0,
        _sockname: null,
        _pendingData: null,
        _pendingEncoding: '',
        server: [Object],
        _server: [Object],
        _idleTimeout: 120000,
        _idleNext: [Object],
        _idlePrev: [Object],
        _idleStart: 7626,
        _destroyed: false,
        parser: [Object],
        on: [Function: socketOnWrap],
        _paused: false,
        read: [Function],
        _consuming: true,
        _httpMessage: [Circular],
        [Symbol(asyncId)]: 34,
        [Symbol(bytesRead)]: 0,
        [Symbol(asyncId)]: 35,
        [Symbol(triggerAsyncId)]: 9 },
     connection: 
      Socket {
        connecting: false,
        _hadError: false,
        _handle: [Object],
        _parent: null,
        _host: null,
        _readableState: [Object],
        readable: true,
        domain: null,
        _events: [Object],
        _eventsCount: 10,
        _maxListeners: undefined,
        _writableState: [Object],
        writable: true,
        allowHalfOpen: true,
        _bytesDispatched: 0,
        _sockname: null,
        _pendingData: null,
        _pendingEncoding: '',
        server: [Object],
        _server: [Object],
        _idleTimeout: 120000,
        _idleNext: [Object],
        _idlePrev: [Object],
        _idleStart: 7626,
        _destroyed: false,
        parser: [Object],
        on: [Function: socketOnWrap],
        _paused: false,
        read: [Function],
        _consuming: true,
        _httpMessage: [Circular],
        [Symbol(asyncId)]: 34,
        [Symbol(bytesRead)]: 0,
        [Symbol(asyncId)]: 35,
        [Symbol(triggerAsyncId)]: 9 },
     _header: null,
     _onPendingData: [Function: bound updateOutgoingData],
     _sent100: false,
     _expect_continue: false,
     req: [Circular],
     locals: {},
     [Symbol(outHeadersKey)]: 
      { 'x-powered-by': [Array],
        'cache-control': [Array],
        pragma: [Array],
        expires: [Array],
        vary: [Array] } },
  body: {} }
2018-04-07T18:02:46.224Z - info: Execution took 15 ms, user function completed successfully
2018-04-07T18:03:00.063Z - info: User function triggered, starting execution
2018-04-07T18:03:00.063Z - error: Request has invalid method. GET
2018-04-07T18:03:00.072Z - error: Invalid request IncomingMessage {
  _readableState: 
   ReadableState {
     objectMode: false,
     highWaterMark: 16384,
     buffer: BufferList { head: null, tail: null, length: 0 },
     length: 0,
     pipes: null,
     pipesCount: 0,
     flowing: null,
     ended: false,
     endEmitted: false,
     reading: false,
     sync: true,
     needReadable: false,
     emittedReadable: false,
     readableListening: false,
     resumeScheduled: false,
     destroyed: false,
     defaultEncoding: 'utf8',
     awaitDrain: 0,
     readingMore: true,
     decoder: null,
     encoding: null },
  readable: true,
  domain: null,
  _events: {},
  _eventsCount: 0,
  _maxListeners: undefined,
  socket: 
   Socket {
     connecting: false,
     _hadError: false,
     _handle: 
      TCP {
        reading: true,
        owner: [Circular],
        onread: [Function: onread],
        onconnection: null,
        writeQueueSize: 0,
        _consumed: true },
     _parent: null,
     _host: null,
     _readableState: 
      ReadableState {
        objectMode: false,
        highWaterMark: 16384,
        buffer: [Object],
        length: 0,
        pipes: null,
        pipesCount: 0,
        flowing: true,
        ended: false,
        endEmitted: false,
        reading: true,
        sync: false,
        needReadable: true,
        emittedReadable: false,
        readableListening: false,
        resumeScheduled: false,
        destroyed: false,
        defaultEncoding: 'utf8',
        awaitDrain: 0,
        readingMore: false,
        decoder: null,
        encoding: null },
     readable: true,
     domain: null,
     _events: 
      { end: [Array],
        finish: [Function: onSocketFinish],
        _socketEnd: [Function: onSocketEnd],
        drain: [Array],
        timeout: [Function: socketOnTimeout],
        data: [Function: bound socketOnData],
        error: [Function: socketOnError],
        close: [Array],
        resume: [Function: onSocketResume],
        pause: [Function: onSocketPause] },
     _eventsCount: 10,
     _maxListeners: undefined,
     _writableState: 
      WritableState {
        objectMode: false,
        highWaterMark: 16384,
        finalCalled: false,
        needDrain: false,
        ending: false,
        ended: false,
        finished: false,
        destroyed: false,
        decodeStrings: false,
        defaultEncoding: 'utf8',
        length: 0,
        writing: false,
        corked: 0,
        sync: true,
        bufferProcessing: false,
        onwrite: [Function: bound onwrite],
        writecb: null,
        writelen: 0,
        bufferedRequest: null,
        lastBufferedRequest: null,
        pendingcb: 0,
        prefinished: false,
        errorEmitted: false,
        bufferedRequestCount: 0,
        corkedRequestsFree: [Object] },
     writable: true,
     allowHalfOpen: true,
     _bytesDispatched: 0,
     _sockname: null,
     _pendingData: null,
     _pendingEncoding: '',
     server: 
      Server {
        domain: null,
        _events: [Object],
        _eventsCount: 2,
        _maxListeners: undefined,
        _connections: 1,
        _handle: [Object],
        _usingSlaves: false,
        _slaves: [],
        _unref: false,
        allowHalfOpen: true,
        pauseOnConnect: false,
        httpAllowHalfOpen: false,
        timeout: 120000,
        keepAliveTimeout: 5000,
        _pendingResponseData: 0,
        maxHeadersCount: null,
        _connectionKey: '4:127.0.0.1:0',
        [Symbol(asyncId)]: 9 },
     _server: 
      Server {
        domain: null,
        _events: [Object],
        _eventsCount: 2,
        _maxListeners: undefined,
        _connections: 1,
        _handle: [Object],
        _usingSlaves: false,
        _slaves: [],
        _unref: false,
        allowHalfOpen: true,
        pauseOnConnect: false,
        httpAllowHalfOpen: false,
        timeout: 120000,
        keepAliveTimeout: 5000,
        _pendingResponseData: 0,
        maxHeadersCount: null,
        _connectionKey: '4:127.0.0.1:0',
        [Symbol(asyncId)]: 9 },
     _idleTimeout: 120000,
     _idleNext: 
      TimersList {
        _idleNext: [Circular],
        _idlePrev: [Circular],
        _timer: [Object],
        _unrefed: true,
        msecs: 120000,
        nextTick: false },
     _idlePrev: 
      TimersList {
        _idleNext: [Circular],
        _idlePrev: [Circular],
        _timer: [Object],
        _unrefed: true,
        msecs: 120000,
        nextTick: false },
     _idleStart: 21477,
     _destroyed: false,
     parser: 
      HTTPParser {
        '0': [Function: parserOnHeaders],
        '1': [Function: parserOnHeadersComplete],
        '2': [Function: parserOnBody],
        '3': [Function: parserOnMessageComplete],
        '4': [Function: bound onParserExecute],
        _headers: [],
        _url: '',
        _consumed: true,
        socket: [Circular],
        incoming: [Circular],
        outgoing: null,
        maxHeaderPairs: 2000,
        onIncoming: [Function: bound parserOnIncoming] },
     on: [Function: socketOnWrap],
     _paused: false,
     read: [Function],
     _consuming: true,
     _httpMessage: 
      ServerResponse {
        domain: null,
        _events: [Object],
        _eventsCount: 1,
        _maxListeners: undefined,
        output: [],
        outputEncodings: [],
        outputCallbacks: [],
        outputSize: 0,
        writable: true,
        _last: false,
        upgrading: false,
        chunkedEncoding: false,
        shouldKeepAlive: false,
        useChunkedEncodingByDefault: true,
        sendDate: true,
        _removedConnection: false,
        _removedContLen: false,
        _removedTE: false,
        _contentLength: null,
        _hasBody: true,
        _trailer: '',
        finished: false,
        _headerSent: false,
        socket: [Circular],
        connection: [Circular],
        _header: null,
        _onPendingData: [Function: bound updateOutgoingData],
        _sent100: false,
        _expect_continue: false,
        req: [Circular],
        locals: {},
        [Symbol(outHeadersKey)]: [Object] },
     [Symbol(asyncId)]: 54,
     [Symbol(bytesRead)]: 0,
     [Symbol(asyncId)]: 55,
     [Symbol(triggerAsyncId)]: 9 },
  connection: 
   Socket {
     connecting: false,
     _hadError: false,
     _handle: 
      TCP {
        reading: true,
        owner: [Circular],
        onread: [Function: onread],
        onconnection: null,
        writeQueueSize: 0,
        _consumed: true },
     _parent: null,
     _host: null,
     _readableState: 
      ReadableState {
        objectMode: false,
        highWaterMark: 16384,
        buffer: [Object],
        length: 0,
        pipes: null,
        pipesCount: 0,
        flowing: true,
        ended: false,
        endEmitted: false,
        reading: true,
        sync: false,
        needReadable: true,
        emittedReadable: false,
        readableListening: false,
        resumeScheduled: false,
        destroyed: false,
        defaultEncoding: 'utf8',
        awaitDrain: 0,
        readingMore: false,
        decoder: null,
        encoding: null },
     readable: true,
     domain: null,
     _events: 
      { end: [Array],
        finish: [Function: onSocketFinish],
        _socketEnd: [Function: onSocketEnd],
        drain: [Array],
        timeout: [Function: socketOnTimeout],
        data: [Function: bound socketOnData],
        error: [Function: socketOnError],
        close: [Array],
        resume: [Function: onSocketResume],
        pause: [Function: onSocketPause] },
     _eventsCount: 10,
     _maxListeners: undefined,
     _writableState: 
      WritableState {
        objectMode: false,
        highWaterMark: 16384,
        finalCalled: false,
        needDrain: false,
        ending: false,
        ended: false,
        finished: false,
        destroyed: false,
        decodeStrings: false,
        defaultEncoding: 'utf8',
        length: 0,
        writing: false,
        corked: 0,
        sync: true,
        bufferProcessing: false,
        onwrite: [Function: bound onwrite],
        writecb: null,
        writelen: 0,
        bufferedRequest: null,
        lastBufferedRequest: null,
        pendingcb: 0,
        prefinished: false,
        errorEmitted: false,
        bufferedRequestCount: 0,
        corkedRequestsFree: [Object] },
     writable: true,
     allowHalfOpen: true,
     _bytesDispatched: 0,
     _sockname: null,
     _pendingData: null,
     _pendingEncoding: '',
     server: 
      Server {
        domain: null,
        _events: [Object],
        _eventsCount: 2,
        _maxListeners: undefined,
        _connections: 1,
        _handle: [Object],
        _usingSlaves: false,
        _slaves: [],
        _unref: false,
        allowHalfOpen: true,
        pauseOnConnect: false,
        httpAllowHalfOpen: false,
        timeout: 120000,
        keepAliveTimeout: 5000,
        _pendingResponseData: 0,
        maxHeadersCount: null,
        _connectionKey: '4:127.0.0.1:0',
        [Symbol(asyncId)]: 9 },
     _server: 
      Server {
        domain: null,
        _events: [Object],
        _eventsCount: 2,
        _maxListeners: undefined,
        _connections: 1,
        _handle: [Object],
        _usingSlaves: false,
        _slaves: [],
        _unref: false,
        allowHalfOpen: true,
        pauseOnConnect: false,
        httpAllowHalfOpen: false,
        timeout: 120000,
        keepAliveTimeout: 5000,
        _pendingResponseData: 0,
        maxHeadersCount: null,
        _connectionKey: '4:127.0.0.1:0',
        [Symbol(asyncId)]: 9 },
     _idleTimeout: 120000,
     _idleNext: 
      TimersList {
        _idleNext: [Circular],
        _idlePrev: [Circular],
        _timer: [Object],
        _unrefed: true,
        msecs: 120000,
        nextTick: false },
     _idlePrev: 
      TimersList {
        _idleNext: [Circular],
        _idlePrev: [Circular],
        _timer: [Object],
        _unrefed: true,
        msecs: 120000,
        nextTick: false },
     _idleStart: 21477,
     _destroyed: false,
     parser: 
      HTTPParser {
        '0': [Function: parserOnHeaders],
        '1': [Function: parserOnHeadersComplete],
        '2': [Function: parserOnBody],
        '3': [Function: parserOnMessageComplete],
        '4': [Function: bound onParserExecute],
        _headers: [],
        _url: '',
        _consumed: true,
        socket: [Circular],
        incoming: [Circular],
        outgoing: null,
        maxHeaderPairs: 2000,
        onIncoming: [Function: bound parserOnIncoming] },
     on: [Function: socketOnWrap],
     _paused: false,
     read: [Function],
     _consuming: true,
     _httpMessage: 
      ServerResponse {
        domain: null,
        _events: [Object],
        _eventsCount: 1,
        _maxListeners: undefined,
        output: [],
        outputEncodings: [],
        outputCallbacks: [],
        outputSize: 0,
        writable: true,
        _last: false,
        upgrading: false,
        chunkedEncoding: false,
        shouldKeepAlive: false,
        useChunkedEncodingByDefault: true,
        sendDate: true,
        _removedConnection: false,
        _removedContLen: false,
        _removedTE: false,
        _contentLength: null,
        _hasBody: true,
        _trailer: '',
        finished: false,
        _headerSent: false,
        socket: [Circular],
        connection: [Circular],
        _header: null,
        _onPendingData: [Function: bound updateOutgoingData],
        _sent100: false,
        _expect_continue: false,
        req: [Circular],
        locals: {},
        [Symbol(outHeadersKey)]: [Object] },
     [Symbol(asyncId)]: 54,
     [Symbol(bytesRead)]: 0,
     [Symbol(asyncId)]: 55,
     [Symbol(triggerAsyncId)]: 9 },
  httpVersionMajor: 1,
  httpVersionMinor: 1,
  httpVersion: '1.1',
  complete: false,
  headers: { connection: 'close', host: 'localhost:5000' },
  rawHeaders: [ 'connection', 'close', 'host', 'localhost:5000' ],
  trailers: {},
  rawTrailers: [],
  upgrade: false,
  url: '/',
  method: 'GET',
  statusCode: null,
  statusMessage: null,
  client: 
   Socket {
     connecting: false,
     _hadError: false,
     _handle: 
      TCP {
        reading: true,
        owner: [Circular],
        onread: [Function: onread],
        onconnection: null,
        writeQueueSize: 0,
        _consumed: true },
     _parent: null,
     _host: null,
     _readableState: 
      ReadableState {
        objectMode: false,
        highWaterMark: 16384,
        buffer: [Object],
        length: 0,
        pipes: null,
        pipesCount: 0,
        flowing: true,
        ended: false,
        endEmitted: false,
        reading: true,
        sync: false,
        needReadable: true,
        emittedReadable: false,
        readableListening: false,
        resumeScheduled: false,
        destroyed: false,
        defaultEncoding: 'utf8',
        awaitDrain: 0,
        readingMore: false,
        decoder: null,
        encoding: null },
     readable: true,
     domain: null,
     _events: 
      { end: [Array],
        finish: [Function: onSocketFinish],
        _socketEnd: [Function: onSocketEnd],
        drain: [Array],
        timeout: [Function: socketOnTimeout],
        data: [Function: bound socketOnData],
        error: [Function: socketOnError],
        close: [Array],
        resume: [Function: onSocketResume],
        pause: [Function: onSocketPause] },
     _eventsCount: 10,
     _maxListeners: undefined,
     _writableState: 
      WritableState {
        objectMode: false,
        highWaterMark: 16384,
        finalCalled: false,
        needDrain: false,
        ending: false,
        ended: false,
        finished: false,
        destroyed: false,
        decodeStrings: false,
        defaultEncoding: 'utf8',
        length: 0,
        writing: false,
        corked: 0,
        sync: true,
        bufferProcessing: false,
        onwrite: [Function: bound onwrite],
        writecb: null,
        writelen: 0,
        bufferedRequest: null,
        lastBufferedRequest: null,
        pendingcb: 0,
        prefinished: false,
        errorEmitted: false,
        bufferedRequestCount: 0,
        corkedRequestsFree: [Object] },
     writable: true,
     allowHalfOpen: true,
     _bytesDispatched: 0,
     _sockname: null,
     _pendingData: null,
     _pendingEncoding: '',
     server: 
      Server {
        domain: null,
        _events: [Object],
        _eventsCount: 2,
        _maxListeners: undefined,
        _connections: 1,
        _handle: [Object],
        _usingSlaves: false,
        _slaves: [],
        _unref: false,
        allowHalfOpen: true,
        pauseOnConnect: false,
        httpAllowHalfOpen: false,
        timeout: 120000,
        keepAliveTimeout: 5000,
        _pendingResponseData: 0,
        maxHeadersCount: null,
        _connectionKey: '4:127.0.0.1:0',
        [Symbol(asyncId)]: 9 },
     _server: 
      Server {
        domain: null,
        _events: [Object],
        _eventsCount: 2,
        _maxListeners: undefined,
        _connections: 1,
        _handle: [Object],
        _usingSlaves: false,
        _slaves: [],
        _unref: false,
        allowHalfOpen: true,
        pauseOnConnect: false,
        httpAllowHalfOpen: false,
        timeout: 120000,
        keepAliveTimeout: 5000,
        _pendingResponseData: 0,
        maxHeadersCount: null,
        _connectionKey: '4:127.0.0.1:0',
        [Symbol(asyncId)]: 9 },
     _idleTimeout: 120000,
     _idleNext: 
      TimersList {
        _idleNext: [Circular],
        _idlePrev: [Circular],
        _timer: [Object],
        _unrefed: true,
        msecs: 120000,
        nextTick: false },
     _idlePrev: 
      TimersList {
        _idleNext: [Circular],
        _idlePrev: [Circular],
        _timer: [Object],
        _unrefed: true,
        msecs: 120000,
        nextTick: false },
     _idleStart: 21477,
     _destroyed: false,
     parser: 
      HTTPParser {
        '0': [Function: parserOnHeaders],
        '1': [Function: parserOnHeadersComplete],
        '2': [Function: parserOnBody],
        '3': [Function: parserOnMessageComplete],
        '4': [Function: bound onParserExecute],
        _headers: [],
        _url: '',
        _consumed: true,
        socket: [Circular],
        incoming: [Circular],
        outgoing: null,
        maxHeaderPairs: 2000,
        onIncoming: [Function: bound parserOnIncoming] },
     on: [Function: socketOnWrap],
     _paused: false,
     read: [Function],
     _consuming: true,
     _httpMessage: 
      ServerResponse {
        domain: null,
        _events: [Object],
        _eventsCount: 1,
        _maxListeners: undefined,
        output: [],
        outputEncodings: [],
        outputCallbacks: [],
        outputSize: 0,
        writable: true,
        _last: false,
        upgrading: false,
        chunkedEncoding: false,
        shouldKeepAlive: false,
        useChunkedEncodingByDefault: true,
        sendDate: true,
        _removedConnection: false,
        _removedContLen: false,
        _removedTE: false,
        _contentLength: null,
        _hasBody: true,
        _trailer: '',
        finished: false,
        _headerSent: false,
        socket: [Circular],
        connection: [Circular],
        _header: null,
        _onPendingData: [Function: bound updateOutgoingData],
        _sent100: false,
        _expect_continue: false,
        req: [Circular],
        locals: {},
        [Symbol(outHeadersKey)]: [Object] },
     [Symbol(asyncId)]: 54,
     [Symbol(bytesRead)]: 0,
     [Symbol(asyncId)]: 55,
     [Symbol(triggerAsyncId)]: 9 },
  _consuming: false,
  _dumped: false,
  next: [Function: next],
  baseUrl: '',
  originalUrl: '/',
  _parsedUrl: 
   Url {
     protocol: null,
     slashes: null,
     auth: null,
     host: null,
     port: null,
     hostname: null,
     hash: null,
     search: null,
     query: null,
     pathname: '/',
     path: '/',
     href: '/',
     _raw: '/' },
  params: {},
  query: {},
  res: 
   ServerResponse {
     domain: null,
     _events: { finish: [Array] },
     _eventsCount: 1,
     _maxListeners: undefined,
     output: [],
     outputEncodings: [],
     outputCallbacks: [],
     outputSize: 0,
     writable: true,
     _last: false,
     upgrading: false,
     chunkedEncoding: false,
     shouldKeepAlive: false,
     useChunkedEncodingByDefault: true,
     sendDate: true,
     _removedConnection: false,
     _removedContLen: false,
     _removedTE: false,
     _contentLength: null,
     _hasBody: true,
     _trailer: '',
     finished: false,
     _headerSent: false,
     socket: 
      Socket {
        connecting: false,
        _hadError: false,
        _handle: [Object],
        _parent: null,
        _host: null,
        _readableState: [Object],
        readable: true,
        domain: null,
        _events: [Object],
        _eventsCount: 10,
        _maxListeners: undefined,
        _writableState: [Object],
        writable: true,
        allowHalfOpen: true,
        _bytesDispatched: 0,
        _sockname: null,
        _pendingData: null,
        _pendingEncoding: '',
        server: [Object],
        _server: [Object],
        _idleTimeout: 120000,
        _idleNext: [Object],
        _idlePrev: [Object],
        _idleStart: 21477,
        _destroyed: false,
        parser: [Object],
        on: [Function: socketOnWrap],
        _paused: false,
        read: [Function],
        _consuming: true,
        _httpMessage: [Circular],
        [Symbol(asyncId)]: 54,
        [Symbol(bytesRead)]: 0,
        [Symbol(asyncId)]: 55,
        [Symbol(triggerAsyncId)]: 9 },
     connection: 
      Socket {
        connecting: false,
        _hadError: false,
        _handle: [Object],
        _parent: null,
        _host: null,
        _readableState: [Object],
        readable: true,
        domain: null,
        _events: [Object],
        _eventsCount: 10,
        _maxListeners: undefined,
        _writableState: [Object],
        writable: true,
        allowHalfOpen: true,
        _bytesDispatched: 0,
        _sockname: null,
        _pendingData: null,
        _pendingEncoding: '',
        server: [Object],
        _server: [Object],
        _idleTimeout: 120000,
        _idleNext: [Object],
        _idlePrev: [Object],
        _idleStart: 21477,
        _destroyed: false,
        parser: [Object],
        on: [Function: socketOnWrap],
        _paused: false,
        read: [Function],
        _consuming: true,
        _httpMessage: [Circular],
        [Symbol(asyncId)]: 54,
        [Symbol(bytesRead)]: 0,
        [Symbol(asyncId)]: 55,
        [Symbol(triggerAsyncId)]: 9 },
     _header: null,
     _onPendingData: [Function: bound updateOutgoingData],
     _sent100: false,
     _expect_continue: false,
     req: [Circular],
     locals: {},
     [Symbol(outHeadersKey)]: 
      { 'x-powered-by': [Array],
        'cache-control': [Array],
        pragma: [Array],
        expires: [Array],
        vary: [Array] } },
  body: {} }
2018-04-07T18:03:00.074Z - info: Execution took 15 ms, user function completed successfully
2018-04-07T18:03:27.346Z - info: User function triggered, starting execution
2018-04-07T18:03:27.350Z - error: Request has invalid method. GET
2018-04-07T18:03:27.364Z - error: Invalid request IncomingMessage {
  _readableState: 
   ReadableState {
     objectMode: false,
     highWaterMark: 16384,
     buffer: BufferList { head: null, tail: null, length: 0 },
     length: 0,
     pipes: null,
     pipesCount: 0,
     flowing: null,
     ended: false,
     endEmitted: false,
     reading: false,
     sync: true,
     needReadable: false,
     emittedReadable: false,
     readableListening: false,
     resumeScheduled: false,
     destroyed: false,
     defaultEncoding: 'utf8',
     awaitDrain: 0,
     readingMore: true,
     decoder: null,
     encoding: null },
  readable: true,
  domain: null,
  _events: {},
  _eventsCount: 0,
  _maxListeners: undefined,
  socket: 
   Socket {
     connecting: false,
     _hadError: false,
     _handle: 
      TCP {
        reading: true,
        owner: [Circular],
        onread: [Function: onread],
        onconnection: null,
        writeQueueSize: 0,
        _consumed: true },
     _parent: null,
     _host: null,
     _readableState: 
      ReadableState {
        objectMode: false,
        highWaterMark: 16384,
        buffer: [Object],
        length: 0,
        pipes: null,
        pipesCount: 0,
        flowing: true,
        ended: false,
        endEmitted: false,
        reading: true,
        sync: false,
        needReadable: true,
        emittedReadable: false,
        readableListening: false,
        resumeScheduled: false,
        destroyed: false,
        defaultEncoding: 'utf8',
        awaitDrain: 0,
        readingMore: false,
        decoder: null,
        encoding: null },
     readable: true,
     domain: null,
     _events: 
      { end: [Array],
        finish: [Function: onSocketFinish],
        _socketEnd: [Function: onSocketEnd],
        drain: [Array],
        timeout: [Function: socketOnTimeout],
        data: [Function: bound socketOnData],
        error: [Function: socketOnError],
        close: [Array],
        resume: [Function: onSocketResume],
        pause: [Function: onSocketPause] },
     _eventsCount: 10,
     _maxListeners: undefined,
     _writableState: 
      WritableState {
        objectMode: false,
        highWaterMark: 16384,
        finalCalled: false,
        needDrain: false,
        ending: false,
        ended: false,
        finished: false,
        destroyed: false,
        decodeStrings: false,
        defaultEncoding: 'utf8',
        length: 0,
        writing: false,
        corked: 0,
        sync: true,
        bufferProcessing: false,
        onwrite: [Function: bound onwrite],
        writecb: null,
        writelen: 0,
        bufferedRequest: null,
        lastBufferedRequest: null,
        pendingcb: 0,
        prefinished: false,
        errorEmitted: false,
        bufferedRequestCount: 0,
        corkedRequestsFree: [Object] },
     writable: true,
     allowHalfOpen: true,
     _bytesDispatched: 0,
     _sockname: null,
     _pendingData: null,
     _pendingEncoding: '',
     server: 
      Server {
        domain: null,
        _events: [Object],
        _eventsCount: 2,
        _maxListeners: undefined,
        _connections: 1,
        _handle: [Object],
        _usingSlaves: false,
        _slaves: [],
        _unref: false,
        allowHalfOpen: true,
        pauseOnConnect: false,
        httpAllowHalfOpen: false,
        timeout: 120000,
        keepAliveTimeout: 5000,
        _pendingResponseData: 0,
        maxHeadersCount: null,
        _connectionKey: '4:127.0.0.1:0',
        [Symbol(asyncId)]: 9 },
     _server: 
      Server {
        domain: null,
        _events: [Object],
        _eventsCount: 2,
        _maxListeners: undefined,
        _connections: 1,
        _handle: [Object],
        _usingSlaves: false,
        _slaves: [],
        _unref: false,
        allowHalfOpen: true,
        pauseOnConnect: false,
        httpAllowHalfOpen: false,
        timeout: 120000,
        keepAliveTimeout: 5000,
        _pendingResponseData: 0,
        maxHeadersCount: null,
        _connectionKey: '4:127.0.0.1:0',
        [Symbol(asyncId)]: 9 },
     _idleTimeout: 120000,
     _idleNext: 
      TimersList {
        _idleNext: [Circular],
        _idlePrev: [Circular],
        _timer: [Object],
        _unrefed: true,
        msecs: 120000,
        nextTick: false },
     _idlePrev: 
      TimersList {
        _idleNext: [Circular],
        _idlePrev: [Circular],
        _timer: [Object],
        _unrefed: true,
        msecs: 120000,
        nextTick: false },
     _idleStart: 5879,
     _destroyed: false,
     parser: 
      HTTPParser {
        '0': [Function: parserOnHeaders],
        '1': [Function: parserOnHeadersComplete],
        '2': [Function: parserOnBody],
        '3': [Function: parserOnMessageComplete],
        '4': [Function: bound onParserExecute],
        _headers: [],
        _url: '',
        _consumed: true,
        socket: [Circular],
        incoming: [Circular],
        outgoing: null,
        maxHeaderPairs: 2000,
        onIncoming: [Function: bound parserOnIncoming] },
     on: [Function: socketOnWrap],
     _paused: false,
     read: [Function],
     _consuming: true,
     _httpMessage: 
      ServerResponse {
        domain: null,
        _events: [Object],
        _eventsCount: 1,
        _maxListeners: undefined,
        output: [],
        outputEncodings: [],
        outputCallbacks: [],
        outputSize: 0,
        writable: true,
        _last: false,
        upgrading: false,
        chunkedEncoding: false,
        shouldKeepAlive: false,
        useChunkedEncodingByDefault: true,
        sendDate: true,
        _removedConnection: false,
        _removedContLen: false,
        _removedTE: false,
        _contentLength: null,
        _hasBody: true,
        _trailer: '',
        finished: false,
        _headerSent: false,
        socket: [Circular],
        connection: [Circular],
        _header: null,
        _onPendingData: [Function: bound updateOutgoingData],
        _sent100: false,
        _expect_continue: false,
        req: [Circular],
        locals: {},
        [Symbol(outHeadersKey)]: [Object] },
     [Symbol(asyncId)]: 11,
     [Symbol(bytesRead)]: 0,
     [Symbol(asyncId)]: 13,
     [Symbol(triggerAsyncId)]: 9 },
  connection: 
   Socket {
     connecting: false,
     _hadError: false,
     _handle: 
      TCP {
        reading: true,
        owner: [Circular],
        onread: [Function: onread],
        onconnection: null,
        writeQueueSize: 0,
        _consumed: true },
     _parent: null,
     _host: null,
     _readableState: 
      ReadableState {
        objectMode: false,
        highWaterMark: 16384,
        buffer: [Object],
        length: 0,
        pipes: null,
        pipesCount: 0,
        flowing: true,
        ended: false,
        endEmitted: false,
        reading: true,
        sync: false,
        needReadable: true,
        emittedReadable: false,
        readableListening: false,
        resumeScheduled: false,
        destroyed: false,
        defaultEncoding: 'utf8',
        awaitDrain: 0,
        readingMore: false,
        decoder: null,
        encoding: null },
     readable: true,
     domain: null,
     _events: 
      { end: [Array],
        finish: [Function: onSocketFinish],
        _socketEnd: [Function: onSocketEnd],
        drain: [Array],
        timeout: [Function: socketOnTimeout],
        data: [Function: bound socketOnData],
        error: [Function: socketOnError],
        close: [Array],
        resume: [Function: onSocketResume],
        pause: [Function: onSocketPause] },
     _eventsCount: 10,
     _maxListeners: undefined,
     _writableState: 
      WritableState {
        objectMode: false,
        highWaterMark: 16384,
        finalCalled: false,
        needDrain: false,
        ending: false,
        ended: false,
        finished: false,
        destroyed: false,
        decodeStrings: false,
        defaultEncoding: 'utf8',
        length: 0,
        writing: false,
        corked: 0,
        sync: true,
        bufferProcessing: false,
        onwrite: [Function: bound onwrite],
        writecb: null,
        writelen: 0,
        bufferedRequest: null,
        lastBufferedRequest: null,
        pendingcb: 0,
        prefinished: false,
        errorEmitted: false,
        bufferedRequestCount: 0,
        corkedRequestsFree: [Object] },
     writable: true,
     allowHalfOpen: true,
     _bytesDispatched: 0,
     _sockname: null,
     _pendingData: null,
     _pendingEncoding: '',
     server: 
      Server {
        domain: null,
        _events: [Object],
        _eventsCount: 2,
        _maxListeners: undefined,
        _connections: 1,
        _handle: [Object],
        _usingSlaves: false,
        _slaves: [],
        _unref: false,
        allowHalfOpen: true,
        pauseOnConnect: false,
        httpAllowHalfOpen: false,
        timeout: 120000,
        keepAliveTimeout: 5000,
        _pendingResponseData: 0,
        maxHeadersCount: null,
        _connectionKey: '4:127.0.0.1:0',
        [Symbol(asyncId)]: 9 },
     _server: 
      Server {
        domain: null,
        _events: [Object],
        _eventsCount: 2,
        _maxListeners: undefined,
        _connections: 1,
        _handle: [Object],
        _usingSlaves: false,
        _slaves: [],
        _unref: false,
        allowHalfOpen: true,
        pauseOnConnect: false,
        httpAllowHalfOpen: false,
        timeout: 120000,
        keepAliveTimeout: 5000,
        _pendingResponseData: 0,
        maxHeadersCount: null,
        _connectionKey: '4:127.0.0.1:0',
        [Symbol(asyncId)]: 9 },
     _idleTimeout: 120000,
     _idleNext: 
      TimersList {
        _idleNext: [Circular],
        _idlePrev: [Circular],
        _timer: [Object],
        _unrefed: true,
        msecs: 120000,
        nextTick: false },
     _idlePrev: 
      TimersList {
        _idleNext: [Circular],
        _idlePrev: [Circular],
        _timer: [Object],
        _unrefed: true,
        msecs: 120000,
        nextTick: false },
     _idleStart: 5879,
     _destroyed: false,
     parser: 
      HTTPParser {
        '0': [Function: parserOnHeaders],
        '1': [Function: parserOnHeadersComplete],
        '2': [Function: parserOnBody],
        '3': [Function: parserOnMessageComplete],
        '4': [Function: bound onParserExecute],
        _headers: [],
        _url: '',
        _consumed: true,
        socket: [Circular],
        incoming: [Circular],
        outgoing: null,
        maxHeaderPairs: 2000,
        onIncoming: [Function: bound parserOnIncoming] },
     on: [Function: socketOnWrap],
     _paused: false,
     read: [Function],
     _consuming: true,
     _httpMessage: 
      ServerResponse {
        domain: null,
        _events: [Object],
        _eventsCount: 1,
        _maxListeners: undefined,
        output: [],
        outputEncodings: [],
        outputCallbacks: [],
        outputSize: 0,
        writable: true,
        _last: false,
        upgrading: false,
        chunkedEncoding: false,
        shouldKeepAlive: false,
        useChunkedEncodingByDefault: true,
        sendDate: true,
        _removedConnection: false,
        _removedContLen: false,
        _removedTE: false,
        _contentLength: null,
        _hasBody: true,
        _trailer: '',
        finished: false,
        _headerSent: false,
        socket: [Circular],
        connection: [Circular],
        _header: null,
        _onPendingData: [Function: bound updateOutgoingData],
        _sent100: false,
        _expect_continue: false,
        req: [Circular],
        locals: {},
        [Symbol(outHeadersKey)]: [Object] },
     [Symbol(asyncId)]: 11,
     [Symbol(bytesRead)]: 0,
     [Symbol(asyncId)]: 13,
     [Symbol(triggerAsyncId)]: 9 },
  httpVersionMajor: 1,
  httpVersionMinor: 1,
  httpVersion: '1.1',
  complete: false,
  headers: { connection: 'close', host: 'localhost:5000' },
  rawHeaders: [ 'connection', 'close', 'host', 'localhost:5000' ],
  trailers: {},
  rawTrailers: [],
  upgrade: false,
  url: '/',
  method: 'GET',
  statusCode: null,
  statusMessage: null,
  client: 
   Socket {
     connecting: false,
     _hadError: false,
     _handle: 
      TCP {
        reading: true,
        owner: [Circular],
        onread: [Function: onread],
        onconnection: null,
        writeQueueSize: 0,
        _consumed: true },
     _parent: null,
     _host: null,
     _readableState: 
      ReadableState {
        objectMode: false,
        highWaterMark: 16384,
        buffer: [Object],
        length: 0,
        pipes: null,
        pipesCount: 0,
        flowing: true,
        ended: false,
        endEmitted: false,
        reading: true,
        sync: false,
        needReadable: true,
        emittedReadable: false,
        readableListening: false,
        resumeScheduled: false,
        destroyed: false,
        defaultEncoding: 'utf8',
        awaitDrain: 0,
        readingMore: false,
        decoder: null,
        encoding: null },
     readable: true,
     domain: null,
     _events: 
      { end: [Array],
        finish: [Function: onSocketFinish],
        _socketEnd: [Function: onSocketEnd],
        drain: [Array],
        timeout: [Function: socketOnTimeout],
        data: [Function: bound socketOnData],
        error: [Function: socketOnError],
        close: [Array],
        resume: [Function: onSocketResume],
        pause: [Function: onSocketPause] },
     _eventsCount: 10,
     _maxListeners: undefined,
     _writableState: 
      WritableState {
        objectMode: false,
        highWaterMark: 16384,
        finalCalled: false,
        needDrain: false,
        ending: false,
        ended: false,
        finished: false,
        destroyed: false,
        decodeStrings: false,
        defaultEncoding: 'utf8',
        length: 0,
        writing: false,
        corked: 0,
        sync: true,
        bufferProcessing: false,
        onwrite: [Function: bound onwrite],
        writecb: null,
        writelen: 0,
        bufferedRequest: null,
        lastBufferedRequest: null,
        pendingcb: 0,
        prefinished: false,
        errorEmitted: false,
        bufferedRequestCount: 0,
        corkedRequestsFree: [Object] },
     writable: true,
     allowHalfOpen: true,
     _bytesDispatched: 0,
     _sockname: null,
     _pendingData: null,
     _pendingEncoding: '',
     server: 
      Server {
        domain: null,
        _events: [Object],
        _eventsCount: 2,
        _maxListeners: undefined,
        _connections: 1,
        _handle: [Object],
        _usingSlaves: false,
        _slaves: [],
        _unref: false,
        allowHalfOpen: true,
        pauseOnConnect: false,
        httpAllowHalfOpen: false,
        timeout: 120000,
        keepAliveTimeout: 5000,
        _pendingResponseData: 0,
        maxHeadersCount: null,
        _connectionKey: '4:127.0.0.1:0',
        [Symbol(asyncId)]: 9 },
     _server: 
      Server {
        domain: null,
        _events: [Object],
        _eventsCount: 2,
        _maxListeners: undefined,
        _connections: 1,
        _handle: [Object],
        _usingSlaves: false,
        _slaves: [],
        _unref: false,
        allowHalfOpen: true,
        pauseOnConnect: false,
        httpAllowHalfOpen: false,
        timeout: 120000,
        keepAliveTimeout: 5000,
        _pendingResponseData: 0,
        maxHeadersCount: null,
        _connectionKey: '4:127.0.0.1:0',
        [Symbol(asyncId)]: 9 },
     _idleTimeout: 120000,
     _idleNext: 
      TimersList {
        _idleNext: [Circular],
        _idlePrev: [Circular],
        _timer: [Object],
        _unrefed: true,
        msecs: 120000,
        nextTick: false },
     _idlePrev: 
      TimersList {
        _idleNext: [Circular],
        _idlePrev: [Circular],
        _timer: [Object],
        _unrefed: true,
        msecs: 120000,
        nextTick: false },
     _idleStart: 5879,
     _destroyed: false,
     parser: 
      HTTPParser {
        '0': [Function: parserOnHeaders],
        '1': [Function: parserOnHeadersComplete],
        '2': [Function: parserOnBody],
        '3': [Function: parserOnMessageComplete],
        '4': [Function: bound onParserExecute],
        _headers: [],
        _url: '',
        _consumed: true,
        socket: [Circular],
        incoming: [Circular],
        outgoing: null,
        maxHeaderPairs: 2000,
        onIncoming: [Function: bound parserOnIncoming] },
     on: [Function: socketOnWrap],
     _paused: false,
     read: [Function],
     _consuming: true,
     _httpMessage: 
      ServerResponse {
        domain: null,
        _events: [Object],
        _eventsCount: 1,
        _maxListeners: undefined,
        output: [],
        outputEncodings: [],
        outputCallbacks: [],
        outputSize: 0,
        writable: true,
        _last: false,
        upgrading: false,
        chunkedEncoding: false,
        shouldKeepAlive: false,
        useChunkedEncodingByDefault: true,
        sendDate: true,
        _removedConnection: false,
        _removedContLen: false,
        _removedTE: false,
        _contentLength: null,
        _hasBody: true,
        _trailer: '',
        finished: false,
        _headerSent: false,
        socket: [Circular],
        connection: [Circular],
        _header: null,
        _onPendingData: [Function: bound updateOutgoingData],
        _sent100: false,
        _expect_continue: false,
        req: [Circular],
        locals: {},
        [Symbol(outHeadersKey)]: [Object] },
     [Symbol(asyncId)]: 11,
     [Symbol(bytesRead)]: 0,
     [Symbol(asyncId)]: 13,
     [Symbol(triggerAsyncId)]: 9 },
  _consuming: false,
  _dumped: false,
  next: [Function: next],
  baseUrl: '',
  originalUrl: '/',
  _parsedUrl: 
   Url {
     protocol: null,
     slashes: null,
     auth: null,
     host: null,
     port: null,
     hostname: null,
     hash: null,
     search: null,
     query: null,
     pathname: '/',
     path: '/',
     href: '/',
     _raw: '/' },
  params: {},
  query: {},
  res: 
   ServerResponse {
     domain: null,
     _events: { finish: [Array] },
     _eventsCount: 1,
     _maxListeners: undefined,
     output: [],
     outputEncodings: [],
     outputCallbacks: [],
     outputSize: 0,
     writable: true,
     _last: false,
     upgrading: false,
     chunkedEncoding: false,
     shouldKeepAlive: false,
     useChunkedEncodingByDefault: true,
     sendDate: true,
     _removedConnection: false,
     _removedContLen: false,
     _removedTE: false,
     _contentLength: null,
     _hasBody: true,
     _trailer: '',
     finished: false,
     _headerSent: false,
     socket: 
      Socket {
        connecting: false,
        _hadError: false,
        _handle: [Object],
        _parent: null,
        _host: null,
        _readableState: [Object],
        readable: true,
        domain: null,
        _events: [Object],
        _eventsCount: 10,
        _maxListeners: undefined,
        _writableState: [Object],
        writable: true,
        allowHalfOpen: true,
        _bytesDispatched: 0,
        _sockname: null,
        _pendingData: null,
        _pendingEncoding: '',
        server: [Object],
        _server: [Object],
        _idleTimeout: 120000,
        _idleNext: [Object],
        _idlePrev: [Object],
        _idleStart: 5879,
        _destroyed: false,
        parser: [Object],
        on: [Function: socketOnWrap],
        _paused: false,
        read: [Function],
        _consuming: true,
        _httpMessage: [Circular],
        [Symbol(asyncId)]: 11,
        [Symbol(bytesRead)]: 0,
        [Symbol(asyncId)]: 13,
        [Symbol(triggerAsyncId)]: 9 },
     connection: 
      Socket {
        connecting: false,
        _hadError: false,
        _handle: [Object],
        _parent: null,
        _host: null,
        _readableState: [Object],
        readable: true,
        domain: null,
        _events: [Object],
        _eventsCount: 10,
        _maxListeners: undefined,
        _writableState: [Object],
        writable: true,
        allowHalfOpen: true,
        _bytesDispatched: 0,
        _sockname: null,
        _pendingData: null,
        _pendingEncoding: '',
        server: [Object],
        _server: [Object],
        _idleTimeout: 120000,
        _idleNext: [Object],
        _idlePrev: [Object],
        _idleStart: 5879,
        _destroyed: false,
        parser: [Object],
        on: [Function: socketOnWrap],
        _paused: false,
        read: [Function],
        _consuming: true,
        _httpMessage: [Circular],
        [Symbol(asyncId)]: 11,
        [Symbol(bytesRead)]: 0,
        [Symbol(asyncId)]: 13,
        [Symbol(triggerAsyncId)]: 9 },
     _header: null,
     _onPendingData: [Function: bound updateOutgoingData],
     _sent100: false,
     _expect_continue: false,
     req: [Circular],
     locals: {},
     [Symbol(outHeadersKey)]: 
      { 'x-powered-by': [Array],
        'cache-control': [Array],
        pragma: [Array],
        expires: [Array],
        vary: [Array] } },
  body: {} }
2018-04-07T18:03:27.374Z - info: Execution took 28 ms, user function completed successfully
2018-04-07T18:03:44.813Z - info: User function triggered, starting execution
2018-04-07T18:03:44.813Z - error: Request has invalid method. GET
2018-04-07T18:03:44.821Z - error: Invalid request IncomingMessage {
  _readableState: 
   ReadableState {
     objectMode: false,
     highWaterMark: 16384,
     buffer: BufferList { head: null, tail: null, length: 0 },
     length: 0,
     pipes: null,
     pipesCount: 0,
     flowing: null,
     ended: false,
     endEmitted: false,
     reading: false,
     sync: true,
     needReadable: false,
     emittedReadable: false,
     readableListening: false,
     resumeScheduled: false,
     destroyed: false,
     defaultEncoding: 'utf8',
     awaitDrain: 0,
     readingMore: true,
     decoder: null,
     encoding: null },
  readable: true,
  domain: null,
  _events: {},
  _eventsCount: 0,
  _maxListeners: undefined,
  socket: 
   Socket {
     connecting: false,
     _hadError: false,
     _handle: 
      TCP {
        reading: true,
        owner: [Circular],
        onread: [Function: onread],
        onconnection: null,
        writeQueueSize: 0,
        _consumed: true },
     _parent: null,
     _host: null,
     _readableState: 
      ReadableState {
        objectMode: false,
        highWaterMark: 16384,
        buffer: [Object],
        length: 0,
        pipes: null,
        pipesCount: 0,
        flowing: true,
        ended: false,
        endEmitted: false,
        reading: true,
        sync: false,
        needReadable: true,
        emittedReadable: false,
        readableListening: false,
        resumeScheduled: false,
        destroyed: false,
        defaultEncoding: 'utf8',
        awaitDrain: 0,
        readingMore: false,
        decoder: null,
        encoding: null },
     readable: true,
     domain: null,
     _events: 
      { end: [Array],
        finish: [Function: onSocketFinish],
        _socketEnd: [Function: onSocketEnd],
        drain: [Array],
        timeout: [Function: socketOnTimeout],
        data: [Function: bound socketOnData],
        error: [Function: socketOnError],
        close: [Array],
        resume: [Function: onSocketResume],
        pause: [Function: onSocketPause] },
     _eventsCount: 10,
     _maxListeners: undefined,
     _writableState: 
      WritableState {
        objectMode: false,
        highWaterMark: 16384,
        finalCalled: false,
        needDrain: false,
        ending: false,
        ended: false,
        finished: false,
        destroyed: false,
        decodeStrings: false,
        defaultEncoding: 'utf8',
        length: 0,
        writing: false,
        corked: 0,
        sync: true,
        bufferProcessing: false,
        onwrite: [Function: bound onwrite],
        writecb: null,
        writelen: 0,
        bufferedRequest: null,
        lastBufferedRequest: null,
        pendingcb: 0,
        prefinished: false,
        errorEmitted: false,
        bufferedRequestCount: 0,
        corkedRequestsFree: [Object] },
     writable: true,
     allowHalfOpen: true,
     _bytesDispatched: 0,
     _sockname: null,
     _pendingData: null,
     _pendingEncoding: '',
     server: 
      Server {
        domain: null,
        _events: [Object],
        _eventsCount: 2,
        _maxListeners: undefined,
        _connections: 1,
        _handle: [Object],
        _usingSlaves: false,
        _slaves: [],
        _unref: false,
        allowHalfOpen: true,
        pauseOnConnect: false,
        httpAllowHalfOpen: false,
        timeout: 120000,
        keepAliveTimeout: 5000,
        _pendingResponseData: 0,
        maxHeadersCount: null,
        _connectionKey: '4:127.0.0.1:0',
        [Symbol(asyncId)]: 9 },
     _server: 
      Server {
        domain: null,
        _events: [Object],
        _eventsCount: 2,
        _maxListeners: undefined,
        _connections: 1,
        _handle: [Object],
        _usingSlaves: false,
        _slaves: [],
        _unref: false,
        allowHalfOpen: true,
        pauseOnConnect: false,
        httpAllowHalfOpen: false,
        timeout: 120000,
        keepAliveTimeout: 5000,
        _pendingResponseData: 0,
        maxHeadersCount: null,
        _connectionKey: '4:127.0.0.1:0',
        [Symbol(asyncId)]: 9 },
     _idleTimeout: 120000,
     _idleNext: 
      TimersList {
        _idleNext: [Circular],
        _idlePrev: [Circular],
        _timer: [Object],
        _unrefed: true,
        msecs: 120000,
        nextTick: false },
     _idlePrev: 
      TimersList {
        _idleNext: [Circular],
        _idlePrev: [Circular],
        _timer: [Object],
        _unrefed: true,
        msecs: 120000,
        nextTick: false },
     _idleStart: 23347,
     _destroyed: false,
     parser: 
      HTTPParser {
        '0': [Function: parserOnHeaders],
        '1': [Function: parserOnHeadersComplete],
        '2': [Function: parserOnBody],
        '3': [Function: parserOnMessageComplete],
        '4': [Function: bound onParserExecute],
        _headers: [],
        _url: '',
        _consumed: true,
        socket: [Circular],
        incoming: [Circular],
        outgoing: null,
        maxHeaderPairs: 2000,
        onIncoming: [Function: bound parserOnIncoming] },
     on: [Function: socketOnWrap],
     _paused: false,
     read: [Function],
     _consuming: true,
     _httpMessage: 
      ServerResponse {
        domain: null,
        _events: [Object],
        _eventsCount: 1,
        _maxListeners: undefined,
        output: [],
        outputEncodings: [],
        outputCallbacks: [],
        outputSize: 0,
        writable: true,
        _last: false,
        upgrading: false,
        chunkedEncoding: false,
        shouldKeepAlive: false,
        useChunkedEncodingByDefault: true,
        sendDate: true,
        _removedConnection: false,
        _removedContLen: false,
        _removedTE: false,
        _contentLength: null,
        _hasBody: true,
        _trailer: '',
        finished: false,
        _headerSent: false,
        socket: [Circular],
        connection: [Circular],
        _header: null,
        _onPendingData: [Function: bound updateOutgoingData],
        _sent100: false,
        _expect_continue: false,
        req: [Circular],
        locals: {},
        [Symbol(outHeadersKey)]: [Object] },
     [Symbol(asyncId)]: 34,
     [Symbol(bytesRead)]: 0,
     [Symbol(asyncId)]: 35,
     [Symbol(triggerAsyncId)]: 9 },
  connection: 
   Socket {
     connecting: false,
     _hadError: false,
     _handle: 
      TCP {
        reading: true,
        owner: [Circular],
        onread: [Function: onread],
        onconnection: null,
        writeQueueSize: 0,
        _consumed: true },
     _parent: null,
     _host: null,
     _readableState: 
      ReadableState {
        objectMode: false,
        highWaterMark: 16384,
        buffer: [Object],
        length: 0,
        pipes: null,
        pipesCount: 0,
        flowing: true,
        ended: false,
        endEmitted: false,
        reading: true,
        sync: false,
        needReadable: true,
        emittedReadable: false,
        readableListening: false,
        resumeScheduled: false,
        destroyed: false,
        defaultEncoding: 'utf8',
        awaitDrain: 0,
        readingMore: false,
        decoder: null,
        encoding: null },
     readable: true,
     domain: null,
     _events: 
      { end: [Array],
        finish: [Function: onSocketFinish],
        _socketEnd: [Function: onSocketEnd],
        drain: [Array],
        timeout: [Function: socketOnTimeout],
        data: [Function: bound socketOnData],
        error: [Function: socketOnError],
        close: [Array],
        resume: [Function: onSocketResume],
        pause: [Function: onSocketPause] },
     _eventsCount: 10,
     _maxListeners: undefined,
     _writableState: 
      WritableState {
        objectMode: false,
        highWaterMark: 16384,
        finalCalled: false,
        needDrain: false,
        ending: false,
        ended: false,
        finished: false,
        destroyed: false,
        decodeStrings: false,
        defaultEncoding: 'utf8',
        length: 0,
        writing: false,
        corked: 0,
        sync: true,
        bufferProcessing: false,
        onwrite: [Function: bound onwrite],
        writecb: null,
        writelen: 0,
        bufferedRequest: null,
        lastBufferedRequest: null,
        pendingcb: 0,
        prefinished: false,
        errorEmitted: false,
        bufferedRequestCount: 0,
        corkedRequestsFree: [Object] },
     writable: true,
     allowHalfOpen: true,
     _bytesDispatched: 0,
     _sockname: null,
     _pendingData: null,
     _pendingEncoding: '',
     server: 
      Server {
        domain: null,
        _events: [Object],
        _eventsCount: 2,
        _maxListeners: undefined,
        _connections: 1,
        _handle: [Object],
        _usingSlaves: false,
        _slaves: [],
        _unref: false,
        allowHalfOpen: true,
        pauseOnConnect: false,
        httpAllowHalfOpen: false,
        timeout: 120000,
        keepAliveTimeout: 5000,
        _pendingResponseData: 0,
        maxHeadersCount: null,
        _connectionKey: '4:127.0.0.1:0',
        [Symbol(asyncId)]: 9 },
     _server: 
      Server {
        domain: null,
        _events: [Object],
        _eventsCount: 2,
        _maxListeners: undefined,
        _connections: 1,
        _handle: [Object],
        _usingSlaves: false,
        _slaves: [],
        _unref: false,
        allowHalfOpen: true,
        pauseOnConnect: false,
        httpAllowHalfOpen: false,
        timeout: 120000,
        keepAliveTimeout: 5000,
        _pendingResponseData: 0,
        maxHeadersCount: null,
        _connectionKey: '4:127.0.0.1:0',
        [Symbol(asyncId)]: 9 },
     _idleTimeout: 120000,
     _idleNext: 
      TimersList {
        _idleNext: [Circular],
        _idlePrev: [Circular],
        _timer: [Object],
        _unrefed: true,
        msecs: 120000,
        nextTick: false },
     _idlePrev: 
      TimersList {
        _idleNext: [Circular],
        _idlePrev: [Circular],
        _timer: [Object],
        _unrefed: true,
        msecs: 120000,
        nextTick: false },
     _idleStart: 23347,
     _destroyed: false,
     parser: 
      HTTPParser {
        '0': [Function: parserOnHeaders],
        '1': [Function: parserOnHeadersComplete],
        '2': [Function: parserOnBody],
        '3': [Function: parserOnMessageComplete],
        '4': [Function: bound onParserExecute],
        _headers: [],
        _url: '',
        _consumed: true,
        socket: [Circular],
        incoming: [Circular],
        outgoing: null,
        maxHeaderPairs: 2000,
        onIncoming: [Function: bound parserOnIncoming] },
     on: [Function: socketOnWrap],
     _paused: false,
     read: [Function],
     _consuming: true,
     _httpMessage: 
      ServerResponse {
        domain: null,
        _events: [Object],
        _eventsCount: 1,
        _maxListeners: undefined,
        output: [],
        outputEncodings: [],
        outputCallbacks: [],
        outputSize: 0,
        writable: true,
        _last: false,
        upgrading: false,
        chunkedEncoding: false,
        shouldKeepAlive: false,
        useChunkedEncodingByDefault: true,
        sendDate: true,
        _removedConnection: false,
        _removedContLen: false,
        _removedTE: false,
        _contentLength: null,
        _hasBody: true,
        _trailer: '',
        finished: false,
        _headerSent: false,
        socket: [Circular],
        connection: [Circular],
        _header: null,
        _onPendingData: [Function: bound updateOutgoingData],
        _sent100: false,
        _expect_continue: false,
        req: [Circular],
        locals: {},
        [Symbol(outHeadersKey)]: [Object] },
     [Symbol(asyncId)]: 34,
     [Symbol(bytesRead)]: 0,
     [Symbol(asyncId)]: 35,
     [Symbol(triggerAsyncId)]: 9 },
  httpVersionMajor: 1,
  httpVersionMinor: 1,
  httpVersion: '1.1',
  complete: false,
  headers: { connection: 'close', host: 'localhost:5000' },
  rawHeaders: [ 'connection', 'close', 'host', 'localhost:5000' ],
  trailers: {},
  rawTrailers: [],
  upgrade: false,
  url: '/',
  method: 'GET',
  statusCode: null,
  statusMessage: null,
  client: 
   Socket {
     connecting: false,
     _hadError: false,
     _handle: 
      TCP {
        reading: true,
        owner: [Circular],
        onread: [Function: onread],
        onconnection: null,
        writeQueueSize: 0,
        _consumed: true },
     _parent: null,
     _host: null,
     _readableState: 
      ReadableState {
        objectMode: false,
        highWaterMark: 16384,
        buffer: [Object],
        length: 0,
        pipes: null,
        pipesCount: 0,
        flowing: true,
        ended: false,
        endEmitted: false,
        reading: true,
        sync: false,
        needReadable: true,
        emittedReadable: false,
        readableListening: false,
        resumeScheduled: false,
        destroyed: false,
        defaultEncoding: 'utf8',
        awaitDrain: 0,
        readingMore: false,
        decoder: null,
        encoding: null },
     readable: true,
     domain: null,
     _events: 
      { end: [Array],
        finish: [Function: onSocketFinish],
        _socketEnd: [Function: onSocketEnd],
        drain: [Array],
        timeout: [Function: socketOnTimeout],
        data: [Function: bound socketOnData],
        error: [Function: socketOnError],
        close: [Array],
        resume: [Function: onSocketResume],
        pause: [Function: onSocketPause] },
     _eventsCount: 10,
     _maxListeners: undefined,
     _writableState: 
      WritableState {
        objectMode: false,
        highWaterMark: 16384,
        finalCalled: false,
        needDrain: false,
        ending: false,
        ended: false,
        finished: false,
        destroyed: false,
        decodeStrings: false,
        defaultEncoding: 'utf8',
        length: 0,
        writing: false,
        corked: 0,
        sync: true,
        bufferProcessing: false,
        onwrite: [Function: bound onwrite],
        writecb: null,
        writelen: 0,
        bufferedRequest: null,
        lastBufferedRequest: null,
        pendingcb: 0,
        prefinished: false,
        errorEmitted: false,
        bufferedRequestCount: 0,
        corkedRequestsFree: [Object] },
     writable: true,
     allowHalfOpen: true,
     _bytesDispatched: 0,
     _sockname: null,
     _pendingData: null,
     _pendingEncoding: '',
     server: 
      Server {
        domain: null,
        _events: [Object],
        _eventsCount: 2,
        _maxListeners: undefined,
        _connections: 1,
        _handle: [Object],
        _usingSlaves: false,
        _slaves: [],
        _unref: false,
        allowHalfOpen: true,
        pauseOnConnect: false,
        httpAllowHalfOpen: false,
        timeout: 120000,
        keepAliveTimeout: 5000,
        _pendingResponseData: 0,
        maxHeadersCount: null,
        _connectionKey: '4:127.0.0.1:0',
        [Symbol(asyncId)]: 9 },
     _server: 
      Server {
        domain: null,
        _events: [Object],
        _eventsCount: 2,
        _maxListeners: undefined,
        _connections: 1,
        _handle: [Object],
        _usingSlaves: false,
        _slaves: [],
        _unref: false,
        allowHalfOpen: true,
        pauseOnConnect: false,
        httpAllowHalfOpen: false,
        timeout: 120000,
        keepAliveTimeout: 5000,
        _pendingResponseData: 0,
        maxHeadersCount: null,
        _connectionKey: '4:127.0.0.1:0',
        [Symbol(asyncId)]: 9 },
     _idleTimeout: 120000,
     _idleNext: 
      TimersList {
        _idleNext: [Circular],
        _idlePrev: [Circular],
        _timer: [Object],
        _unrefed: true,
        msecs: 120000,
        nextTick: false },
     _idlePrev: 
      TimersList {
        _idleNext: [Circular],
        _idlePrev: [Circular],
        _timer: [Object],
        _unrefed: true,
        msecs: 120000,
        nextTick: false },
     _idleStart: 23347,
     _destroyed: false,
     parser: 
      HTTPParser {
        '0': [Function: parserOnHeaders],
        '1': [Function: parserOnHeadersComplete],
        '2': [Function: parserOnBody],
        '3': [Function: parserOnMessageComplete],
        '4': [Function: bound onParserExecute],
        _headers: [],
        _url: '',
        _consumed: true,
        socket: [Circular],
        incoming: [Circular],
        outgoing: null,
        maxHeaderPairs: 2000,
        onIncoming: [Function: bound parserOnIncoming] },
     on: [Function: socketOnWrap],
     _paused: false,
     read: [Function],
     _consuming: true,
     _httpMessage: 
      ServerResponse {
        domain: null,
        _events: [Object],
        _eventsCount: 1,
        _maxListeners: undefined,
        output: [],
        outputEncodings: [],
        outputCallbacks: [],
        outputSize: 0,
        writable: true,
        _last: false,
        upgrading: false,
        chunkedEncoding: false,
        shouldKeepAlive: false,
        useChunkedEncodingByDefault: true,
        sendDate: true,
        _removedConnection: false,
        _removedContLen: false,
        _removedTE: false,
        _contentLength: null,
        _hasBody: true,
        _trailer: '',
        finished: false,
        _headerSent: false,
        socket: [Circular],
        connection: [Circular],
        _header: null,
        _onPendingData: [Function: bound updateOutgoingData],
        _sent100: false,
        _expect_continue: false,
        req: [Circular],
        locals: {},
        [Symbol(outHeadersKey)]: [Object] },
     [Symbol(asyncId)]: 34,
     [Symbol(bytesRead)]: 0,
     [Symbol(asyncId)]: 35,
     [Symbol(triggerAsyncId)]: 9 },
  _consuming: false,
  _dumped: false,
  next: [Function: next],
  baseUrl: '',
  originalUrl: '/',
  _parsedUrl: 
   Url {
     protocol: null,
     slashes: null,
     auth: null,
     host: null,
     port: null,
     hostname: null,
     hash: null,
     search: null,
     query: null,
     pathname: '/',
     path: '/',
     href: '/',
     _raw: '/' },
  params: {},
  query: {},
  res: 
   ServerResponse {
     domain: null,
     _events: { finish: [Array] },
     _eventsCount: 1,
     _maxListeners: undefined,
     output: [],
     outputEncodings: [],
     outputCallbacks: [],
     outputSize: 0,
     writable: true,
     _last: false,
     upgrading: false,
     chunkedEncoding: false,
     shouldKeepAlive: false,
     useChunkedEncodingByDefault: true,
     sendDate: true,
     _removedConnection: false,
     _removedContLen: false,
     _removedTE: false,
     _contentLength: null,
     _hasBody: true,
     _trailer: '',
     finished: false,
     _headerSent: false,
     socket: 
      Socket {
        connecting: false,
        _hadError: false,
        _handle: [Object],
        _parent: null,
        _host: null,
        _readableState: [Object],
        readable: true,
        domain: null,
        _events: [Object],
        _eventsCount: 10,
        _maxListeners: undefined,
        _writableState: [Object],
        writable: true,
        allowHalfOpen: true,
        _bytesDispatched: 0,
        _sockname: null,
        _pendingData: null,
        _pendingEncoding: '',
        server: [Object],
        _server: [Object],
        _idleTimeout: 120000,
        _idleNext: [Object],
        _idlePrev: [Object],
        _idleStart: 23347,
        _destroyed: false,
        parser: [Object],
        on: [Function: socketOnWrap],
        _paused: false,
        read: [Function],
        _consuming: true,
        _httpMessage: [Circular],
        [Symbol(asyncId)]: 34,
        [Symbol(bytesRead)]: 0,
        [Symbol(asyncId)]: 35,
        [Symbol(triggerAsyncId)]: 9 },
     connection: 
      Socket {
        connecting: false,
        _hadError: false,
        _handle: [Object],
        _parent: null,
        _host: null,
        _readableState: [Object],
        readable: true,
        domain: null,
        _events: [Object],
        _eventsCount: 10,
        _maxListeners: undefined,
        _writableState: [Object],
        writable: true,
        allowHalfOpen: true,
        _bytesDispatched: 0,
        _sockname: null,
        _pendingData: null,
        _pendingEncoding: '',
        server: [Object],
        _server: [Object],
        _idleTimeout: 120000,
        _idleNext: [Object],
        _idlePrev: [Object],
        _idleStart: 23347,
        _destroyed: false,
        parser: [Object],
        on: [Function: socketOnWrap],
        _paused: false,
        read: [Function],
        _consuming: true,
        _httpMessage: [Circular],
        [Symbol(asyncId)]: 34,
        [Symbol(bytesRead)]: 0,
        [Symbol(asyncId)]: 35,
        [Symbol(triggerAsyncId)]: 9 },
     _header: null,
     _onPendingData: [Function: bound updateOutgoingData],
     _sent100: false,
     _expect_continue: false,
     req: [Circular],
     locals: {},
     [Symbol(outHeadersKey)]: 
      { 'x-powered-by': [Array],
        'cache-control': [Array],
        pragma: [Array],
        expires: [Array],
        vary: [Array] } },
  body: {} }
2018-04-07T18:03:44.825Z - info: Execution took 13 ms, user function completed successfully
2018-04-07T18:04:26.144Z - info: User function triggered, starting execution
2018-04-07T18:04:26.145Z - error: Request has invalid method. GET
2018-04-07T18:04:26.156Z - error: Invalid request IncomingMessage {
  _readableState: 
   ReadableState {
     objectMode: false,
     highWaterMark: 16384,
     buffer: BufferList { head: null, tail: null, length: 0 },
     length: 0,
     pipes: null,
     pipesCount: 0,
     flowing: null,
     ended: false,
     endEmitted: false,
     reading: false,
     sync: true,
     needReadable: false,
     emittedReadable: false,
     readableListening: false,
     resumeScheduled: false,
     destroyed: false,
     defaultEncoding: 'utf8',
     awaitDrain: 0,
     readingMore: true,
     decoder: null,
     encoding: null },
  readable: true,
  domain: null,
  _events: {},
  _eventsCount: 0,
  _maxListeners: undefined,
  socket: 
   Socket {
     connecting: false,
     _hadError: false,
     _handle: 
      TCP {
        reading: true,
        owner: [Circular],
        onread: [Function: onread],
        onconnection: null,
        writeQueueSize: 0,
        _consumed: true },
     _parent: null,
     _host: null,
     _readableState: 
      ReadableState {
        objectMode: false,
        highWaterMark: 16384,
        buffer: [Object],
        length: 0,
        pipes: null,
        pipesCount: 0,
        flowing: true,
        ended: false,
        endEmitted: false,
        reading: true,
        sync: false,
        needReadable: true,
        emittedReadable: false,
        readableListening: false,
        resumeScheduled: false,
        destroyed: false,
        defaultEncoding: 'utf8',
        awaitDrain: 0,
        readingMore: false,
        decoder: null,
        encoding: null },
     readable: true,
     domain: null,
     _events: 
      { end: [Array],
        finish: [Function: onSocketFinish],
        _socketEnd: [Function: onSocketEnd],
        drain: [Array],
        timeout: [Function: socketOnTimeout],
        data: [Function: bound socketOnData],
        error: [Function: socketOnError],
        close: [Array],
        resume: [Function: onSocketResume],
        pause: [Function: onSocketPause] },
     _eventsCount: 10,
     _maxListeners: undefined,
     _writableState: 
      WritableState {
        objectMode: false,
        highWaterMark: 16384,
        finalCalled: false,
        needDrain: false,
        ending: false,
        ended: false,
        finished: false,
        destroyed: false,
        decodeStrings: false,
        defaultEncoding: 'utf8',
        length: 0,
        writing: false,
        corked: 0,
        sync: true,
        bufferProcessing: false,
        onwrite: [Function: bound onwrite],
        writecb: null,
        writelen: 0,
        bufferedRequest: null,
        lastBufferedRequest: null,
        pendingcb: 0,
        prefinished: false,
        errorEmitted: false,
        bufferedRequestCount: 0,
        corkedRequestsFree: [Object] },
     writable: true,
     allowHalfOpen: true,
     _bytesDispatched: 0,
     _sockname: null,
     _pendingData: null,
     _pendingEncoding: '',
     server: 
      Server {
        domain: null,
        _events: [Object],
        _eventsCount: 2,
        _maxListeners: undefined,
        _connections: 1,
        _handle: [Object],
        _usingSlaves: false,
        _slaves: [],
        _unref: false,
        allowHalfOpen: true,
        pauseOnConnect: false,
        httpAllowHalfOpen: false,
        timeout: 120000,
        keepAliveTimeout: 5000,
        _pendingResponseData: 0,
        maxHeadersCount: null,
        _connectionKey: '4:127.0.0.1:0',
        [Symbol(asyncId)]: 9 },
     _server: 
      Server {
        domain: null,
        _events: [Object],
        _eventsCount: 2,
        _maxListeners: undefined,
        _connections: 1,
        _handle: [Object],
        _usingSlaves: false,
        _slaves: [],
        _unref: false,
        allowHalfOpen: true,
        pauseOnConnect: false,
        httpAllowHalfOpen: false,
        timeout: 120000,
        keepAliveTimeout: 5000,
        _pendingResponseData: 0,
        maxHeadersCount: null,
        _connectionKey: '4:127.0.0.1:0',
        [Symbol(asyncId)]: 9 },
     _idleTimeout: 120000,
     _idleNext: 
      TimersList {
        _idleNext: [Circular],
        _idlePrev: [Circular],
        _timer: [Object],
        _unrefed: true,
        msecs: 120000,
        nextTick: false },
     _idlePrev: 
      TimersList {
        _idleNext: [Circular],
        _idlePrev: [Circular],
        _timer: [Object],
        _unrefed: true,
        msecs: 120000,
        nextTick: false },
     _idleStart: 64683,
     _destroyed: false,
     parser: 
      HTTPParser {
        '0': [Function: parserOnHeaders],
        '1': [Function: parserOnHeadersComplete],
        '2': [Function: parserOnBody],
        '3': [Function: parserOnMessageComplete],
        '4': [Function: bound onParserExecute],
        _headers: [],
        _url: '',
        _consumed: true,
        socket: [Circular],
        incoming: [Circular],
        outgoing: null,
        maxHeaderPairs: 2000,
        onIncoming: [Function: bound parserOnIncoming] },
     on: [Function: socketOnWrap],
     _paused: false,
     read: [Function],
     _consuming: true,
     _httpMessage: 
      ServerResponse {
        domain: null,
        _events: [Object],
        _eventsCount: 1,
        _maxListeners: undefined,
        output: [],
        outputEncodings: [],
        outputCallbacks: [],
        outputSize: 0,
        writable: true,
        _last: false,
        upgrading: false,
        chunkedEncoding: false,
        shouldKeepAlive: false,
        useChunkedEncodingByDefault: true,
        sendDate: true,
        _removedConnection: false,
        _removedContLen: false,
        _removedTE: false,
        _contentLength: null,
        _hasBody: true,
        _trailer: '',
        finished: false,
        _headerSent: false,
        socket: [Circular],
        connection: [Circular],
        _header: null,
        _onPendingData: [Function: bound updateOutgoingData],
        _sent100: false,
        _expect_continue: false,
        req: [Circular],
        locals: {},
        [Symbol(outHeadersKey)]: [Object] },
     [Symbol(asyncId)]: 54,
     [Symbol(bytesRead)]: 0,
     [Symbol(asyncId)]: 55,
     [Symbol(triggerAsyncId)]: 9 },
  connection: 
   Socket {
     connecting: false,
     _hadError: false,
     _handle: 
      TCP {
        reading: true,
        owner: [Circular],
        onread: [Function: onread],
        onconnection: null,
        writeQueueSize: 0,
        _consumed: true },
     _parent: null,
     _host: null,
     _readableState: 
      ReadableState {
        objectMode: false,
        highWaterMark: 16384,
        buffer: [Object],
        length: 0,
        pipes: null,
        pipesCount: 0,
        flowing: true,
        ended: false,
        endEmitted: false,
        reading: true,
        sync: false,
        needReadable: true,
        emittedReadable: false,
        readableListening: false,
        resumeScheduled: false,
        destroyed: false,
        defaultEncoding: 'utf8',
        awaitDrain: 0,
        readingMore: false,
        decoder: null,
        encoding: null },
     readable: true,
     domain: null,
     _events: 
      { end: [Array],
        finish: [Function: onSocketFinish],
        _socketEnd: [Function: onSocketEnd],
        drain: [Array],
        timeout: [Function: socketOnTimeout],
        data: [Function: bound socketOnData],
        error: [Function: socketOnError],
        close: [Array],
        resume: [Function: onSocketResume],
        pause: [Function: onSocketPause] },
     _eventsCount: 10,
     _maxListeners: undefined,
     _writableState: 
      WritableState {
        objectMode: false,
        highWaterMark: 16384,
        finalCalled: false,
        needDrain: false,
        ending: false,
        ended: false,
        finished: false,
        destroyed: false,
        decodeStrings: false,
        defaultEncoding: 'utf8',
        length: 0,
        writing: false,
        corked: 0,
        sync: true,
        bufferProcessing: false,
        onwrite: [Function: bound onwrite],
        writecb: null,
        writelen: 0,
        bufferedRequest: null,
        lastBufferedRequest: null,
        pendingcb: 0,
        prefinished: false,
        errorEmitted: false,
        bufferedRequestCount: 0,
        corkedRequestsFree: [Object] },
     writable: true,
     allowHalfOpen: true,
     _bytesDispatched: 0,
     _sockname: null,
     _pendingData: null,
     _pendingEncoding: '',
     server: 
      Server {
        domain: null,
        _events: [Object],
        _eventsCount: 2,
        _maxListeners: undefined,
        _connections: 1,
        _handle: [Object],
        _usingSlaves: false,
        _slaves: [],
        _unref: false,
        allowHalfOpen: true,
        pauseOnConnect: false,
        httpAllowHalfOpen: false,
        timeout: 120000,
        keepAliveTimeout: 5000,
        _pendingResponseData: 0,
        maxHeadersCount: null,
        _connectionKey: '4:127.0.0.1:0',
        [Symbol(asyncId)]: 9 },
     _server: 
      Server {
        domain: null,
        _events: [Object],
        _eventsCount: 2,
        _maxListeners: undefined,
        _connections: 1,
        _handle: [Object],
        _usingSlaves: false,
        _slaves: [],
        _unref: false,
        allowHalfOpen: true,
        pauseOnConnect: false,
        httpAllowHalfOpen: false,
        timeout: 120000,
        keepAliveTimeout: 5000,
        _pendingResponseData: 0,
        maxHeadersCount: null,
        _connectionKey: '4:127.0.0.1:0',
        [Symbol(asyncId)]: 9 },
     _idleTimeout: 120000,
     _idleNext: 
      TimersList {
        _idleNext: [Circular],
        _idlePrev: [Circular],
        _timer: [Object],
        _unrefed: true,
        msecs: 120000,
        nextTick: false },
     _idlePrev: 
      TimersList {
        _idleNext: [Circular],
        _idlePrev: [Circular],
        _timer: [Object],
        _unrefed: true,
        msecs: 120000,
        nextTick: false },
     _idleStart: 64683,
     _destroyed: false,
     parser: 
      HTTPParser {
        '0': [Function: parserOnHeaders],
        '1': [Function: parserOnHeadersComplete],
        '2': [Function: parserOnBody],
        '3': [Function: parserOnMessageComplete],
        '4': [Function: bound onParserExecute],
        _headers: [],
        _url: '',
        _consumed: true,
        socket: [Circular],
        incoming: [Circular],
        outgoing: null,
        maxHeaderPairs: 2000,
        onIncoming: [Function: bound parserOnIncoming] },
     on: [Function: socketOnWrap],
     _paused: false,
     read: [Function],
     _consuming: true,
     _httpMessage: 
      ServerResponse {
        domain: null,
        _events: [Object],
        _eventsCount: 1,
        _maxListeners: undefined,
        output: [],
        outputEncodings: [],
        outputCallbacks: [],
        outputSize: 0,
        writable: true,
        _last: false,
        upgrading: false,
        chunkedEncoding: false,
        shouldKeepAlive: false,
        useChunkedEncodingByDefault: true,
        sendDate: true,
        _removedConnection: false,
        _removedContLen: false,
        _removedTE: false,
        _contentLength: null,
        _hasBody: true,
        _trailer: '',
        finished: false,
        _headerSent: false,
        socket: [Circular],
        connection: [Circular],
        _header: null,
        _onPendingData: [Function: bound updateOutgoingData],
        _sent100: false,
        _expect_continue: false,
        req: [Circular],
        locals: {},
        [Symbol(outHeadersKey)]: [Object] },
     [Symbol(asyncId)]: 54,
     [Symbol(bytesRead)]: 0,
     [Symbol(asyncId)]: 55,
     [Symbol(triggerAsyncId)]: 9 },
  httpVersionMajor: 1,
  httpVersionMinor: 1,
  httpVersion: '1.1',
  complete: false,
  headers: { connection: 'close', host: 'localhost:5000' },
  rawHeaders: [ 'connection', 'close', 'host', 'localhost:5000' ],
  trailers: {},
  rawTrailers: [],
  upgrade: false,
  url: '/',
  method: 'GET',
  statusCode: null,
  statusMessage: null,
  client: 
   Socket {
     connecting: false,
     _hadError: false,
     _handle: 
      TCP {
        reading: true,
        owner: [Circular],
        onread: [Function: onread],
        onconnection: null,
        writeQueueSize: 0,
        _consumed: true },
     _parent: null,
     _host: null,
     _readableState: 
      ReadableState {
        objectMode: false,
        highWaterMark: 16384,
        buffer: [Object],
        length: 0,
        pipes: null,
        pipesCount: 0,
        flowing: true,
        ended: false,
        endEmitted: false,
        reading: true,
        sync: false,
        needReadable: true,
        emittedReadable: false,
        readableListening: false,
        resumeScheduled: false,
        destroyed: false,
        defaultEncoding: 'utf8',
        awaitDrain: 0,
        readingMore: false,
        decoder: null,
        encoding: null },
     readable: true,
     domain: null,
     _events: 
      { end: [Array],
        finish: [Function: onSocketFinish],
        _socketEnd: [Function: onSocketEnd],
        drain: [Array],
        timeout: [Function: socketOnTimeout],
        data: [Function: bound socketOnData],
        error: [Function: socketOnError],
        close: [Array],
        resume: [Function: onSocketResume],
        pause: [Function: onSocketPause] },
     _eventsCount: 10,
     _maxListeners: undefined,
     _writableState: 
      WritableState {
        objectMode: false,
        highWaterMark: 16384,
        finalCalled: false,
        needDrain: false,
        ending: false,
        ended: false,
        finished: false,
        destroyed: false,
        decodeStrings: false,
        defaultEncoding: 'utf8',
        length: 0,
        writing: false,
        corked: 0,
        sync: true,
        bufferProcessing: false,
        onwrite: [Function: bound onwrite],
        writecb: null,
        writelen: 0,
        bufferedRequest: null,
        lastBufferedRequest: null,
        pendingcb: 0,
        prefinished: false,
        errorEmitted: false,
        bufferedRequestCount: 0,
        corkedRequestsFree: [Object] },
     writable: true,
     allowHalfOpen: true,
     _bytesDispatched: 0,
     _sockname: null,
     _pendingData: null,
     _pendingEncoding: '',
     server: 
      Server {
        domain: null,
        _events: [Object],
        _eventsCount: 2,
        _maxListeners: undefined,
        _connections: 1,
        _handle: [Object],
        _usingSlaves: false,
        _slaves: [],
        _unref: false,
        allowHalfOpen: true,
        pauseOnConnect: false,
        httpAllowHalfOpen: false,
        timeout: 120000,
        keepAliveTimeout: 5000,
        _pendingResponseData: 0,
        maxHeadersCount: null,
        _connectionKey: '4:127.0.0.1:0',
        [Symbol(asyncId)]: 9 },
     _server: 
      Server {
        domain: null,
        _events: [Object],
        _eventsCount: 2,
        _maxListeners: undefined,
        _connections: 1,
        _handle: [Object],
        _usingSlaves: false,
        _slaves: [],
        _unref: false,
        allowHalfOpen: true,
        pauseOnConnect: false,
        httpAllowHalfOpen: false,
        timeout: 120000,
        keepAliveTimeout: 5000,
        _pendingResponseData: 0,
        maxHeadersCount: null,
        _connectionKey: '4:127.0.0.1:0',
        [Symbol(asyncId)]: 9 },
     _idleTimeout: 120000,
     _idleNext: 
      TimersList {
        _idleNext: [Circular],
        _idlePrev: [Circular],
        _timer: [Object],
        _unrefed: true,
        msecs: 120000,
        nextTick: false },
     _idlePrev: 
      TimersList {
        _idleNext: [Circular],
        _idlePrev: [Circular],
        _timer: [Object],
        _unrefed: true,
        msecs: 120000,
        nextTick: false },
     _idleStart: 64683,
     _destroyed: false,
     parser: 
      HTTPParser {
        '0': [Function: parserOnHeaders],
        '1': [Function: parserOnHeadersComplete],
        '2': [Function: parserOnBody],
        '3': [Function: parserOnMessageComplete],
        '4': [Function: bound onParserExecute],
        _headers: [],
        _url: '',
        _consumed: true,
        socket: [Circular],
        incoming: [Circular],
        outgoing: null,
        maxHeaderPairs: 2000,
        onIncoming: [Function: bound parserOnIncoming] },
     on: [Function: socketOnWrap],
     _paused: false,
     read: [Function],
     _consuming: true,
     _httpMessage: 
      ServerResponse {
        domain: null,
        _events: [Object],
        _eventsCount: 1,
        _maxListeners: undefined,
        output: [],
        outputEncodings: [],
        outputCallbacks: [],
        outputSize: 0,
        writable: true,
        _last: false,
        upgrading: false,
        chunkedEncoding: false,
        shouldKeepAlive: false,
        useChunkedEncodingByDefault: true,
        sendDate: true,
        _removedConnection: false,
        _removedContLen: false,
        _removedTE: false,
        _contentLength: null,
        _hasBody: true,
        _trailer: '',
        finished: false,
        _headerSent: false,
        socket: [Circular],
        connection: [Circular],
        _header: null,
        _onPendingData: [Function: bound updateOutgoingData],
        _sent100: false,
        _expect_continue: false,
        req: [Circular],
        locals: {},
        [Symbol(outHeadersKey)]: [Object] },
     [Symbol(asyncId)]: 54,
     [Symbol(bytesRead)]: 0,
     [Symbol(asyncId)]: 55,
     [Symbol(triggerAsyncId)]: 9 },
  _consuming: false,
  _dumped: false,
  next: [Function: next],
  baseUrl: '',
  originalUrl: '/',
  _parsedUrl: 
   Url {
     protocol: null,
     slashes: null,
     auth: null,
     host: null,
     port: null,
     hostname: null,
     hash: null,
     search: null,
     query: null,
     pathname: '/',
     path: '/',
     href: '/',
     _raw: '/' },
  params: {},
  query: {},
  res: 
   ServerResponse {
     domain: null,
     _events: { finish: [Array] },
     _eventsCount: 1,
     _maxListeners: undefined,
     output: [],
     outputEncodings: [],
     outputCallbacks: [],
     outputSize: 0,
     writable: true,
     _last: false,
     upgrading: false,
     chunkedEncoding: false,
     shouldKeepAlive: false,
     useChunkedEncodingByDefault: true,
     sendDate: true,
     _removedConnection: false,
     _removedContLen: false,
     _removedTE: false,
     _contentLength: null,
     _hasBody: true,
     _trailer: '',
     finished: false,
     _headerSent: false,
     socket: 
      Socket {
        connecting: false,
        _hadError: false,
        _handle: [Object],
        _parent: null,
        _host: null,
        _readableState: [Object],
        readable: true,
        domain: null,
        _events: [Object],
        _eventsCount: 10,
        _maxListeners: undefined,
        _writableState: [Object],
        writable: true,
        allowHalfOpen: true,
        _bytesDispatched: 0,
        _sockname: null,
        _pendingData: null,
        _pendingEncoding: '',
        server: [Object],
        _server: [Object],
        _idleTimeout: 120000,
        _idleNext: [Object],
        _idlePrev: [Object],
        _idleStart: 64683,
        _destroyed: false,
        parser: [Object],
        on: [Function: socketOnWrap],
        _paused: false,
        read: [Function],
        _consuming: true,
        _httpMessage: [Circular],
        [Symbol(asyncId)]: 54,
        [Symbol(bytesRead)]: 0,
        [Symbol(asyncId)]: 55,
        [Symbol(triggerAsyncId)]: 9 },
     connection: 
      Socket {
        connecting: false,
        _hadError: false,
        _handle: [Object],
        _parent: null,
        _host: null,
        _readableState: [Object],
        readable: true,
        domain: null,
        _events: [Object],
        _eventsCount: 10,
        _maxListeners: undefined,
        _writableState: [Object],
        writable: true,
        allowHalfOpen: true,
        _bytesDispatched: 0,
        _sockname: null,
        _pendingData: null,
        _pendingEncoding: '',
        server: [Object],
        _server: [Object],
        _idleTimeout: 120000,
        _idleNext: [Object],
        _idlePrev: [Object],
        _idleStart: 64683,
        _destroyed: false,
        parser: [Object],
        on: [Function: socketOnWrap],
        _paused: false,
        read: [Function],
        _consuming: true,
        _httpMessage: [Circular],
        [Symbol(asyncId)]: 54,
        [Symbol(bytesRead)]: 0,
        [Symbol(asyncId)]: 55,
        [Symbol(triggerAsyncId)]: 9 },
     _header: null,
     _onPendingData: [Function: bound updateOutgoingData],
     _sent100: false,
     _expect_continue: false,
     req: [Circular],
     locals: {},
     [Symbol(outHeadersKey)]: 
      { 'x-powered-by': [Array],
        'cache-control': [Array],
        pragma: [Array],
        expires: [Array],
        vary: [Array] } },
  body: {} }
2018-04-07T18:04:26.159Z - info: Execution took 12 ms, user function completed successfully
2018-04-07T18:04:37.679Z - info: User function triggered, starting execution
2018-04-07T18:04:37.679Z - error: Request has invalid method. GET
2018-04-07T18:04:37.691Z - error: Invalid request IncomingMessage {
  _readableState: 
   ReadableState {
     objectMode: false,
     highWaterMark: 16384,
     buffer: BufferList { head: null, tail: null, length: 0 },
     length: 0,
     pipes: null,
     pipesCount: 0,
     flowing: null,
     ended: false,
     endEmitted: false,
     reading: false,
     sync: true,
     needReadable: false,
     emittedReadable: false,
     readableListening: false,
     resumeScheduled: false,
     destroyed: false,
     defaultEncoding: 'utf8',
     awaitDrain: 0,
     readingMore: true,
     decoder: null,
     encoding: null },
  readable: true,
  domain: null,
  _events: {},
  _eventsCount: 0,
  _maxListeners: undefined,
  socket: 
   Socket {
     connecting: false,
     _hadError: false,
     _handle: 
      TCP {
        reading: true,
        owner: [Circular],
        onread: [Function: onread],
        onconnection: null,
        writeQueueSize: 0,
        _consumed: true },
     _parent: null,
     _host: null,
     _readableState: 
      ReadableState {
        objectMode: false,
        highWaterMark: 16384,
        buffer: [Object],
        length: 0,
        pipes: null,
        pipesCount: 0,
        flowing: true,
        ended: false,
        endEmitted: false,
        reading: true,
        sync: false,
        needReadable: true,
        emittedReadable: false,
        readableListening: false,
        resumeScheduled: false,
        destroyed: false,
        defaultEncoding: 'utf8',
        awaitDrain: 0,
        readingMore: false,
        decoder: null,
        encoding: null },
     readable: true,
     domain: null,
     _events: 
      { end: [Array],
        finish: [Function: onSocketFinish],
        _socketEnd: [Function: onSocketEnd],
        drain: [Array],
        timeout: [Function: socketOnTimeout],
        data: [Function: bound socketOnData],
        error: [Function: socketOnError],
        close: [Array],
        resume: [Function: onSocketResume],
        pause: [Function: onSocketPause] },
     _eventsCount: 10,
     _maxListeners: undefined,
     _writableState: 
      WritableState {
        objectMode: false,
        highWaterMark: 16384,
        finalCalled: false,
        needDrain: false,
        ending: false,
        ended: false,
        finished: false,
        destroyed: false,
        decodeStrings: false,
        defaultEncoding: 'utf8',
        length: 0,
        writing: false,
        corked: 0,
        sync: true,
        bufferProcessing: false,
        onwrite: [Function: bound onwrite],
        writecb: null,
        writelen: 0,
        bufferedRequest: null,
        lastBufferedRequest: null,
        pendingcb: 0,
        prefinished: false,
        errorEmitted: false,
        bufferedRequestCount: 0,
        corkedRequestsFree: [Object] },
     writable: true,
     allowHalfOpen: true,
     _bytesDispatched: 0,
     _sockname: null,
     _pendingData: null,
     _pendingEncoding: '',
     server: 
      Server {
        domain: null,
        _events: [Object],
        _eventsCount: 2,
        _maxListeners: undefined,
        _connections: 1,
        _handle: [Object],
        _usingSlaves: false,
        _slaves: [],
        _unref: false,
        allowHalfOpen: true,
        pauseOnConnect: false,
        httpAllowHalfOpen: false,
        timeout: 120000,
        keepAliveTimeout: 5000,
        _pendingResponseData: 0,
        maxHeadersCount: null,
        _connectionKey: '4:127.0.0.1:0',
        [Symbol(asyncId)]: 9 },
     _server: 
      Server {
        domain: null,
        _events: [Object],
        _eventsCount: 2,
        _maxListeners: undefined,
        _connections: 1,
        _handle: [Object],
        _usingSlaves: false,
        _slaves: [],
        _unref: false,
        allowHalfOpen: true,
        pauseOnConnect: false,
        httpAllowHalfOpen: false,
        timeout: 120000,
        keepAliveTimeout: 5000,
        _pendingResponseData: 0,
        maxHeadersCount: null,
        _connectionKey: '4:127.0.0.1:0',
        [Symbol(asyncId)]: 9 },
     _idleTimeout: 120000,
     _idleNext: 
      TimersList {
        _idleNext: [Circular],
        _idlePrev: [Circular],
        _timer: [Object],
        _unrefed: true,
        msecs: 120000,
        nextTick: false },
     _idlePrev: 
      TimersList {
        _idleNext: [Circular],
        _idlePrev: [Circular],
        _timer: [Object],
        _unrefed: true,
        msecs: 120000,
        nextTick: false },
     _idleStart: 76218,
     _destroyed: false,
     parser: 
      HTTPParser {
        '0': [Function: parserOnHeaders],
        '1': [Function: parserOnHeadersComplete],
        '2': [Function: parserOnBody],
        '3': [Function: parserOnMessageComplete],
        '4': [Function: bound onParserExecute],
        _headers: [],
        _url: '',
        _consumed: true,
        socket: [Circular],
        incoming: [Circular],
        outgoing: null,
        maxHeaderPairs: 2000,
        onIncoming: [Function: bound parserOnIncoming] },
     on: [Function: socketOnWrap],
     _paused: false,
     read: [Function],
     _consuming: true,
     _httpMessage: 
      ServerResponse {
        domain: null,
        _events: [Object],
        _eventsCount: 1,
        _maxListeners: undefined,
        output: [],
        outputEncodings: [],
        outputCallbacks: [],
        outputSize: 0,
        writable: true,
        _last: false,
        upgrading: false,
        chunkedEncoding: false,
        shouldKeepAlive: false,
        useChunkedEncodingByDefault: true,
        sendDate: true,
        _removedConnection: false,
        _removedContLen: false,
        _removedTE: false,
        _contentLength: null,
        _hasBody: true,
        _trailer: '',
        finished: false,
        _headerSent: false,
        socket: [Circular],
        connection: [Circular],
        _header: null,
        _onPendingData: [Function: bound updateOutgoingData],
        _sent100: false,
        _expect_continue: false,
        req: [Circular],
        locals: {},
        [Symbol(outHeadersKey)]: [Object] },
     [Symbol(asyncId)]: 74,
     [Symbol(bytesRead)]: 0,
     [Symbol(asyncId)]: 75,
     [Symbol(triggerAsyncId)]: 9 },
  connection: 
   Socket {
     connecting: false,
     _hadError: false,
     _handle: 
      TCP {
        reading: true,
        owner: [Circular],
        onread: [Function: onread],
        onconnection: null,
        writeQueueSize: 0,
        _consumed: true },
     _parent: null,
     _host: null,
     _readableState: 
      ReadableState {
        objectMode: false,
        highWaterMark: 16384,
        buffer: [Object],
        length: 0,
        pipes: null,
        pipesCount: 0,
        flowing: true,
        ended: false,
        endEmitted: false,
        reading: true,
        sync: false,
        needReadable: true,
        emittedReadable: false,
        readableListening: false,
        resumeScheduled: false,
        destroyed: false,
        defaultEncoding: 'utf8',
        awaitDrain: 0,
        readingMore: false,
        decoder: null,
        encoding: null },
     readable: true,
     domain: null,
     _events: 
      { end: [Array],
        finish: [Function: onSocketFinish],
        _socketEnd: [Function: onSocketEnd],
        drain: [Array],
        timeout: [Function: socketOnTimeout],
        data: [Function: bound socketOnData],
        error: [Function: socketOnError],
        close: [Array],
        resume: [Function: onSocketResume],
        pause: [Function: onSocketPause] },
     _eventsCount: 10,
     _maxListeners: undefined,
     _writableState: 
      WritableState {
        objectMode: false,
        highWaterMark: 16384,
        finalCalled: false,
        needDrain: false,
        ending: false,
        ended: false,
        finished: false,
        destroyed: false,
        decodeStrings: false,
        defaultEncoding: 'utf8',
        length: 0,
        writing: false,
        corked: 0,
        sync: true,
        bufferProcessing: false,
        onwrite: [Function: bound onwrite],
        writecb: null,
        writelen: 0,
        bufferedRequest: null,
        lastBufferedRequest: null,
        pendingcb: 0,
        prefinished: false,
        errorEmitted: false,
        bufferedRequestCount: 0,
        corkedRequestsFree: [Object] },
     writable: true,
     allowHalfOpen: true,
     _bytesDispatched: 0,
     _sockname: null,
     _pendingData: null,
     _pendingEncoding: '',
     server: 
      Server {
        domain: null,
        _events: [Object],
        _eventsCount: 2,
        _maxListeners: undefined,
        _connections: 1,
        _handle: [Object],
        _usingSlaves: false,
        _slaves: [],
        _unref: false,
        allowHalfOpen: true,
        pauseOnConnect: false,
        httpAllowHalfOpen: false,
        timeout: 120000,
        keepAliveTimeout: 5000,
        _pendingResponseData: 0,
        maxHeadersCount: null,
        _connectionKey: '4:127.0.0.1:0',
        [Symbol(asyncId)]: 9 },
     _server: 
      Server {
        domain: null,
        _events: [Object],
        _eventsCount: 2,
        _maxListeners: undefined,
        _connections: 1,
        _handle: [Object],
        _usingSlaves: false,
        _slaves: [],
        _unref: false,
        allowHalfOpen: true,
        pauseOnConnect: false,
        httpAllowHalfOpen: false,
        timeout: 120000,
        keepAliveTimeout: 5000,
        _pendingResponseData: 0,
        maxHeadersCount: null,
        _connectionKey: '4:127.0.0.1:0',
        [Symbol(asyncId)]: 9 },
     _idleTimeout: 120000,
     _idleNext: 
      TimersList {
        _idleNext: [Circular],
        _idlePrev: [Circular],
        _timer: [Object],
        _unrefed: true,
        msecs: 120000,
        nextTick: false },
     _idlePrev: 
      TimersList {
        _idleNext: [Circular],
        _idlePrev: [Circular],
        _timer: [Object],
        _unrefed: true,
        msecs: 120000,
        nextTick: false },
     _idleStart: 76218,
     _destroyed: false,
     parser: 
      HTTPParser {
        '0': [Function: parserOnHeaders],
        '1': [Function: parserOnHeadersComplete],
        '2': [Function: parserOnBody],
        '3': [Function: parserOnMessageComplete],
        '4': [Function: bound onParserExecute],
        _headers: [],
        _url: '',
        _consumed: true,
        socket: [Circular],
        incoming: [Circular],
        outgoing: null,
        maxHeaderPairs: 2000,
        onIncoming: [Function: bound parserOnIncoming] },
     on: [Function: socketOnWrap],
     _paused: false,
     read: [Function],
     _consuming: true,
     _httpMessage: 
      ServerResponse {
        domain: null,
        _events: [Object],
        _eventsCount: 1,
        _maxListeners: undefined,
        output: [],
        outputEncodings: [],
        outputCallbacks: [],
        outputSize: 0,
        writable: true,
        _last: false,
        upgrading: false,
        chunkedEncoding: false,
        shouldKeepAlive: false,
        useChunkedEncodingByDefault: true,
        sendDate: true,
        _removedConnection: false,
        _removedContLen: false,
        _removedTE: false,
        _contentLength: null,
        _hasBody: true,
        _trailer: '',
        finished: false,
        _headerSent: false,
        socket: [Circular],
        connection: [Circular],
        _header: null,
        _onPendingData: [Function: bound updateOutgoingData],
        _sent100: false,
        _expect_continue: false,
        req: [Circular],
        locals: {},
        [Symbol(outHeadersKey)]: [Object] },
     [Symbol(asyncId)]: 74,
     [Symbol(bytesRead)]: 0,
     [Symbol(asyncId)]: 75,
     [Symbol(triggerAsyncId)]: 9 },
  httpVersionMajor: 1,
  httpVersionMinor: 1,
  httpVersion: '1.1',
  complete: false,
  headers: { connection: 'close', host: 'localhost:5000' },
  rawHeaders: [ 'connection', 'close', 'host', 'localhost:5000' ],
  trailers: {},
  rawTrailers: [],
  upgrade: false,
  url: '/',
  method: 'GET',
  statusCode: null,
  statusMessage: null,
  client: 
   Socket {
     connecting: false,
     _hadError: false,
     _handle: 
      TCP {
        reading: true,
        owner: [Circular],
        onread: [Function: onread],
        onconnection: null,
        writeQueueSize: 0,
        _consumed: true },
     _parent: null,
     _host: null,
     _readableState: 
      ReadableState {
        objectMode: false,
        highWaterMark: 16384,
        buffer: [Object],
        length: 0,
        pipes: null,
        pipesCount: 0,
        flowing: true,
        ended: false,
        endEmitted: false,
        reading: true,
        sync: false,
        needReadable: true,
        emittedReadable: false,
        readableListening: false,
        resumeScheduled: false,
        destroyed: false,
        defaultEncoding: 'utf8',
        awaitDrain: 0,
        readingMore: false,
        decoder: null,
        encoding: null },
     readable: true,
     domain: null,
     _events: 
      { end: [Array],
        finish: [Function: onSocketFinish],
        _socketEnd: [Function: onSocketEnd],
        drain: [Array],
        timeout: [Function: socketOnTimeout],
        data: [Function: bound socketOnData],
        error: [Function: socketOnError],
        close: [Array],
        resume: [Function: onSocketResume],
        pause: [Function: onSocketPause] },
     _eventsCount: 10,
     _maxListeners: undefined,
     _writableState: 
      WritableState {
        objectMode: false,
        highWaterMark: 16384,
        finalCalled: false,
        needDrain: false,
        ending: false,
        ended: false,
        finished: false,
        destroyed: false,
        decodeStrings: false,
        defaultEncoding: 'utf8',
        length: 0,
        writing: false,
        corked: 0,
        sync: true,
        bufferProcessing: false,
        onwrite: [Function: bound onwrite],
        writecb: null,
        writelen: 0,
        bufferedRequest: null,
        lastBufferedRequest: null,
        pendingcb: 0,
        prefinished: false,
        errorEmitted: false,
        bufferedRequestCount: 0,
        corkedRequestsFree: [Object] },
     writable: true,
     allowHalfOpen: true,
     _bytesDispatched: 0,
     _sockname: null,
     _pendingData: null,
     _pendingEncoding: '',
     server: 
      Server {
        domain: null,
        _events: [Object],
        _eventsCount: 2,
        _maxListeners: undefined,
        _connections: 1,
        _handle: [Object],
        _usingSlaves: false,
        _slaves: [],
        _unref: false,
        allowHalfOpen: true,
        pauseOnConnect: false,
        httpAllowHalfOpen: false,
        timeout: 120000,
        keepAliveTimeout: 5000,
        _pendingResponseData: 0,
        maxHeadersCount: null,
        _connectionKey: '4:127.0.0.1:0',
        [Symbol(asyncId)]: 9 },
     _server: 
      Server {
        domain: null,
        _events: [Object],
        _eventsCount: 2,
        _maxListeners: undefined,
        _connections: 1,
        _handle: [Object],
        _usingSlaves: false,
        _slaves: [],
        _unref: false,
        allowHalfOpen: true,
        pauseOnConnect: false,
        httpAllowHalfOpen: false,
        timeout: 120000,
        keepAliveTimeout: 5000,
        _pendingResponseData: 0,
        maxHeadersCount: null,
        _connectionKey: '4:127.0.0.1:0',
        [Symbol(asyncId)]: 9 },
     _idleTimeout: 120000,
     _idleNext: 
      TimersList {
        _idleNext: [Circular],
        _idlePrev: [Circular],
        _timer: [Object],
        _unrefed: true,
        msecs: 120000,
        nextTick: false },
     _idlePrev: 
      TimersList {
        _idleNext: [Circular],
        _idlePrev: [Circular],
        _timer: [Object],
        _unrefed: true,
        msecs: 120000,
        nextTick: false },
     _idleStart: 76218,
     _destroyed: false,
     parser: 
      HTTPParser {
        '0': [Function: parserOnHeaders],
        '1': [Function: parserOnHeadersComplete],
        '2': [Function: parserOnBody],
        '3': [Function: parserOnMessageComplete],
        '4': [Function: bound onParserExecute],
        _headers: [],
        _url: '',
        _consumed: true,
        socket: [Circular],
        incoming: [Circular],
        outgoing: null,
        maxHeaderPairs: 2000,
        onIncoming: [Function: bound parserOnIncoming] },
     on: [Function: socketOnWrap],
     _paused: false,
     read: [Function],
     _consuming: true,
     _httpMessage: 
      ServerResponse {
        domain: null,
        _events: [Object],
        _eventsCount: 1,
        _maxListeners: undefined,
        output: [],
        outputEncodings: [],
        outputCallbacks: [],
        outputSize: 0,
        writable: true,
        _last: false,
        upgrading: false,
        chunkedEncoding: false,
        shouldKeepAlive: false,
        useChunkedEncodingByDefault: true,
        sendDate: true,
        _removedConnection: false,
        _removedContLen: false,
        _removedTE: false,
        _contentLength: null,
        _hasBody: true,
        _trailer: '',
        finished: false,
        _headerSent: false,
        socket: [Circular],
        connection: [Circular],
        _header: null,
        _onPendingData: [Function: bound updateOutgoingData],
        _sent100: false,
        _expect_continue: false,
        req: [Circular],
        locals: {},
        [Symbol(outHeadersKey)]: [Object] },
     [Symbol(asyncId)]: 74,
     [Symbol(bytesRead)]: 0,
     [Symbol(asyncId)]: 75,
     [Symbol(triggerAsyncId)]: 9 },
  _consuming: false,
  _dumped: false,
  next: [Function: next],
  baseUrl: '',
  originalUrl: '/',
  _parsedUrl: 
   Url {
     protocol: null,
     slashes: null,
     auth: null,
     host: null,
     port: null,
     hostname: null,
     hash: null,
     search: null,
     query: null,
     pathname: '/',
     path: '/',
     href: '/',
     _raw: '/' },
  params: {},
  query: {},
  res: 
   ServerResponse {
     domain: null,
     _events: { finish: [Array] },
     _eventsCount: 1,
     _maxListeners: undefined,
     output: [],
     outputEncodings: [],
     outputCallbacks: [],
     outputSize: 0,
     writable: true,
     _last: false,
     upgrading: false,
     chunkedEncoding: false,
     shouldKeepAlive: false,
     useChunkedEncodingByDefault: true,
     sendDate: true,
     _removedConnection: false,
     _removedContLen: false,
     _removedTE: false,
     _contentLength: null,
     _hasBody: true,
     _trailer: '',
     finished: false,
     _headerSent: false,
     socket: 
      Socket {
        connecting: false,
        _hadError: false,
        _handle: [Object],
        _parent: null,
        _host: null,
        _readableState: [Object],
        readable: true,
        domain: null,
        _events: [Object],
        _eventsCount: 10,
        _maxListeners: undefined,
        _writableState: [Object],
        writable: true,
        allowHalfOpen: true,
        _bytesDispatched: 0,
        _sockname: null,
        _pendingData: null,
        _pendingEncoding: '',
        server: [Object],
        _server: [Object],
        _idleTimeout: 120000,
        _idleNext: [Object],
        _idlePrev: [Object],
        _idleStart: 76218,
        _destroyed: false,
        parser: [Object],
        on: [Function: socketOnWrap],
        _paused: false,
        read: [Function],
        _consuming: true,
        _httpMessage: [Circular],
        [Symbol(asyncId)]: 74,
        [Symbol(bytesRead)]: 0,
        [Symbol(asyncId)]: 75,
        [Symbol(triggerAsyncId)]: 9 },
     connection: 
      Socket {
        connecting: false,
        _hadError: false,
        _handle: [Object],
        _parent: null,
        _host: null,
        _readableState: [Object],
        readable: true,
        domain: null,
        _events: [Object],
        _eventsCount: 10,
        _maxListeners: undefined,
        _writableState: [Object],
        writable: true,
        allowHalfOpen: true,
        _bytesDispatched: 0,
        _sockname: null,
        _pendingData: null,
        _pendingEncoding: '',
        server: [Object],
        _server: [Object],
        _idleTimeout: 120000,
        _idleNext: [Object],
        _idlePrev: [Object],
        _idleStart: 76218,
        _destroyed: false,
        parser: [Object],
        on: [Function: socketOnWrap],
        _paused: false,
        read: [Function],
        _consuming: true,
        _httpMessage: [Circular],
        [Symbol(asyncId)]: 74,
        [Symbol(bytesRead)]: 0,
        [Symbol(asyncId)]: 75,
        [Symbol(triggerAsyncId)]: 9 },
     _header: null,
     _onPendingData: [Function: bound updateOutgoingData],
     _sent100: false,
     _expect_continue: false,
     req: [Circular],
     locals: {},
     [Symbol(outHeadersKey)]: 
      { 'x-powered-by': [Array],
        'cache-control': [Array],
        pragma: [Array],
        expires: [Array],
        vary: [Array] } },
  body: {} }
2018-04-07T18:04:37.694Z - info: Execution took 12 ms, user function completed successfully
2018-04-07T18:04:43.571Z - info: User function triggered, starting execution
2018-04-07T18:04:43.572Z - error: Request has invalid method. GET
2018-04-07T18:04:43.584Z - error: Invalid request IncomingMessage {
  _readableState: 
   ReadableState {
     objectMode: false,
     highWaterMark: 16384,
     buffer: BufferList { head: null, tail: null, length: 0 },
     length: 0,
     pipes: null,
     pipesCount: 0,
     flowing: null,
     ended: false,
     endEmitted: false,
     reading: false,
     sync: true,
     needReadable: false,
     emittedReadable: false,
     readableListening: false,
     resumeScheduled: false,
     destroyed: false,
     defaultEncoding: 'utf8',
     awaitDrain: 0,
     readingMore: true,
     decoder: null,
     encoding: null },
  readable: true,
  domain: null,
  _events: {},
  _eventsCount: 0,
  _maxListeners: undefined,
  socket: 
   Socket {
     connecting: false,
     _hadError: false,
     _handle: 
      TCP {
        reading: true,
        owner: [Circular],
        onread: [Function: onread],
        onconnection: null,
        writeQueueSize: 0,
        _consumed: true },
     _parent: null,
     _host: null,
     _readableState: 
      ReadableState {
        objectMode: false,
        highWaterMark: 16384,
        buffer: [Object],
        length: 0,
        pipes: null,
        pipesCount: 0,
        flowing: true,
        ended: false,
        endEmitted: false,
        reading: true,
        sync: false,
        needReadable: true,
        emittedReadable: false,
        readableListening: false,
        resumeScheduled: false,
        destroyed: false,
        defaultEncoding: 'utf8',
        awaitDrain: 0,
        readingMore: false,
        decoder: null,
        encoding: null },
     readable: true,
     domain: null,
     _events: 
      { end: [Array],
        finish: [Function: onSocketFinish],
        _socketEnd: [Function: onSocketEnd],
        drain: [Array],
        timeout: [Function: socketOnTimeout],
        data: [Function: bound socketOnData],
        error: [Function: socketOnError],
        close: [Array],
        resume: [Function: onSocketResume],
        pause: [Function: onSocketPause] },
     _eventsCount: 10,
     _maxListeners: undefined,
     _writableState: 
      WritableState {
        objectMode: false,
        highWaterMark: 16384,
        finalCalled: false,
        needDrain: false,
        ending: false,
        ended: false,
        finished: false,
        destroyed: false,
        decodeStrings: false,
        defaultEncoding: 'utf8',
        length: 0,
        writing: false,
        corked: 0,
        sync: true,
        bufferProcessing: false,
        onwrite: [Function: bound onwrite],
        writecb: null,
        writelen: 0,
        bufferedRequest: null,
        lastBufferedRequest: null,
        pendingcb: 0,
        prefinished: false,
        errorEmitted: false,
        bufferedRequestCount: 0,
        corkedRequestsFree: [Object] },
     writable: true,
     allowHalfOpen: true,
     _bytesDispatched: 0,
     _sockname: null,
     _pendingData: null,
     _pendingEncoding: '',
     server: 
      Server {
        domain: null,
        _events: [Object],
        _eventsCount: 2,
        _maxListeners: undefined,
        _connections: 1,
        _handle: [Object],
        _usingSlaves: false,
        _slaves: [],
        _unref: false,
        allowHalfOpen: true,
        pauseOnConnect: false,
        httpAllowHalfOpen: false,
        timeout: 120000,
        keepAliveTimeout: 5000,
        _pendingResponseData: 0,
        maxHeadersCount: null,
        _connectionKey: '4:127.0.0.1:0',
        [Symbol(asyncId)]: 9 },
     _server: 
      Server {
        domain: null,
        _events: [Object],
        _eventsCount: 2,
        _maxListeners: undefined,
        _connections: 1,
        _handle: [Object],
        _usingSlaves: false,
        _slaves: [],
        _unref: false,
        allowHalfOpen: true,
        pauseOnConnect: false,
        httpAllowHalfOpen: false,
        timeout: 120000,
        keepAliveTimeout: 5000,
        _pendingResponseData: 0,
        maxHeadersCount: null,
        _connectionKey: '4:127.0.0.1:0',
        [Symbol(asyncId)]: 9 },
     _idleTimeout: 120000,
     _idleNext: 
      TimersList {
        _idleNext: [Circular],
        _idlePrev: [Circular],
        _timer: [Object],
        _unrefed: true,
        msecs: 120000,
        nextTick: false },
     _idlePrev: 
      TimersList {
        _idleNext: [Circular],
        _idlePrev: [Circular],
        _timer: [Object],
        _unrefed: true,
        msecs: 120000,
        nextTick: false },
     _idleStart: 82111,
     _destroyed: false,
     parser: 
      HTTPParser {
        '0': [Function: parserOnHeaders],
        '1': [Function: parserOnHeadersComplete],
        '2': [Function: parserOnBody],
        '3': [Function: parserOnMessageComplete],
        '4': [Function: bound onParserExecute],
        _headers: [],
        _url: '',
        _consumed: true,
        socket: [Circular],
        incoming: [Circular],
        outgoing: null,
        maxHeaderPairs: 2000,
        onIncoming: [Function: bound parserOnIncoming] },
     on: [Function: socketOnWrap],
     _paused: false,
     read: [Function],
     _consuming: true,
     _httpMessage: 
      ServerResponse {
        domain: null,
        _events: [Object],
        _eventsCount: 1,
        _maxListeners: undefined,
        output: [],
        outputEncodings: [],
        outputCallbacks: [],
        outputSize: 0,
        writable: true,
        _last: false,
        upgrading: false,
        chunkedEncoding: false,
        shouldKeepAlive: false,
        useChunkedEncodingByDefault: true,
        sendDate: true,
        _removedConnection: false,
        _removedContLen: false,
        _removedTE: false,
        _contentLength: null,
        _hasBody: true,
        _trailer: '',
        finished: false,
        _headerSent: false,
        socket: [Circular],
        connection: [Circular],
        _header: null,
        _onPendingData: [Function: bound updateOutgoingData],
        _sent100: false,
        _expect_continue: false,
        req: [Circular],
        locals: {},
        [Symbol(outHeadersKey)]: [Object] },
     [Symbol(asyncId)]: 94,
     [Symbol(bytesRead)]: 0,
     [Symbol(asyncId)]: 95,
     [Symbol(triggerAsyncId)]: 9 },
  connection: 
   Socket {
     connecting: false,
     _hadError: false,
     _handle: 
      TCP {
        reading: true,
        owner: [Circular],
        onread: [Function: onread],
        onconnection: null,
        writeQueueSize: 0,
        _consumed: true },
     _parent: null,
     _host: null,
     _readableState: 
      ReadableState {
        objectMode: false,
        highWaterMark: 16384,
        buffer: [Object],
        length: 0,
        pipes: null,
        pipesCount: 0,
        flowing: true,
        ended: false,
        endEmitted: false,
        reading: true,
        sync: false,
        needReadable: true,
        emittedReadable: false,
        readableListening: false,
        resumeScheduled: false,
        destroyed: false,
        defaultEncoding: 'utf8',
        awaitDrain: 0,
        readingMore: false,
        decoder: null,
        encoding: null },
     readable: true,
     domain: null,
     _events: 
      { end: [Array],
        finish: [Function: onSocketFinish],
        _socketEnd: [Function: onSocketEnd],
        drain: [Array],
        timeout: [Function: socketOnTimeout],
        data: [Function: bound socketOnData],
        error: [Function: socketOnError],
        close: [Array],
        resume: [Function: onSocketResume],
        pause: [Function: onSocketPause] },
     _eventsCount: 10,
     _maxListeners: undefined,
     _writableState: 
      WritableState {
        objectMode: false,
        highWaterMark: 16384,
        finalCalled: false,
        needDrain: false,
        ending: false,
        ended: false,
        finished: false,
        destroyed: false,
        decodeStrings: false,
        defaultEncoding: 'utf8',
        length: 0,
        writing: false,
        corked: 0,
        sync: true,
        bufferProcessing: false,
        onwrite: [Function: bound onwrite],
        writecb: null,
        writelen: 0,
        bufferedRequest: null,
        lastBufferedRequest: null,
        pendingcb: 0,
        prefinished: false,
        errorEmitted: false,
        bufferedRequestCount: 0,
        corkedRequestsFree: [Object] },
     writable: true,
     allowHalfOpen: true,
     _bytesDispatched: 0,
     _sockname: null,
     _pendingData: null,
     _pendingEncoding: '',
     server: 
      Server {
        domain: null,
        _events: [Object],
        _eventsCount: 2,
        _maxListeners: undefined,
        _connections: 1,
        _handle: [Object],
        _usingSlaves: false,
        _slaves: [],
        _unref: false,
        allowHalfOpen: true,
        pauseOnConnect: false,
        httpAllowHalfOpen: false,
        timeout: 120000,
        keepAliveTimeout: 5000,
        _pendingResponseData: 0,
        maxHeadersCount: null,
        _connectionKey: '4:127.0.0.1:0',
        [Symbol(asyncId)]: 9 },
     _server: 
      Server {
        domain: null,
        _events: [Object],
        _eventsCount: 2,
        _maxListeners: undefined,
        _connections: 1,
        _handle: [Object],
        _usingSlaves: false,
        _slaves: [],
        _unref: false,
        allowHalfOpen: true,
        pauseOnConnect: false,
        httpAllowHalfOpen: false,
        timeout: 120000,
        keepAliveTimeout: 5000,
        _pendingResponseData: 0,
        maxHeadersCount: null,
        _connectionKey: '4:127.0.0.1:0',
        [Symbol(asyncId)]: 9 },
     _idleTimeout: 120000,
     _idleNext: 
      TimersList {
        _idleNext: [Circular],
        _idlePrev: [Circular],
        _timer: [Object],
        _unrefed: true,
        msecs: 120000,
        nextTick: false },
     _idlePrev: 
      TimersList {
        _idleNext: [Circular],
        _idlePrev: [Circular],
        _timer: [Object],
        _unrefed: true,
        msecs: 120000,
        nextTick: false },
     _idleStart: 82111,
     _destroyed: false,
     parser: 
      HTTPParser {
        '0': [Function: parserOnHeaders],
        '1': [Function: parserOnHeadersComplete],
        '2': [Function: parserOnBody],
        '3': [Function: parserOnMessageComplete],
        '4': [Function: bound onParserExecute],
        _headers: [],
        _url: '',
        _consumed: true,
        socket: [Circular],
        incoming: [Circular],
        outgoing: null,
        maxHeaderPairs: 2000,
        onIncoming: [Function: bound parserOnIncoming] },
     on: [Function: socketOnWrap],
     _paused: false,
     read: [Function],
     _consuming: true,
     _httpMessage: 
      ServerResponse {
        domain: null,
        _events: [Object],
        _eventsCount: 1,
        _maxListeners: undefined,
        output: [],
        outputEncodings: [],
        outputCallbacks: [],
        outputSize: 0,
        writable: true,
        _last: false,
        upgrading: false,
        chunkedEncoding: false,
        shouldKeepAlive: false,
        useChunkedEncodingByDefault: true,
        sendDate: true,
        _removedConnection: false,
        _removedContLen: false,
        _removedTE: false,
        _contentLength: null,
        _hasBody: true,
        _trailer: '',
        finished: false,
        _headerSent: false,
        socket: [Circular],
        connection: [Circular],
        _header: null,
        _onPendingData: [Function: bound updateOutgoingData],
        _sent100: false,
        _expect_continue: false,
        req: [Circular],
        locals: {},
        [Symbol(outHeadersKey)]: [Object] },
     [Symbol(asyncId)]: 94,
     [Symbol(bytesRead)]: 0,
     [Symbol(asyncId)]: 95,
     [Symbol(triggerAsyncId)]: 9 },
  httpVersionMajor: 1,
  httpVersionMinor: 1,
  httpVersion: '1.1',
  complete: false,
  headers: { connection: 'close', host: 'localhost:5000' },
  rawHeaders: [ 'connection', 'close', 'host', 'localhost:5000' ],
  trailers: {},
  rawTrailers: [],
  upgrade: false,
  url: '/',
  method: 'GET',
  statusCode: null,
  statusMessage: null,
  client: 
   Socket {
     connecting: false,
     _hadError: false,
     _handle: 
      TCP {
        reading: true,
        owner: [Circular],
        onread: [Function: onread],
        onconnection: null,
        writeQueueSize: 0,
        _consumed: true },
     _parent: null,
     _host: null,
     _readableState: 
      ReadableState {
        objectMode: false,
        highWaterMark: 16384,
        buffer: [Object],
        length: 0,
        pipes: null,
        pipesCount: 0,
        flowing: true,
        ended: false,
        endEmitted: false,
        reading: true,
        sync: false,
        needReadable: true,
        emittedReadable: false,
        readableListening: false,
        resumeScheduled: false,
        destroyed: false,
        defaultEncoding: 'utf8',
        awaitDrain: 0,
        readingMore: false,
        decoder: null,
        encoding: null },
     readable: true,
     domain: null,
     _events: 
      { end: [Array],
        finish: [Function: onSocketFinish],
        _socketEnd: [Function: onSocketEnd],
        drain: [Array],
        timeout: [Function: socketOnTimeout],
        data: [Function: bound socketOnData],
        error: [Function: socketOnError],
        close: [Array],
        resume: [Function: onSocketResume],
        pause: [Function: onSocketPause] },
     _eventsCount: 10,
     _maxListeners: undefined,
     _writableState: 
      WritableState {
        objectMode: false,
        highWaterMark: 16384,
        finalCalled: false,
        needDrain: false,
        ending: false,
        ended: false,
        finished: false,
        destroyed: false,
        decodeStrings: false,
        defaultEncoding: 'utf8',
        length: 0,
        writing: false,
        corked: 0,
        sync: true,
        bufferProcessing: false,
        onwrite: [Function: bound onwrite],
        writecb: null,
        writelen: 0,
        bufferedRequest: null,
        lastBufferedRequest: null,
        pendingcb: 0,
        prefinished: false,
        errorEmitted: false,
        bufferedRequestCount: 0,
        corkedRequestsFree: [Object] },
     writable: true,
     allowHalfOpen: true,
     _bytesDispatched: 0,
     _sockname: null,
     _pendingData: null,
     _pendingEncoding: '',
     server: 
      Server {
        domain: null,
        _events: [Object],
        _eventsCount: 2,
        _maxListeners: undefined,
        _connections: 1,
        _handle: [Object],
        _usingSlaves: false,
        _slaves: [],
        _unref: false,
        allowHalfOpen: true,
        pauseOnConnect: false,
        httpAllowHalfOpen: false,
        timeout: 120000,
        keepAliveTimeout: 5000,
        _pendingResponseData: 0,
        maxHeadersCount: null,
        _connectionKey: '4:127.0.0.1:0',
        [Symbol(asyncId)]: 9 },
     _server: 
      Server {
        domain: null,
        _events: [Object],
        _eventsCount: 2,
        _maxListeners: undefined,
        _connections: 1,
        _handle: [Object],
        _usingSlaves: false,
        _slaves: [],
        _unref: false,
        allowHalfOpen: true,
        pauseOnConnect: false,
        httpAllowHalfOpen: false,
        timeout: 120000,
        keepAliveTimeout: 5000,
        _pendingResponseData: 0,
        maxHeadersCount: null,
        _connectionKey: '4:127.0.0.1:0',
        [Symbol(asyncId)]: 9 },
     _idleTimeout: 120000,
     _idleNext: 
      TimersList {
        _idleNext: [Circular],
        _idlePrev: [Circular],
        _timer: [Object],
        _unrefed: true,
        msecs: 120000,
        nextTick: false },
     _idlePrev: 
      TimersList {
        _idleNext: [Circular],
        _idlePrev: [Circular],
        _timer: [Object],
        _unrefed: true,
        msecs: 120000,
        nextTick: false },
     _idleStart: 82111,
     _destroyed: false,
     parser: 
      HTTPParser {
        '0': [Function: parserOnHeaders],
        '1': [Function: parserOnHeadersComplete],
        '2': [Function: parserOnBody],
        '3': [Function: parserOnMessageComplete],
        '4': [Function: bound onParserExecute],
        _headers: [],
        _url: '',
        _consumed: true,
        socket: [Circular],
        incoming: [Circular],
        outgoing: null,
        maxHeaderPairs: 2000,
        onIncoming: [Function: bound parserOnIncoming] },
     on: [Function: socketOnWrap],
     _paused: false,
     read: [Function],
     _consuming: true,
     _httpMessage: 
      ServerResponse {
        domain: null,
        _events: [Object],
        _eventsCount: 1,
        _maxListeners: undefined,
        output: [],
        outputEncodings: [],
        outputCallbacks: [],
        outputSize: 0,
        writable: true,
        _last: false,
        upgrading: false,
        chunkedEncoding: false,
        shouldKeepAlive: false,
        useChunkedEncodingByDefault: true,
        sendDate: true,
        _removedConnection: false,
        _removedContLen: false,
        _removedTE: false,
        _contentLength: null,
        _hasBody: true,
        _trailer: '',
        finished: false,
        _headerSent: false,
        socket: [Circular],
        connection: [Circular],
        _header: null,
        _onPendingData: [Function: bound updateOutgoingData],
        _sent100: false,
        _expect_continue: false,
        req: [Circular],
        locals: {},
        [Symbol(outHeadersKey)]: [Object] },
     [Symbol(asyncId)]: 94,
     [Symbol(bytesRead)]: 0,
     [Symbol(asyncId)]: 95,
     [Symbol(triggerAsyncId)]: 9 },
  _consuming: false,
  _dumped: false,
  next: [Function: next],
  baseUrl: '',
  originalUrl: '/',
  _parsedUrl: 
   Url {
     protocol: null,
     slashes: null,
     auth: null,
     host: null,
     port: null,
     hostname: null,
     hash: null,
     search: null,
     query: null,
     pathname: '/',
     path: '/',
     href: '/',
     _raw: '/' },
  params: {},
  query: {},
  res: 
   ServerResponse {
     domain: null,
     _events: { finish: [Array] },
     _eventsCount: 1,
     _maxListeners: undefined,
     output: [],
     outputEncodings: [],
     outputCallbacks: [],
     outputSize: 0,
     writable: true,
     _last: false,
     upgrading: false,
     chunkedEncoding: false,
     shouldKeepAlive: false,
     useChunkedEncodingByDefault: true,
     sendDate: true,
     _removedConnection: false,
     _removedContLen: false,
     _removedTE: false,
     _contentLength: null,
     _hasBody: true,
     _trailer: '',
     finished: false,
     _headerSent: false,
     socket: 
      Socket {
        connecting: false,
        _hadError: false,
        _handle: [Object],
        _parent: null,
        _host: null,
        _readableState: [Object],
        readable: true,
        domain: null,
        _events: [Object],
        _eventsCount: 10,
        _maxListeners: undefined,
        _writableState: [Object],
        writable: true,
        allowHalfOpen: true,
        _bytesDispatched: 0,
        _sockname: null,
        _pendingData: null,
        _pendingEncoding: '',
        server: [Object],
        _server: [Object],
        _idleTimeout: 120000,
        _idleNext: [Object],
        _idlePrev: [Object],
        _idleStart: 82111,
        _destroyed: false,
        parser: [Object],
        on: [Function: socketOnWrap],
        _paused: false,
        read: [Function],
        _consuming: true,
        _httpMessage: [Circular],
        [Symbol(asyncId)]: 94,
        [Symbol(bytesRead)]: 0,
        [Symbol(asyncId)]: 95,
        [Symbol(triggerAsyncId)]: 9 },
     connection: 
      Socket {
        connecting: false,
        _hadError: false,
        _handle: [Object],
        _parent: null,
        _host: null,
        _readableState: [Object],
        readable: true,
        domain: null,
        _events: [Object],
        _eventsCount: 10,
        _maxListeners: undefined,
        _writableState: [Object],
        writable: true,
        allowHalfOpen: true,
        _bytesDispatched: 0,
        _sockname: null,
        _pendingData: null,
        _pendingEncoding: '',
        server: [Object],
        _server: [Object],
        _idleTimeout: 120000,
        _idleNext: [Object],
        _idlePrev: [Object],
        _idleStart: 82111,
        _destroyed: false,
        parser: [Object],
        on: [Function: socketOnWrap],
        _paused: false,
        read: [Function],
        _consuming: true,
        _httpMessage: [Circular],
        [Symbol(asyncId)]: 94,
        [Symbol(bytesRead)]: 0,
        [Symbol(asyncId)]: 95,
        [Symbol(triggerAsyncId)]: 9 },
     _header: null,
     _onPendingData: [Function: bound updateOutgoingData],
     _sent100: false,
     _expect_continue: false,
     req: [Circular],
     locals: {},
     [Symbol(outHeadersKey)]: 
      { 'x-powered-by': [Array],
        'cache-control': [Array],
        pragma: [Array],
        expires: [Array],
        vary: [Array] } },
  body: {} }
2018-04-07T18:04:43.586Z - info: Execution took 13 ms, user function completed successfully
2018-04-07T18:04:50.380Z - info: User function triggered, starting execution
2018-04-07T18:04:50.380Z - error: Request has invalid method. GET
2018-04-07T18:04:50.397Z - error: Invalid request IncomingMessage {
  _readableState: 
   ReadableState {
     objectMode: false,
     highWaterMark: 16384,
     buffer: BufferList { head: null, tail: null, length: 0 },
     length: 0,
     pipes: null,
     pipesCount: 0,
     flowing: null,
     ended: false,
     endEmitted: false,
     reading: false,
     sync: true,
     needReadable: false,
     emittedReadable: false,
     readableListening: false,
     resumeScheduled: false,
     destroyed: false,
     defaultEncoding: 'utf8',
     awaitDrain: 0,
     readingMore: true,
     decoder: null,
     encoding: null },
  readable: true,
  domain: null,
  _events: {},
  _eventsCount: 0,
  _maxListeners: undefined,
  socket: 
   Socket {
     connecting: false,
     _hadError: false,
     _handle: 
      TCP {
        reading: true,
        owner: [Circular],
        onread: [Function: onread],
        onconnection: null,
        writeQueueSize: 0,
        _consumed: true },
     _parent: null,
     _host: null,
     _readableState: 
      ReadableState {
        objectMode: false,
        highWaterMark: 16384,
        buffer: [Object],
        length: 0,
        pipes: null,
        pipesCount: 0,
        flowing: true,
        ended: false,
        endEmitted: false,
        reading: true,
        sync: false,
        needReadable: true,
        emittedReadable: false,
        readableListening: false,
        resumeScheduled: false,
        destroyed: false,
        defaultEncoding: 'utf8',
        awaitDrain: 0,
        readingMore: false,
        decoder: null,
        encoding: null },
     readable: true,
     domain: null,
     _events: 
      { end: [Array],
        finish: [Function: onSocketFinish],
        _socketEnd: [Function: onSocketEnd],
        drain: [Array],
        timeout: [Function: socketOnTimeout],
        data: [Function: bound socketOnData],
        error: [Function: socketOnError],
        close: [Array],
        resume: [Function: onSocketResume],
        pause: [Function: onSocketPause] },
     _eventsCount: 10,
     _maxListeners: undefined,
     _writableState: 
      WritableState {
        objectMode: false,
        highWaterMark: 16384,
        finalCalled: false,
        needDrain: false,
        ending: false,
        ended: false,
        finished: false,
        destroyed: false,
        decodeStrings: false,
        defaultEncoding: 'utf8',
        length: 0,
        writing: false,
        corked: 0,
        sync: true,
        bufferProcessing: false,
        onwrite: [Function: bound onwrite],
        writecb: null,
        writelen: 0,
        bufferedRequest: null,
        lastBufferedRequest: null,
        pendingcb: 0,
        prefinished: false,
        errorEmitted: false,
        bufferedRequestCount: 0,
        corkedRequestsFree: [Object] },
     writable: true,
     allowHalfOpen: true,
     _bytesDispatched: 0,
     _sockname: null,
     _pendingData: null,
     _pendingEncoding: '',
     server: 
      Server {
        domain: null,
        _events: [Object],
        _eventsCount: 2,
        _maxListeners: undefined,
        _connections: 1,
        _handle: [Object],
        _usingSlaves: false,
        _slaves: [],
        _unref: false,
        allowHalfOpen: true,
        pauseOnConnect: false,
        httpAllowHalfOpen: false,
        timeout: 120000,
        keepAliveTimeout: 5000,
        _pendingResponseData: 0,
        maxHeadersCount: null,
        _connectionKey: '4:127.0.0.1:0',
        [Symbol(asyncId)]: 9 },
     _server: 
      Server {
        domain: null,
        _events: [Object],
        _eventsCount: 2,
        _maxListeners: undefined,
        _connections: 1,
        _handle: [Object],
        _usingSlaves: false,
        _slaves: [],
        _unref: false,
        allowHalfOpen: true,
        pauseOnConnect: false,
        httpAllowHalfOpen: false,
        timeout: 120000,
        keepAliveTimeout: 5000,
        _pendingResponseData: 0,
        maxHeadersCount: null,
        _connectionKey: '4:127.0.0.1:0',
        [Symbol(asyncId)]: 9 },
     _idleTimeout: 120000,
     _idleNext: 
      TimersList {
        _idleNext: [Circular],
        _idlePrev: [Circular],
        _timer: [Object],
        _unrefed: true,
        msecs: 120000,
        nextTick: false },
     _idlePrev: 
      TimersList {
        _idleNext: [Circular],
        _idlePrev: [Circular],
        _timer: [Object],
        _unrefed: true,
        msecs: 120000,
        nextTick: false },
     _idleStart: 88919,
     _destroyed: false,
     parser: 
      HTTPParser {
        '0': [Function: parserOnHeaders],
        '1': [Function: parserOnHeadersComplete],
        '2': [Function: parserOnBody],
        '3': [Function: parserOnMessageComplete],
        '4': [Function: bound onParserExecute],
        _headers: [],
        _url: '',
        _consumed: true,
        socket: [Circular],
        incoming: [Circular],
        outgoing: null,
        maxHeaderPairs: 2000,
        onIncoming: [Function: bound parserOnIncoming] },
     on: [Function: socketOnWrap],
     _paused: false,
     read: [Function],
     _consuming: true,
     _httpMessage: 
      ServerResponse {
        domain: null,
        _events: [Object],
        _eventsCount: 1,
        _maxListeners: undefined,
        output: [],
        outputEncodings: [],
        outputCallbacks: [],
        outputSize: 0,
        writable: true,
        _last: false,
        upgrading: false,
        chunkedEncoding: false,
        shouldKeepAlive: false,
        useChunkedEncodingByDefault: true,
        sendDate: true,
        _removedConnection: false,
        _removedContLen: false,
        _removedTE: false,
        _contentLength: null,
        _hasBody: true,
        _trailer: '',
        finished: false,
        _headerSent: false,
        socket: [Circular],
        connection: [Circular],
        _header: null,
        _onPendingData: [Function: bound updateOutgoingData],
        _sent100: false,
        _expect_continue: false,
        req: [Circular],
        locals: {},
        [Symbol(outHeadersKey)]: [Object] },
     [Symbol(asyncId)]: 114,
     [Symbol(bytesRead)]: 0,
     [Symbol(asyncId)]: 115,
     [Symbol(triggerAsyncId)]: 9 },
  connection: 
   Socket {
     connecting: false,
     _hadError: false,
     _handle: 
      TCP {
        reading: true,
        owner: [Circular],
        onread: [Function: onread],
        onconnection: null,
        writeQueueSize: 0,
        _consumed: true },
     _parent: null,
     _host: null,
     _readableState: 
      ReadableState {
        objectMode: false,
        highWaterMark: 16384,
        buffer: [Object],
        length: 0,
        pipes: null,
        pipesCount: 0,
        flowing: true,
        ended: false,
        endEmitted: false,
        reading: true,
        sync: false,
        needReadable: true,
        emittedReadable: false,
        readableListening: false,
        resumeScheduled: false,
        destroyed: false,
        defaultEncoding: 'utf8',
        awaitDrain: 0,
        readingMore: false,
        decoder: null,
        encoding: null },
     readable: true,
     domain: null,
     _events: 
      { end: [Array],
        finish: [Function: onSocketFinish],
        _socketEnd: [Function: onSocketEnd],
        drain: [Array],
        timeout: [Function: socketOnTimeout],
        data: [Function: bound socketOnData],
        error: [Function: socketOnError],
        close: [Array],
        resume: [Function: onSocketResume],
        pause: [Function: onSocketPause] },
     _eventsCount: 10,
     _maxListeners: undefined,
     _writableState: 
      WritableState {
        objectMode: false,
        highWaterMark: 16384,
        finalCalled: false,
        needDrain: false,
        ending: false,
        ended: false,
        finished: false,
        destroyed: false,
        decodeStrings: false,
        defaultEncoding: 'utf8',
        length: 0,
        writing: false,
        corked: 0,
        sync: true,
        bufferProcessing: false,
        onwrite: [Function: bound onwrite],
        writecb: null,
        writelen: 0,
        bufferedRequest: null,
        lastBufferedRequest: null,
        pendingcb: 0,
        prefinished: false,
        errorEmitted: false,
        bufferedRequestCount: 0,
        corkedRequestsFree: [Object] },
     writable: true,
     allowHalfOpen: true,
     _bytesDispatched: 0,
     _sockname: null,
     _pendingData: null,
     _pendingEncoding: '',
     server: 
      Server {
        domain: null,
        _events: [Object],
        _eventsCount: 2,
        _maxListeners: undefined,
        _connections: 1,
        _handle: [Object],
        _usingSlaves: false,
        _slaves: [],
        _unref: false,
        allowHalfOpen: true,
        pauseOnConnect: false,
        httpAllowHalfOpen: false,
        timeout: 120000,
        keepAliveTimeout: 5000,
        _pendingResponseData: 0,
        maxHeadersCount: null,
        _connectionKey: '4:127.0.0.1:0',
        [Symbol(asyncId)]: 9 },
     _server: 
      Server {
        domain: null,
        _events: [Object],
        _eventsCount: 2,
        _maxListeners: undefined,
        _connections: 1,
        _handle: [Object],
        _usingSlaves: false,
        _slaves: [],
        _unref: false,
        allowHalfOpen: true,
        pauseOnConnect: false,
        httpAllowHalfOpen: false,
        timeout: 120000,
        keepAliveTimeout: 5000,
        _pendingResponseData: 0,
        maxHeadersCount: null,
        _connectionKey: '4:127.0.0.1:0',
        [Symbol(asyncId)]: 9 },
     _idleTimeout: 120000,
     _idleNext: 
      TimersList {
        _idleNext: [Circular],
        _idlePrev: [Circular],
        _timer: [Object],
        _unrefed: true,
        msecs: 120000,
        nextTick: false },
     _idlePrev: 
      TimersList {
        _idleNext: [Circular],
        _idlePrev: [Circular],
        _timer: [Object],
        _unrefed: true,
        msecs: 120000,
        nextTick: false },
     _idleStart: 88919,
     _destroyed: false,
     parser: 
      HTTPParser {
        '0': [Function: parserOnHeaders],
        '1': [Function: parserOnHeadersComplete],
        '2': [Function: parserOnBody],
        '3': [Function: parserOnMessageComplete],
        '4': [Function: bound onParserExecute],
        _headers: [],
        _url: '',
        _consumed: true,
        socket: [Circular],
        incoming: [Circular],
        outgoing: null,
        maxHeaderPairs: 2000,
        onIncoming: [Function: bound parserOnIncoming] },
     on: [Function: socketOnWrap],
     _paused: false,
     read: [Function],
     _consuming: true,
     _httpMessage: 
      ServerResponse {
        domain: null,
        _events: [Object],
        _eventsCount: 1,
        _maxListeners: undefined,
        output: [],
        outputEncodings: [],
        outputCallbacks: [],
        outputSize: 0,
        writable: true,
        _last: false,
        upgrading: false,
        chunkedEncoding: false,
        shouldKeepAlive: false,
        useChunkedEncodingByDefault: true,
        sendDate: true,
        _removedConnection: false,
        _removedContLen: false,
        _removedTE: false,
        _contentLength: null,
        _hasBody: true,
        _trailer: '',
        finished: false,
        _headerSent: false,
        socket: [Circular],
        connection: [Circular],
        _header: null,
        _onPendingData: [Function: bound updateOutgoingData],
        _sent100: false,
        _expect_continue: false,
        req: [Circular],
        locals: {},
        [Symbol(outHeadersKey)]: [Object] },
     [Symbol(asyncId)]: 114,
     [Symbol(bytesRead)]: 0,
     [Symbol(asyncId)]: 115,
     [Symbol(triggerAsyncId)]: 9 },
  httpVersionMajor: 1,
  httpVersionMinor: 1,
  httpVersion: '1.1',
  complete: false,
  headers: { connection: 'close', host: 'localhost:5000' },
  rawHeaders: [ 'connection', 'close', 'host', 'localhost:5000' ],
  trailers: {},
  rawTrailers: [],
  upgrade: false,
  url: '/',
  method: 'GET',
  statusCode: null,
  statusMessage: null,
  client: 
   Socket {
     connecting: false,
     _hadError: false,
     _handle: 
      TCP {
        reading: true,
        owner: [Circular],
        onread: [Function: onread],
        onconnection: null,
        writeQueueSize: 0,
        _consumed: true },
     _parent: null,
     _host: null,
     _readableState: 
      ReadableState {
        objectMode: false,
        highWaterMark: 16384,
        buffer: [Object],
        length: 0,
        pipes: null,
        pipesCount: 0,
        flowing: true,
        ended: false,
        endEmitted: false,
        reading: true,
        sync: false,
        needReadable: true,
        emittedReadable: false,
        readableListening: false,
        resumeScheduled: false,
        destroyed: false,
        defaultEncoding: 'utf8',
        awaitDrain: 0,
        readingMore: false,
        decoder: null,
        encoding: null },
     readable: true,
     domain: null,
     _events: 
      { end: [Array],
        finish: [Function: onSocketFinish],
        _socketEnd: [Function: onSocketEnd],
        drain: [Array],
        timeout: [Function: socketOnTimeout],
        data: [Function: bound socketOnData],
        error: [Function: socketOnError],
        close: [Array],
        resume: [Function: onSocketResume],
        pause: [Function: onSocketPause] },
     _eventsCount: 10,
     _maxListeners: undefined,
     _writableState: 
      WritableState {
        objectMode: false,
        highWaterMark: 16384,
        finalCalled: false,
        needDrain: false,
        ending: false,
        ended: false,
        finished: false,
        destroyed: false,
        decodeStrings: false,
        defaultEncoding: 'utf8',
        length: 0,
        writing: false,
        corked: 0,
        sync: true,
        bufferProcessing: false,
        onwrite: [Function: bound onwrite],
        writecb: null,
        writelen: 0,
        bufferedRequest: null,
        lastBufferedRequest: null,
        pendingcb: 0,
        prefinished: false,
        errorEmitted: false,
        bufferedRequestCount: 0,
        corkedRequestsFree: [Object] },
     writable: true,
     allowHalfOpen: true,
     _bytesDispatched: 0,
     _sockname: null,
     _pendingData: null,
     _pendingEncoding: '',
     server: 
      Server {
        domain: null,
        _events: [Object],
        _eventsCount: 2,
        _maxListeners: undefined,
        _connections: 1,
        _handle: [Object],
        _usingSlaves: false,
        _slaves: [],
        _unref: false,
        allowHalfOpen: true,
        pauseOnConnect: false,
        httpAllowHalfOpen: false,
        timeout: 120000,
        keepAliveTimeout: 5000,
        _pendingResponseData: 0,
        maxHeadersCount: null,
        _connectionKey: '4:127.0.0.1:0',
        [Symbol(asyncId)]: 9 },
     _server: 
      Server {
        domain: null,
        _events: [Object],
        _eventsCount: 2,
        _maxListeners: undefined,
        _connections: 1,
        _handle: [Object],
        _usingSlaves: false,
        _slaves: [],
        _unref: false,
        allowHalfOpen: true,
        pauseOnConnect: false,
        httpAllowHalfOpen: false,
        timeout: 120000,
        keepAliveTimeout: 5000,
        _pendingResponseData: 0,
        maxHeadersCount: null,
        _connectionKey: '4:127.0.0.1:0',
        [Symbol(asyncId)]: 9 },
     _idleTimeout: 120000,
     _idleNext: 
      TimersList {
        _idleNext: [Circular],
        _idlePrev: [Circular],
        _timer: [Object],
        _unrefed: true,
        msecs: 120000,
        nextTick: false },
     _idlePrev: 
      TimersList {
        _idleNext: [Circular],
        _idlePrev: [Circular],
        _timer: [Object],
        _unrefed: true,
        msecs: 120000,
        nextTick: false },
     _idleStart: 88919,
     _destroyed: false,
     parser: 
      HTTPParser {
        '0': [Function: parserOnHeaders],
        '1': [Function: parserOnHeadersComplete],
        '2': [Function: parserOnBody],
        '3': [Function: parserOnMessageComplete],
        '4': [Function: bound onParserExecute],
        _headers: [],
        _url: '',
        _consumed: true,
        socket: [Circular],
        incoming: [Circular],
        outgoing: null,
        maxHeaderPairs: 2000,
        onIncoming: [Function: bound parserOnIncoming] },
     on: [Function: socketOnWrap],
     _paused: false,
     read: [Function],
     _consuming: true,
     _httpMessage: 
      ServerResponse {
        domain: null,
        _events: [Object],
        _eventsCount: 1,
        _maxListeners: undefined,
        output: [],
        outputEncodings: [],
        outputCallbacks: [],
        outputSize: 0,
        writable: true,
        _last: false,
        upgrading: false,
        chunkedEncoding: false,
        shouldKeepAlive: false,
        useChunkedEncodingByDefault: true,
        sendDate: true,
        _removedConnection: false,
        _removedContLen: false,
        _removedTE: false,
        _contentLength: null,
        _hasBody: true,
        _trailer: '',
        finished: false,
        _headerSent: false,
        socket: [Circular],
        connection: [Circular],
        _header: null,
        _onPendingData: [Function: bound updateOutgoingData],
        _sent100: false,
        _expect_continue: false,
        req: [Circular],
        locals: {},
        [Symbol(outHeadersKey)]: [Object] },
     [Symbol(asyncId)]: 114,
     [Symbol(bytesRead)]: 0,
     [Symbol(asyncId)]: 115,
     [Symbol(triggerAsyncId)]: 9 },
  _consuming: false,
  _dumped: false,
  next: [Function: next],
  baseUrl: '',
  originalUrl: '/',
  _parsedUrl: 
   Url {
     protocol: null,
     slashes: null,
     auth: null,
     host: null,
     port: null,
     hostname: null,
     hash: null,
     search: null,
     query: null,
     pathname: '/',
     path: '/',
     href: '/',
     _raw: '/' },
  params: {},
  query: {},
  res: 
   ServerResponse {
     domain: null,
     _events: { finish: [Array] },
     _eventsCount: 1,
     _maxListeners: undefined,
     output: [],
     outputEncodings: [],
     outputCallbacks: [],
     outputSize: 0,
     writable: true,
     _last: false,
     upgrading: false,
     chunkedEncoding: false,
     shouldKeepAlive: false,
     useChunkedEncodingByDefault: true,
     sendDate: true,
     _removedConnection: false,
     _removedContLen: false,
     _removedTE: false,
     _contentLength: null,
     _hasBody: true,
     _trailer: '',
     finished: false,
     _headerSent: false,
     socket: 
      Socket {
        connecting: false,
        _hadError: false,
        _handle: [Object],
        _parent: null,
        _host: null,
        _readableState: [Object],
        readable: true,
        domain: null,
        _events: [Object],
        _eventsCount: 10,
        _maxListeners: undefined,
        _writableState: [Object],
        writable: true,
        allowHalfOpen: true,
        _bytesDispatched: 0,
        _sockname: null,
        _pendingData: null,
        _pendingEncoding: '',
        server: [Object],
        _server: [Object],
        _idleTimeout: 120000,
        _idleNext: [Object],
        _idlePrev: [Object],
        _idleStart: 88919,
        _destroyed: false,
        parser: [Object],
        on: [Function: socketOnWrap],
        _paused: false,
        read: [Function],
        _consuming: true,
        _httpMessage: [Circular],
        [Symbol(asyncId)]: 114,
        [Symbol(bytesRead)]: 0,
        [Symbol(asyncId)]: 115,
        [Symbol(triggerAsyncId)]: 9 },
     connection: 
      Socket {
        connecting: false,
        _hadError: false,
        _handle: [Object],
        _parent: null,
        _host: null,
        _readableState: [Object],
        readable: true,
        domain: null,
        _events: [Object],
        _eventsCount: 10,
        _maxListeners: undefined,
        _writableState: [Object],
        writable: true,
        allowHalfOpen: true,
        _bytesDispatched: 0,
        _sockname: null,
        _pendingData: null,
        _pendingEncoding: '',
        server: [Object],
        _server: [Object],
        _idleTimeout: 120000,
        _idleNext: [Object],
        _idlePrev: [Object],
        _idleStart: 88919,
        _destroyed: false,
        parser: [Object],
        on: [Function: socketOnWrap],
        _paused: false,
        read: [Function],
        _consuming: true,
        _httpMessage: [Circular],
        [Symbol(asyncId)]: 114,
        [Symbol(bytesRead)]: 0,
        [Symbol(asyncId)]: 115,
        [Symbol(triggerAsyncId)]: 9 },
     _header: null,
     _onPendingData: [Function: bound updateOutgoingData],
     _sent100: false,
     _expect_continue: false,
     req: [Circular],
     locals: {},
     [Symbol(outHeadersKey)]: 
      { 'x-powered-by': [Array],
        'cache-control': [Array],
        pragma: [Array],
        expires: [Array],
        vary: [Array] } },
  body: {} }
2018-04-07T18:04:50.402Z - info: Execution took 18 ms, user function completed successfully
2018-04-07T18:04:53.794Z - info: User function triggered, starting execution
2018-04-07T18:04:53.794Z - error: Request has invalid method. GET
2018-04-07T18:04:53.805Z - error: Invalid request IncomingMessage {
  _readableState: 
   ReadableState {
     objectMode: false,
     highWaterMark: 16384,
     buffer: BufferList { head: null, tail: null, length: 0 },
     length: 0,
     pipes: null,
     pipesCount: 0,
     flowing: null,
     ended: false,
     endEmitted: false,
     reading: false,
     sync: true,
     needReadable: false,
     emittedReadable: false,
     readableListening: false,
     resumeScheduled: false,
     destroyed: false,
     defaultEncoding: 'utf8',
     awaitDrain: 0,
     readingMore: true,
     decoder: null,
     encoding: null },
  readable: true,
  domain: null,
  _events: {},
  _eventsCount: 0,
  _maxListeners: undefined,
  socket: 
   Socket {
     connecting: false,
     _hadError: false,
     _handle: 
      TCP {
        reading: true,
        owner: [Circular],
        onread: [Function: onread],
        onconnection: null,
        writeQueueSize: 0,
        _consumed: true },
     _parent: null,
     _host: null,
     _readableState: 
      ReadableState {
        objectMode: false,
        highWaterMark: 16384,
        buffer: [Object],
        length: 0,
        pipes: null,
        pipesCount: 0,
        flowing: true,
        ended: false,
        endEmitted: false,
        reading: true,
        sync: false,
        needReadable: true,
        emittedReadable: false,
        readableListening: false,
        resumeScheduled: false,
        destroyed: false,
        defaultEncoding: 'utf8',
        awaitDrain: 0,
        readingMore: false,
        decoder: null,
        encoding: null },
     readable: true,
     domain: null,
     _events: 
      { end: [Array],
        finish: [Function: onSocketFinish],
        _socketEnd: [Function: onSocketEnd],
        drain: [Array],
        timeout: [Function: socketOnTimeout],
        data: [Function: bound socketOnData],
        error: [Function: socketOnError],
        close: [Array],
        resume: [Function: onSocketResume],
        pause: [Function: onSocketPause] },
     _eventsCount: 10,
     _maxListeners: undefined,
     _writableState: 
      WritableState {
        objectMode: false,
        highWaterMark: 16384,
        finalCalled: false,
        needDrain: false,
        ending: false,
        ended: false,
        finished: false,
        destroyed: false,
        decodeStrings: false,
        defaultEncoding: 'utf8',
        length: 0,
        writing: false,
        corked: 0,
        sync: true,
        bufferProcessing: false,
        onwrite: [Function: bound onwrite],
        writecb: null,
        writelen: 0,
        bufferedRequest: null,
        lastBufferedRequest: null,
        pendingcb: 0,
        prefinished: false,
        errorEmitted: false,
        bufferedRequestCount: 0,
        corkedRequestsFree: [Object] },
     writable: true,
     allowHalfOpen: true,
     _bytesDispatched: 0,
     _sockname: null,
     _pendingData: null,
     _pendingEncoding: '',
     server: 
      Server {
        domain: null,
        _events: [Object],
        _eventsCount: 2,
        _maxListeners: undefined,
        _connections: 1,
        _handle: [Object],
        _usingSlaves: false,
        _slaves: [],
        _unref: false,
        allowHalfOpen: true,
        pauseOnConnect: false,
        httpAllowHalfOpen: false,
        timeout: 120000,
        keepAliveTimeout: 5000,
        _pendingResponseData: 0,
        maxHeadersCount: null,
        _connectionKey: '4:127.0.0.1:0',
        [Symbol(asyncId)]: 9 },
     _server: 
      Server {
        domain: null,
        _events: [Object],
        _eventsCount: 2,
        _maxListeners: undefined,
        _connections: 1,
        _handle: [Object],
        _usingSlaves: false,
        _slaves: [],
        _unref: false,
        allowHalfOpen: true,
        pauseOnConnect: false,
        httpAllowHalfOpen: false,
        timeout: 120000,
        keepAliveTimeout: 5000,
        _pendingResponseData: 0,
        maxHeadersCount: null,
        _connectionKey: '4:127.0.0.1:0',
        [Symbol(asyncId)]: 9 },
     _idleTimeout: 120000,
     _idleNext: 
      TimersList {
        _idleNext: [Circular],
        _idlePrev: [Circular],
        _timer: [Object],
        _unrefed: true,
        msecs: 120000,
        nextTick: false },
     _idlePrev: 
      TimersList {
        _idleNext: [Circular],
        _idlePrev: [Circular],
        _timer: [Object],
        _unrefed: true,
        msecs: 120000,
        nextTick: false },
     _idleStart: 92333,
     _destroyed: false,
     parser: 
      HTTPParser {
        '0': [Function: parserOnHeaders],
        '1': [Function: parserOnHeadersComplete],
        '2': [Function: parserOnBody],
        '3': [Function: parserOnMessageComplete],
        '4': [Function: bound onParserExecute],
        _headers: [],
        _url: '',
        _consumed: true,
        socket: [Circular],
        incoming: [Circular],
        outgoing: null,
        maxHeaderPairs: 2000,
        onIncoming: [Function: bound parserOnIncoming] },
     on: [Function: socketOnWrap],
     _paused: false,
     read: [Function],
     _consuming: true,
     _httpMessage: 
      ServerResponse {
        domain: null,
        _events: [Object],
        _eventsCount: 1,
        _maxListeners: undefined,
        output: [],
        outputEncodings: [],
        outputCallbacks: [],
        outputSize: 0,
        writable: true,
        _last: false,
        upgrading: false,
        chunkedEncoding: false,
        shouldKeepAlive: false,
        useChunkedEncodingByDefault: true,
        sendDate: true,
        _removedConnection: false,
        _removedContLen: false,
        _removedTE: false,
        _contentLength: null,
        _hasBody: true,
        _trailer: '',
        finished: false,
        _headerSent: false,
        socket: [Circular],
        connection: [Circular],
        _header: null,
        _onPendingData: [Function: bound updateOutgoingData],
        _sent100: false,
        _expect_continue: false,
        req: [Circular],
        locals: {},
        [Symbol(outHeadersKey)]: [Object] },
     [Symbol(asyncId)]: 134,
     [Symbol(bytesRead)]: 0,
     [Symbol(asyncId)]: 135,
     [Symbol(triggerAsyncId)]: 9 },
  connection: 
   Socket {
     connecting: false,
     _hadError: false,
     _handle: 
      TCP {
        reading: true,
        owner: [Circular],
        onread: [Function: onread],
        onconnection: null,
        writeQueueSize: 0,
        _consumed: true },
     _parent: null,
     _host: null,
     _readableState: 
      ReadableState {
        objectMode: false,
        highWaterMark: 16384,
        buffer: [Object],
        length: 0,
        pipes: null,
        pipesCount: 0,
        flowing: true,
        ended: false,
        endEmitted: false,
        reading: true,
        sync: false,
        needReadable: true,
        emittedReadable: false,
        readableListening: false,
        resumeScheduled: false,
        destroyed: false,
        defaultEncoding: 'utf8',
        awaitDrain: 0,
        readingMore: false,
        decoder: null,
        encoding: null },
     readable: true,
     domain: null,
     _events: 
      { end: [Array],
        finish: [Function: onSocketFinish],
        _socketEnd: [Function: onSocketEnd],
        drain: [Array],
        timeout: [Function: socketOnTimeout],
        data: [Function: bound socketOnData],
        error: [Function: socketOnError],
        close: [Array],
        resume: [Function: onSocketResume],
        pause: [Function: onSocketPause] },
     _eventsCount: 10,
     _maxListeners: undefined,
     _writableState: 
      WritableState {
        objectMode: false,
        highWaterMark: 16384,
        finalCalled: false,
        needDrain: false,
        ending: false,
        ended: false,
        finished: false,
        destroyed: false,
        decodeStrings: false,
        defaultEncoding: 'utf8',
        length: 0,
        writing: false,
        corked: 0,
        sync: true,
        bufferProcessing: false,
        onwrite: [Function: bound onwrite],
        writecb: null,
        writelen: 0,
        bufferedRequest: null,
        lastBufferedRequest: null,
        pendingcb: 0,
        prefinished: false,
        errorEmitted: false,
        bufferedRequestCount: 0,
        corkedRequestsFree: [Object] },
     writable: true,
     allowHalfOpen: true,
     _bytesDispatched: 0,
     _sockname: null,
     _pendingData: null,
     _pendingEncoding: '',
     server: 
      Server {
        domain: null,
        _events: [Object],
        _eventsCount: 2,
        _maxListeners: undefined,
        _connections: 1,
        _handle: [Object],
        _usingSlaves: false,
        _slaves: [],
        _unref: false,
        allowHalfOpen: true,
        pauseOnConnect: false,
        httpAllowHalfOpen: false,
        timeout: 120000,
        keepAliveTimeout: 5000,
        _pendingResponseData: 0,
        maxHeadersCount: null,
        _connectionKey: '4:127.0.0.1:0',
        [Symbol(asyncId)]: 9 },
     _server: 
      Server {
        domain: null,
        _events: [Object],
        _eventsCount: 2,
        _maxListeners: undefined,
        _connections: 1,
        _handle: [Object],
        _usingSlaves: false,
        _slaves: [],
        _unref: false,
        allowHalfOpen: true,
        pauseOnConnect: false,
        httpAllowHalfOpen: false,
        timeout: 120000,
        keepAliveTimeout: 5000,
        _pendingResponseData: 0,
        maxHeadersCount: null,
        _connectionKey: '4:127.0.0.1:0',
        [Symbol(asyncId)]: 9 },
     _idleTimeout: 120000,
     _idleNext: 
      TimersList {
        _idleNext: [Circular],
        _idlePrev: [Circular],
        _timer: [Object],
        _unrefed: true,
        msecs: 120000,
        nextTick: false },
     _idlePrev: 
      TimersList {
        _idleNext: [Circular],
        _idlePrev: [Circular],
        _timer: [Object],
        _unrefed: true,
        msecs: 120000,
        nextTick: false },
     _idleStart: 92333,
     _destroyed: false,
     parser: 
      HTTPParser {
        '0': [Function: parserOnHeaders],
        '1': [Function: parserOnHeadersComplete],
        '2': [Function: parserOnBody],
        '3': [Function: parserOnMessageComplete],
        '4': [Function: bound onParserExecute],
        _headers: [],
        _url: '',
        _consumed: true,
        socket: [Circular],
        incoming: [Circular],
        outgoing: null,
        maxHeaderPairs: 2000,
        onIncoming: [Function: bound parserOnIncoming] },
     on: [Function: socketOnWrap],
     _paused: false,
     read: [Function],
     _consuming: true,
     _httpMessage: 
      ServerResponse {
        domain: null,
        _events: [Object],
        _eventsCount: 1,
        _maxListeners: undefined,
        output: [],
        outputEncodings: [],
        outputCallbacks: [],
        outputSize: 0,
        writable: true,
        _last: false,
        upgrading: false,
        chunkedEncoding: false,
        shouldKeepAlive: false,
        useChunkedEncodingByDefault: true,
        sendDate: true,
        _removedConnection: false,
        _removedContLen: false,
        _removedTE: false,
        _contentLength: null,
        _hasBody: true,
        _trailer: '',
        finished: false,
        _headerSent: false,
        socket: [Circular],
        connection: [Circular],
        _header: null,
        _onPendingData: [Function: bound updateOutgoingData],
        _sent100: false,
        _expect_continue: false,
        req: [Circular],
        locals: {},
        [Symbol(outHeadersKey)]: [Object] },
     [Symbol(asyncId)]: 134,
     [Symbol(bytesRead)]: 0,
     [Symbol(asyncId)]: 135,
     [Symbol(triggerAsyncId)]: 9 },
  httpVersionMajor: 1,
  httpVersionMinor: 1,
  httpVersion: '1.1',
  complete: false,
  headers: { connection: 'close', host: 'localhost:5000' },
  rawHeaders: [ 'connection', 'close', 'host', 'localhost:5000' ],
  trailers: {},
  rawTrailers: [],
  upgrade: false,
  url: '/',
  method: 'GET',
  statusCode: null,
  statusMessage: null,
  client: 
   Socket {
     connecting: false,
     _hadError: false,
     _handle: 
      TCP {
        reading: true,
        owner: [Circular],
        onread: [Function: onread],
        onconnection: null,
        writeQueueSize: 0,
        _consumed: true },
     _parent: null,
     _host: null,
     _readableState: 
      ReadableState {
        objectMode: false,
        highWaterMark: 16384,
        buffer: [Object],
        length: 0,
        pipes: null,
        pipesCount: 0,
        flowing: true,
        ended: false,
        endEmitted: false,
        reading: true,
        sync: false,
        needReadable: true,
        emittedReadable: false,
        readableListening: false,
        resumeScheduled: false,
        destroyed: false,
        defaultEncoding: 'utf8',
        awaitDrain: 0,
        readingMore: false,
        decoder: null,
        encoding: null },
     readable: true,
     domain: null,
     _events: 
      { end: [Array],
        finish: [Function: onSocketFinish],
        _socketEnd: [Function: onSocketEnd],
        drain: [Array],
        timeout: [Function: socketOnTimeout],
        data: [Function: bound socketOnData],
        error: [Function: socketOnError],
        close: [Array],
        resume: [Function: onSocketResume],
        pause: [Function: onSocketPause] },
     _eventsCount: 10,
     _maxListeners: undefined,
     _writableState: 
      WritableState {
        objectMode: false,
        highWaterMark: 16384,
        finalCalled: false,
        needDrain: false,
        ending: false,
        ended: false,
        finished: false,
        destroyed: false,
        decodeStrings: false,
        defaultEncoding: 'utf8',
        length: 0,
        writing: false,
        corked: 0,
        sync: true,
        bufferProcessing: false,
        onwrite: [Function: bound onwrite],
        writecb: null,
        writelen: 0,
        bufferedRequest: null,
        lastBufferedRequest: null,
        pendingcb: 0,
        prefinished: false,
        errorEmitted: false,
        bufferedRequestCount: 0,
        corkedRequestsFree: [Object] },
     writable: true,
     allowHalfOpen: true,
     _bytesDispatched: 0,
     _sockname: null,
     _pendingData: null,
     _pendingEncoding: '',
     server: 
      Server {
        domain: null,
        _events: [Object],
        _eventsCount: 2,
        _maxListeners: undefined,
        _connections: 1,
        _handle: [Object],
        _usingSlaves: false,
        _slaves: [],
        _unref: false,
        allowHalfOpen: true,
        pauseOnConnect: false,
        httpAllowHalfOpen: false,
        timeout: 120000,
        keepAliveTimeout: 5000,
        _pendingResponseData: 0,
        maxHeadersCount: null,
        _connectionKey: '4:127.0.0.1:0',
        [Symbol(asyncId)]: 9 },
     _server: 
      Server {
        domain: null,
        _events: [Object],
        _eventsCount: 2,
        _maxListeners: undefined,
        _connections: 1,
        _handle: [Object],
        _usingSlaves: false,
        _slaves: [],
        _unref: false,
        allowHalfOpen: true,
        pauseOnConnect: false,
        httpAllowHalfOpen: false,
        timeout: 120000,
        keepAliveTimeout: 5000,
        _pendingResponseData: 0,
        maxHeadersCount: null,
        _connectionKey: '4:127.0.0.1:0',
        [Symbol(asyncId)]: 9 },
     _idleTimeout: 120000,
     _idleNext: 
      TimersList {
        _idleNext: [Circular],
        _idlePrev: [Circular],
        _timer: [Object],
        _unrefed: true,
        msecs: 120000,
        nextTick: false },
     _idlePrev: 
      TimersList {
        _idleNext: [Circular],
        _idlePrev: [Circular],
        _timer: [Object],
        _unrefed: true,
        msecs: 120000,
        nextTick: false },
     _idleStart: 92333,
     _destroyed: false,
     parser: 
      HTTPParser {
        '0': [Function: parserOnHeaders],
        '1': [Function: parserOnHeadersComplete],
        '2': [Function: parserOnBody],
        '3': [Function: parserOnMessageComplete],
        '4': [Function: bound onParserExecute],
        _headers: [],
        _url: '',
        _consumed: true,
        socket: [Circular],
        incoming: [Circular],
        outgoing: null,
        maxHeaderPairs: 2000,
        onIncoming: [Function: bound parserOnIncoming] },
     on: [Function: socketOnWrap],
     _paused: false,
     read: [Function],
     _consuming: true,
     _httpMessage: 
      ServerResponse {
        domain: null,
        _events: [Object],
        _eventsCount: 1,
        _maxListeners: undefined,
        output: [],
        outputEncodings: [],
        outputCallbacks: [],
        outputSize: 0,
        writable: true,
        _last: false,
        upgrading: false,
        chunkedEncoding: false,
        shouldKeepAlive: false,
        useChunkedEncodingByDefault: true,
        sendDate: true,
        _removedConnection: false,
        _removedContLen: false,
        _removedTE: false,
        _contentLength: null,
        _hasBody: true,
        _trailer: '',
        finished: false,
        _headerSent: false,
        socket: [Circular],
        connection: [Circular],
        _header: null,
        _onPendingData: [Function: bound updateOutgoingData],
        _sent100: false,
        _expect_continue: false,
        req: [Circular],
        locals: {},
        [Symbol(outHeadersKey)]: [Object] },
     [Symbol(asyncId)]: 134,
     [Symbol(bytesRead)]: 0,
     [Symbol(asyncId)]: 135,
     [Symbol(triggerAsyncId)]: 9 },
  _consuming: false,
  _dumped: false,
  next: [Function: next],
  baseUrl: '',
  originalUrl: '/',
  _parsedUrl: 
   Url {
     protocol: null,
     slashes: null,
     auth: null,
     host: null,
     port: null,
     hostname: null,
     hash: null,
     search: null,
     query: null,
     pathname: '/',
     path: '/',
     href: '/',
     _raw: '/' },
  params: {},
  query: {},
  res: 
   ServerResponse {
     domain: null,
     _events: { finish: [Array] },
     _eventsCount: 1,
     _maxListeners: undefined,
     output: [],
     outputEncodings: [],
     outputCallbacks: [],
     outputSize: 0,
     writable: true,
     _last: false,
     upgrading: false,
     chunkedEncoding: false,
     shouldKeepAlive: false,
     useChunkedEncodingByDefault: true,
     sendDate: true,
     _removedConnection: false,
     _removedContLen: false,
     _removedTE: false,
     _contentLength: null,
     _hasBody: true,
     _trailer: '',
     finished: false,
     _headerSent: false,
     socket: 
      Socket {
        connecting: false,
        _hadError: false,
        _handle: [Object],
        _parent: null,
        _host: null,
        _readableState: [Object],
        readable: true,
        domain: null,
        _events: [Object],
        _eventsCount: 10,
        _maxListeners: undefined,
        _writableState: [Object],
        writable: true,
        allowHalfOpen: true,
        _bytesDispatched: 0,
        _sockname: null,
        _pendingData: null,
        _pendingEncoding: '',
        server: [Object],
        _server: [Object],
        _idleTimeout: 120000,
        _idleNext: [Object],
        _idlePrev: [Object],
        _idleStart: 92333,
        _destroyed: false,
        parser: [Object],
        on: [Function: socketOnWrap],
        _paused: false,
        read: [Function],
        _consuming: true,
        _httpMessage: [Circular],
        [Symbol(asyncId)]: 134,
        [Symbol(bytesRead)]: 0,
        [Symbol(asyncId)]: 135,
        [Symbol(triggerAsyncId)]: 9 },
     connection: 
      Socket {
        connecting: false,
        _hadError: false,
        _handle: [Object],
        _parent: null,
        _host: null,
        _readableState: [Object],
        readable: true,
        domain: null,
        _events: [Object],
        _eventsCount: 10,
        _maxListeners: undefined,
        _writableState: [Object],
        writable: true,
        allowHalfOpen: true,
        _bytesDispatched: 0,
        _sockname: null,
        _pendingData: null,
        _pendingEncoding: '',
        server: [Object],
        _server: [Object],
        _idleTimeout: 120000,
        _idleNext: [Object],
        _idlePrev: [Object],
        _idleStart: 92333,
        _destroyed: false,
        parser: [Object],
        on: [Function: socketOnWrap],
        _paused: false,
        read: [Function],
        _consuming: true,
        _httpMessage: [Circular],
        [Symbol(asyncId)]: 134,
        [Symbol(bytesRead)]: 0,
        [Symbol(asyncId)]: 135,
        [Symbol(triggerAsyncId)]: 9 },
     _header: null,
     _onPendingData: [Function: bound updateOutgoingData],
     _sent100: false,
     _expect_continue: false,
     req: [Circular],
     locals: {},
     [Symbol(outHeadersKey)]: 
      { 'x-powered-by': [Array],
        'cache-control': [Array],
        pragma: [Array],
        expires: [Array],
        vary: [Array] } },
  body: {} }
2018-04-07T18:04:53.807Z - info: Execution took 11 ms, user function completed successfully
2018-04-07T18:05:55.231Z - info: User function triggered, starting execution
2018-04-07T18:05:55.232Z - error: Request has invalid method. GET
2018-04-07T18:05:55.243Z - error: Invalid request IncomingMessage {
  _readableState: 
   ReadableState {
     objectMode: false,
     highWaterMark: 16384,
     buffer: BufferList { head: null, tail: null, length: 0 },
     length: 0,
     pipes: null,
     pipesCount: 0,
     flowing: null,
     ended: false,
     endEmitted: false,
     reading: false,
     sync: true,
     needReadable: false,
     emittedReadable: false,
     readableListening: false,
     resumeScheduled: false,
     destroyed: false,
     defaultEncoding: 'utf8',
     awaitDrain: 0,
     readingMore: true,
     decoder: null,
     encoding: null },
  readable: true,
  domain: null,
  _events: {},
  _eventsCount: 0,
  _maxListeners: undefined,
  socket: 
   Socket {
     connecting: false,
     _hadError: false,
     _handle: 
      TCP {
        reading: true,
        owner: [Circular],
        onread: [Function: onread],
        onconnection: null,
        writeQueueSize: 0,
        _consumed: true },
     _parent: null,
     _host: null,
     _readableState: 
      ReadableState {
        objectMode: false,
        highWaterMark: 16384,
        buffer: [Object],
        length: 0,
        pipes: null,
        pipesCount: 0,
        flowing: true,
        ended: false,
        endEmitted: false,
        reading: true,
        sync: false,
        needReadable: true,
        emittedReadable: false,
        readableListening: false,
        resumeScheduled: false,
        destroyed: false,
        defaultEncoding: 'utf8',
        awaitDrain: 0,
        readingMore: false,
        decoder: null,
        encoding: null },
     readable: true,
     domain: null,
     _events: 
      { end: [Array],
        finish: [Function: onSocketFinish],
        _socketEnd: [Function: onSocketEnd],
        drain: [Array],
        timeout: [Function: socketOnTimeout],
        data: [Function: bound socketOnData],
        error: [Function: socketOnError],
        close: [Array],
        resume: [Function: onSocketResume],
        pause: [Function: onSocketPause] },
     _eventsCount: 10,
     _maxListeners: undefined,
     _writableState: 
      WritableState {
        objectMode: false,
        highWaterMark: 16384,
        finalCalled: false,
        needDrain: false,
        ending: false,
        ended: false,
        finished: false,
        destroyed: false,
        decodeStrings: false,
        defaultEncoding: 'utf8',
        length: 0,
        writing: false,
        corked: 0,
        sync: true,
        bufferProcessing: false,
        onwrite: [Function: bound onwrite],
        writecb: null,
        writelen: 0,
        bufferedRequest: null,
        lastBufferedRequest: null,
        pendingcb: 0,
        prefinished: false,
        errorEmitted: false,
        bufferedRequestCount: 0,
        corkedRequestsFree: [Object] },
     writable: true,
     allowHalfOpen: true,
     _bytesDispatched: 0,
     _sockname: null,
     _pendingData: null,
     _pendingEncoding: '',
     server: 
      Server {
        domain: null,
        _events: [Object],
        _eventsCount: 2,
        _maxListeners: undefined,
        _connections: 1,
        _handle: [Object],
        _usingSlaves: false,
        _slaves: [],
        _unref: false,
        allowHalfOpen: true,
        pauseOnConnect: false,
        httpAllowHalfOpen: false,
        timeout: 120000,
        keepAliveTimeout: 5000,
        _pendingResponseData: 0,
        maxHeadersCount: null,
        _connectionKey: '4:127.0.0.1:0',
        [Symbol(asyncId)]: 9 },
     _server: 
      Server {
        domain: null,
        _events: [Object],
        _eventsCount: 2,
        _maxListeners: undefined,
        _connections: 1,
        _handle: [Object],
        _usingSlaves: false,
        _slaves: [],
        _unref: false,
        allowHalfOpen: true,
        pauseOnConnect: false,
        httpAllowHalfOpen: false,
        timeout: 120000,
        keepAliveTimeout: 5000,
        _pendingResponseData: 0,
        maxHeadersCount: null,
        _connectionKey: '4:127.0.0.1:0',
        [Symbol(asyncId)]: 9 },
     _idleTimeout: 120000,
     _idleNext: 
      TimersList {
        _idleNext: [Circular],
        _idlePrev: [Circular],
        _timer: [Object],
        _unrefed: true,
        msecs: 120000,
        nextTick: false },
     _idlePrev: 
      TimersList {
        _idleNext: [Circular],
        _idlePrev: [Circular],
        _timer: [Object],
        _unrefed: true,
        msecs: 120000,
        nextTick: false },
     _idleStart: 153771,
     _destroyed: false,
     parser: 
      HTTPParser {
        '0': [Function: parserOnHeaders],
        '1': [Function: parserOnHeadersComplete],
        '2': [Function: parserOnBody],
        '3': [Function: parserOnMessageComplete],
        '4': [Function: bound onParserExecute],
        _headers: [],
        _url: '',
        _consumed: true,
        socket: [Circular],
        incoming: [Circular],
        outgoing: null,
        maxHeaderPairs: 2000,
        onIncoming: [Function: bound parserOnIncoming] },
     on: [Function: socketOnWrap],
     _paused: false,
     read: [Function],
     _consuming: true,
     _httpMessage: 
      ServerResponse {
        domain: null,
        _events: [Object],
        _eventsCount: 1,
        _maxListeners: undefined,
        output: [],
        outputEncodings: [],
        outputCallbacks: [],
        outputSize: 0,
        writable: true,
        _last: false,
        upgrading: false,
        chunkedEncoding: false,
        shouldKeepAlive: false,
        useChunkedEncodingByDefault: true,
        sendDate: true,
        _removedConnection: false,
        _removedContLen: false,
        _removedTE: false,
        _contentLength: null,
        _hasBody: true,
        _trailer: '',
        finished: false,
        _headerSent: false,
        socket: [Circular],
        connection: [Circular],
        _header: null,
        _onPendingData: [Function: bound updateOutgoingData],
        _sent100: false,
        _expect_continue: false,
        req: [Circular],
        locals: {},
        [Symbol(outHeadersKey)]: [Object] },
     [Symbol(asyncId)]: 154,
     [Symbol(bytesRead)]: 0,
     [Symbol(asyncId)]: 156,
     [Symbol(triggerAsyncId)]: 9 },
  connection: 
   Socket {
     connecting: false,
     _hadError: false,
     _handle: 
      TCP {
        reading: true,
        owner: [Circular],
        onread: [Function: onread],
        onconnection: null,
        writeQueueSize: 0,
        _consumed: true },
     _parent: null,
     _host: null,
     _readableState: 
      ReadableState {
        objectMode: false,
        highWaterMark: 16384,
        buffer: [Object],
        length: 0,
        pipes: null,
        pipesCount: 0,
        flowing: true,
        ended: false,
        endEmitted: false,
        reading: true,
        sync: false,
        needReadable: true,
        emittedReadable: false,
        readableListening: false,
        resumeScheduled: false,
        destroyed: false,
        defaultEncoding: 'utf8',
        awaitDrain: 0,
        readingMore: false,
        decoder: null,
        encoding: null },
     readable: true,
     domain: null,
     _events: 
      { end: [Array],
        finish: [Function: onSocketFinish],
        _socketEnd: [Function: onSocketEnd],
        drain: [Array],
        timeout: [Function: socketOnTimeout],
        data: [Function: bound socketOnData],
        error: [Function: socketOnError],
        close: [Array],
        resume: [Function: onSocketResume],
        pause: [Function: onSocketPause] },
     _eventsCount: 10,
     _maxListeners: undefined,
     _writableState: 
      WritableState {
        objectMode: false,
        highWaterMark: 16384,
        finalCalled: false,
        needDrain: false,
        ending: false,
        ended: false,
        finished: false,
        destroyed: false,
        decodeStrings: false,
        defaultEncoding: 'utf8',
        length: 0,
        writing: false,
        corked: 0,
        sync: true,
        bufferProcessing: false,
        onwrite: [Function: bound onwrite],
        writecb: null,
        writelen: 0,
        bufferedRequest: null,
        lastBufferedRequest: null,
        pendingcb: 0,
        prefinished: false,
        errorEmitted: false,
        bufferedRequestCount: 0,
        corkedRequestsFree: [Object] },
     writable: true,
     allowHalfOpen: true,
     _bytesDispatched: 0,
     _sockname: null,
     _pendingData: null,
     _pendingEncoding: '',
     server: 
      Server {
        domain: null,
        _events: [Object],
        _eventsCount: 2,
        _maxListeners: undefined,
        _connections: 1,
        _handle: [Object],
        _usingSlaves: false,
        _slaves: [],
        _unref: false,
        allowHalfOpen: true,
        pauseOnConnect: false,
        httpAllowHalfOpen: false,
        timeout: 120000,
        keepAliveTimeout: 5000,
        _pendingResponseData: 0,
        maxHeadersCount: null,
        _connectionKey: '4:127.0.0.1:0',
        [Symbol(asyncId)]: 9 },
     _server: 
      Server {
        domain: null,
        _events: [Object],
        _eventsCount: 2,
        _maxListeners: undefined,
        _connections: 1,
        _handle: [Object],
        _usingSlaves: false,
        _slaves: [],
        _unref: false,
        allowHalfOpen: true,
        pauseOnConnect: false,
        httpAllowHalfOpen: false,
        timeout: 120000,
        keepAliveTimeout: 5000,
        _pendingResponseData: 0,
        maxHeadersCount: null,
        _connectionKey: '4:127.0.0.1:0',
        [Symbol(asyncId)]: 9 },
     _idleTimeout: 120000,
     _idleNext: 
      TimersList {
        _idleNext: [Circular],
        _idlePrev: [Circular],
        _timer: [Object],
        _unrefed: true,
        msecs: 120000,
        nextTick: false },
     _idlePrev: 
      TimersList {
        _idleNext: [Circular],
        _idlePrev: [Circular],
        _timer: [Object],
        _unrefed: true,
        msecs: 120000,
        nextTick: false },
     _idleStart: 153771,
     _destroyed: false,
     parser: 
      HTTPParser {
        '0': [Function: parserOnHeaders],
        '1': [Function: parserOnHeadersComplete],
        '2': [Function: parserOnBody],
        '3': [Function: parserOnMessageComplete],
        '4': [Function: bound onParserExecute],
        _headers: [],
        _url: '',
        _consumed: true,
        socket: [Circular],
        incoming: [Circular],
        outgoing: null,
        maxHeaderPairs: 2000,
        onIncoming: [Function: bound parserOnIncoming] },
     on: [Function: socketOnWrap],
     _paused: false,
     read: [Function],
     _consuming: true,
     _httpMessage: 
      ServerResponse {
        domain: null,
        _events: [Object],
        _eventsCount: 1,
        _maxListeners: undefined,
        output: [],
        outputEncodings: [],
        outputCallbacks: [],
        outputSize: 0,
        writable: true,
        _last: false,
        upgrading: false,
        chunkedEncoding: false,
        shouldKeepAlive: false,
        useChunkedEncodingByDefault: true,
        sendDate: true,
        _removedConnection: false,
        _removedContLen: false,
        _removedTE: false,
        _contentLength: null,
        _hasBody: true,
        _trailer: '',
        finished: false,
        _headerSent: false,
        socket: [Circular],
        connection: [Circular],
        _header: null,
        _onPendingData: [Function: bound updateOutgoingData],
        _sent100: false,
        _expect_continue: false,
        req: [Circular],
        locals: {},
        [Symbol(outHeadersKey)]: [Object] },
     [Symbol(asyncId)]: 154,
     [Symbol(bytesRead)]: 0,
     [Symbol(asyncId)]: 156,
     [Symbol(triggerAsyncId)]: 9 },
  httpVersionMajor: 1,
  httpVersionMinor: 1,
  httpVersion: '1.1',
  complete: false,
  headers: { connection: 'close', host: 'localhost:5000' },
  rawHeaders: [ 'connection', 'close', 'host', 'localhost:5000' ],
  trailers: {},
  rawTrailers: [],
  upgrade: false,
  url: '/',
  method: 'GET',
  statusCode: null,
  statusMessage: null,
  client: 
   Socket {
     connecting: false,
     _hadError: false,
     _handle: 
      TCP {
        reading: true,
        owner: [Circular],
        onread: [Function: onread],
        onconnection: null,
        writeQueueSize: 0,
        _consumed: true },
     _parent: null,
     _host: null,
     _readableState: 
      ReadableState {
        objectMode: false,
        highWaterMark: 16384,
        buffer: [Object],
        length: 0,
        pipes: null,
        pipesCount: 0,
        flowing: true,
        ended: false,
        endEmitted: false,
        reading: true,
        sync: false,
        needReadable: true,
        emittedReadable: false,
        readableListening: false,
        resumeScheduled: false,
        destroyed: false,
        defaultEncoding: 'utf8',
        awaitDrain: 0,
        readingMore: false,
        decoder: null,
        encoding: null },
     readable: true,
     domain: null,
     _events: 
      { end: [Array],
        finish: [Function: onSocketFinish],
        _socketEnd: [Function: onSocketEnd],
        drain: [Array],
        timeout: [Function: socketOnTimeout],
        data: [Function: bound socketOnData],
        error: [Function: socketOnError],
        close: [Array],
        resume: [Function: onSocketResume],
        pause: [Function: onSocketPause] },
     _eventsCount: 10,
     _maxListeners: undefined,
     _writableState: 
      WritableState {
        objectMode: false,
        highWaterMark: 16384,
        finalCalled: false,
        needDrain: false,
        ending: false,
        ended: false,
        finished: false,
        destroyed: false,
        decodeStrings: false,
        defaultEncoding: 'utf8',
        length: 0,
        writing: false,
        corked: 0,
        sync: true,
        bufferProcessing: false,
        onwrite: [Function: bound onwrite],
        writecb: null,
        writelen: 0,
        bufferedRequest: null,
        lastBufferedRequest: null,
        pendingcb: 0,
        prefinished: false,
        errorEmitted: false,
        bufferedRequestCount: 0,
        corkedRequestsFree: [Object] },
     writable: true,
     allowHalfOpen: true,
     _bytesDispatched: 0,
     _sockname: null,
     _pendingData: null,
     _pendingEncoding: '',
     server: 
      Server {
        domain: null,
        _events: [Object],
        _eventsCount: 2,
        _maxListeners: undefined,
        _connections: 1,
        _handle: [Object],
        _usingSlaves: false,
        _slaves: [],
        _unref: false,
        allowHalfOpen: true,
        pauseOnConnect: false,
        httpAllowHalfOpen: false,
        timeout: 120000,
        keepAliveTimeout: 5000,
        _pendingResponseData: 0,
        maxHeadersCount: null,
        _connectionKey: '4:127.0.0.1:0',
        [Symbol(asyncId)]: 9 },
     _server: 
      Server {
        domain: null,
        _events: [Object],
        _eventsCount: 2,
        _maxListeners: undefined,
        _connections: 1,
        _handle: [Object],
        _usingSlaves: false,
        _slaves: [],
        _unref: false,
        allowHalfOpen: true,
        pauseOnConnect: false,
        httpAllowHalfOpen: false,
        timeout: 120000,
        keepAliveTimeout: 5000,
        _pendingResponseData: 0,
        maxHeadersCount: null,
        _connectionKey: '4:127.0.0.1:0',
        [Symbol(asyncId)]: 9 },
     _idleTimeout: 120000,
     _idleNext: 
      TimersList {
        _idleNext: [Circular],
        _idlePrev: [Circular],
        _timer: [Object],
        _unrefed: true,
        msecs: 120000,
        nextTick: false },
     _idlePrev: 
      TimersList {
        _idleNext: [Circular],
        _idlePrev: [Circular],
        _timer: [Object],
        _unrefed: true,
        msecs: 120000,
        nextTick: false },
     _idleStart: 153771,
     _destroyed: false,
     parser: 
      HTTPParser {
        '0': [Function: parserOnHeaders],
        '1': [Function: parserOnHeadersComplete],
        '2': [Function: parserOnBody],
        '3': [Function: parserOnMessageComplete],
        '4': [Function: bound onParserExecute],
        _headers: [],
        _url: '',
        _consumed: true,
        socket: [Circular],
        incoming: [Circular],
        outgoing: null,
        maxHeaderPairs: 2000,
        onIncoming: [Function: bound parserOnIncoming] },
     on: [Function: socketOnWrap],
     _paused: false,
     read: [Function],
     _consuming: true,
     _httpMessage: 
      ServerResponse {
        domain: null,
        _events: [Object],
        _eventsCount: 1,
        _maxListeners: undefined,
        output: [],
        outputEncodings: [],
        outputCallbacks: [],
        outputSize: 0,
        writable: true,
        _last: false,
        upgrading: false,
        chunkedEncoding: false,
        shouldKeepAlive: false,
        useChunkedEncodingByDefault: true,
        sendDate: true,
        _removedConnection: false,
        _removedContLen: false,
        _removedTE: false,
        _contentLength: null,
        _hasBody: true,
        _trailer: '',
        finished: false,
        _headerSent: false,
        socket: [Circular],
        connection: [Circular],
        _header: null,
        _onPendingData: [Function: bound updateOutgoingData],
        _sent100: false,
        _expect_continue: false,
        req: [Circular],
        locals: {},
        [Symbol(outHeadersKey)]: [Object] },
     [Symbol(asyncId)]: 154,
     [Symbol(bytesRead)]: 0,
     [Symbol(asyncId)]: 156,
     [Symbol(triggerAsyncId)]: 9 },
  _consuming: false,
  _dumped: false,
  next: [Function: next],
  baseUrl: '',
  originalUrl: '/',
  _parsedUrl: 
   Url {
     protocol: null,
     slashes: null,
     auth: null,
     host: null,
     port: null,
     hostname: null,
     hash: null,
     search: null,
     query: null,
     pathname: '/',
     path: '/',
     href: '/',
     _raw: '/' },
  params: {},
  query: {},
  res: 
   ServerResponse {
     domain: null,
     _events: { finish: [Array] },
     _eventsCount: 1,
     _maxListeners: undefined,
     output: [],
     outputEncodings: [],
     outputCallbacks: [],
     outputSize: 0,
     writable: true,
     _last: false,
     upgrading: false,
     chunkedEncoding: false,
     shouldKeepAlive: false,
     useChunkedEncodingByDefault: true,
     sendDate: true,
     _removedConnection: false,
     _removedContLen: false,
     _removedTE: false,
     _contentLength: null,
     _hasBody: true,
     _trailer: '',
     finished: false,
     _headerSent: false,
     socket: 
      Socket {
        connecting: false,
        _hadError: false,
        _handle: [Object],
        _parent: null,
        _host: null,
        _readableState: [Object],
        readable: true,
        domain: null,
        _events: [Object],
        _eventsCount: 10,
        _maxListeners: undefined,
        _writableState: [Object],
        writable: true,
        allowHalfOpen: true,
        _bytesDispatched: 0,
        _sockname: null,
        _pendingData: null,
        _pendingEncoding: '',
        server: [Object],
        _server: [Object],
        _idleTimeout: 120000,
        _idleNext: [Object],
        _idlePrev: [Object],
        _idleStart: 153771,
        _destroyed: false,
        parser: [Object],
        on: [Function: socketOnWrap],
        _paused: false,
        read: [Function],
        _consuming: true,
        _httpMessage: [Circular],
        [Symbol(asyncId)]: 154,
        [Symbol(bytesRead)]: 0,
        [Symbol(asyncId)]: 156,
        [Symbol(triggerAsyncId)]: 9 },
     connection: 
      Socket {
        connecting: false,
        _hadError: false,
        _handle: [Object],
        _parent: null,
        _host: null,
        _readableState: [Object],
        readable: true,
        domain: null,
        _events: [Object],
        _eventsCount: 10,
        _maxListeners: undefined,
        _writableState: [Object],
        writable: true,
        allowHalfOpen: true,
        _bytesDispatched: 0,
        _sockname: null,
        _pendingData: null,
        _pendingEncoding: '',
        server: [Object],
        _server: [Object],
        _idleTimeout: 120000,
        _idleNext: [Object],
        _idlePrev: [Object],
        _idleStart: 153771,
        _destroyed: false,
        parser: [Object],
        on: [Function: socketOnWrap],
        _paused: false,
        read: [Function],
        _consuming: true,
        _httpMessage: [Circular],
        [Symbol(asyncId)]: 154,
        [Symbol(bytesRead)]: 0,
        [Symbol(asyncId)]: 156,
        [Symbol(triggerAsyncId)]: 9 },
     _header: null,
     _onPendingData: [Function: bound updateOutgoingData],
     _sent100: false,
     _expect_continue: false,
     req: [Circular],
     locals: {},
     [Symbol(outHeadersKey)]: 
      { 'x-powered-by': [Array],
        'cache-control': [Array],
        pragma: [Array],
        expires: [Array],
        vary: [Array] } },
  body: {} }
2018-04-07T18:05:55.245Z - info: Execution took 13 ms, user function completed successfully
2018-04-07T18:06:01.562Z - info: User function triggered, starting execution
2018-04-07T18:06:01.563Z - error: Request has invalid method. GET
2018-04-07T18:06:01.571Z - error: Invalid request IncomingMessage {
  _readableState: 
   ReadableState {
     objectMode: false,
     highWaterMark: 16384,
     buffer: BufferList { head: null, tail: null, length: 0 },
     length: 0,
     pipes: null,
     pipesCount: 0,
     flowing: null,
     ended: false,
     endEmitted: false,
     reading: false,
     sync: true,
     needReadable: false,
     emittedReadable: false,
     readableListening: false,
     resumeScheduled: false,
     destroyed: false,
     defaultEncoding: 'utf8',
     awaitDrain: 0,
     readingMore: true,
     decoder: null,
     encoding: null },
  readable: true,
  domain: null,
  _events: {},
  _eventsCount: 0,
  _maxListeners: undefined,
  socket: 
   Socket {
     connecting: false,
     _hadError: false,
     _handle: 
      TCP {
        reading: true,
        owner: [Circular],
        onread: [Function: onread],
        onconnection: null,
        writeQueueSize: 0,
        _consumed: true },
     _parent: null,
     _host: null,
     _readableState: 
      ReadableState {
        objectMode: false,
        highWaterMark: 16384,
        buffer: [Object],
        length: 0,
        pipes: null,
        pipesCount: 0,
        flowing: true,
        ended: false,
        endEmitted: false,
        reading: true,
        sync: false,
        needReadable: true,
        emittedReadable: false,
        readableListening: false,
        resumeScheduled: false,
        destroyed: false,
        defaultEncoding: 'utf8',
        awaitDrain: 0,
        readingMore: false,
        decoder: null,
        encoding: null },
     readable: true,
     domain: null,
     _events: 
      { end: [Array],
        finish: [Function: onSocketFinish],
        _socketEnd: [Function: onSocketEnd],
        drain: [Array],
        timeout: [Function: socketOnTimeout],
        data: [Function: bound socketOnData],
        error: [Function: socketOnError],
        close: [Array],
        resume: [Function: onSocketResume],
        pause: [Function: onSocketPause] },
     _eventsCount: 10,
     _maxListeners: undefined,
     _writableState: 
      WritableState {
        objectMode: false,
        highWaterMark: 16384,
        finalCalled: false,
        needDrain: false,
        ending: false,
        ended: false,
        finished: false,
        destroyed: false,
        decodeStrings: false,
        defaultEncoding: 'utf8',
        length: 0,
        writing: false,
        corked: 0,
        sync: true,
        bufferProcessing: false,
        onwrite: [Function: bound onwrite],
        writecb: null,
        writelen: 0,
        bufferedRequest: null,
        lastBufferedRequest: null,
        pendingcb: 0,
        prefinished: false,
        errorEmitted: false,
        bufferedRequestCount: 0,
        corkedRequestsFree: [Object] },
     writable: true,
     allowHalfOpen: true,
     _bytesDispatched: 0,
     _sockname: null,
     _pendingData: null,
     _pendingEncoding: '',
     server: 
      Server {
        domain: null,
        _events: [Object],
        _eventsCount: 2,
        _maxListeners: undefined,
        _connections: 1,
        _handle: [Object],
        _usingSlaves: false,
        _slaves: [],
        _unref: false,
        allowHalfOpen: true,
        pauseOnConnect: false,
        httpAllowHalfOpen: false,
        timeout: 120000,
        keepAliveTimeout: 5000,
        _pendingResponseData: 0,
        maxHeadersCount: null,
        _connectionKey: '4:127.0.0.1:0',
        [Symbol(asyncId)]: 9 },
     _server: 
      Server {
        domain: null,
        _events: [Object],
        _eventsCount: 2,
        _maxListeners: undefined,
        _connections: 1,
        _handle: [Object],
        _usingSlaves: false,
        _slaves: [],
        _unref: false,
        allowHalfOpen: true,
        pauseOnConnect: false,
        httpAllowHalfOpen: false,
        timeout: 120000,
        keepAliveTimeout: 5000,
        _pendingResponseData: 0,
        maxHeadersCount: null,
        _connectionKey: '4:127.0.0.1:0',
        [Symbol(asyncId)]: 9 },
     _idleTimeout: 120000,
     _idleNext: 
      TimersList {
        _idleNext: [Circular],
        _idlePrev: [Circular],
        _timer: [Object],
        _unrefed: true,
        msecs: 120000,
        nextTick: false },
     _idlePrev: 
      TimersList {
        _idleNext: [Circular],
        _idlePrev: [Circular],
        _timer: [Object],
        _unrefed: true,
        msecs: 120000,
        nextTick: false },
     _idleStart: 160102,
     _destroyed: false,
     parser: 
      HTTPParser {
        '0': [Function: parserOnHeaders],
        '1': [Function: parserOnHeadersComplete],
        '2': [Function: parserOnBody],
        '3': [Function: parserOnMessageComplete],
        '4': [Function: bound onParserExecute],
        _headers: [],
        _url: '',
        _consumed: true,
        socket: [Circular],
        incoming: [Circular],
        outgoing: null,
        maxHeaderPairs: 2000,
        onIncoming: [Function: bound parserOnIncoming] },
     on: [Function: socketOnWrap],
     _paused: false,
     read: [Function],
     _consuming: true,
     _httpMessage: 
      ServerResponse {
        domain: null,
        _events: [Object],
        _eventsCount: 1,
        _maxListeners: undefined,
        output: [],
        outputEncodings: [],
        outputCallbacks: [],
        outputSize: 0,
        writable: true,
        _last: false,
        upgrading: false,
        chunkedEncoding: false,
        shouldKeepAlive: false,
        useChunkedEncodingByDefault: true,
        sendDate: true,
        _removedConnection: false,
        _removedContLen: false,
        _removedTE: false,
        _contentLength: null,
        _hasBody: true,
        _trailer: '',
        finished: false,
        _headerSent: false,
        socket: [Circular],
        connection: [Circular],
        _header: null,
        _onPendingData: [Function: bound updateOutgoingData],
        _sent100: false,
        _expect_continue: false,
        req: [Circular],
        locals: {},
        [Symbol(outHeadersKey)]: [Object] },
     [Symbol(asyncId)]: 175,
     [Symbol(bytesRead)]: 0,
     [Symbol(asyncId)]: 176,
     [Symbol(triggerAsyncId)]: 9 },
  connection: 
   Socket {
     connecting: false,
     _hadError: false,
     _handle: 
      TCP {
        reading: true,
        owner: [Circular],
        onread: [Function: onread],
        onconnection: null,
        writeQueueSize: 0,
        _consumed: true },
     _parent: null,
     _host: null,
     _readableState: 
      ReadableState {
        objectMode: false,
        highWaterMark: 16384,
        buffer: [Object],
        length: 0,
        pipes: null,
        pipesCount: 0,
        flowing: true,
        ended: false,
        endEmitted: false,
        reading: true,
        sync: false,
        needReadable: true,
        emittedReadable: false,
        readableListening: false,
        resumeScheduled: false,
        destroyed: false,
        defaultEncoding: 'utf8',
        awaitDrain: 0,
        readingMore: false,
        decoder: null,
        encoding: null },
     readable: true,
     domain: null,
     _events: 
      { end: [Array],
        finish: [Function: onSocketFinish],
        _socketEnd: [Function: onSocketEnd],
        drain: [Array],
        timeout: [Function: socketOnTimeout],
        data: [Function: bound socketOnData],
        error: [Function: socketOnError],
        close: [Array],
        resume: [Function: onSocketResume],
        pause: [Function: onSocketPause] },
     _eventsCount: 10,
     _maxListeners: undefined,
     _writableState: 
      WritableState {
        objectMode: false,
        highWaterMark: 16384,
        finalCalled: false,
        needDrain: false,
        ending: false,
        ended: false,
        finished: false,
        destroyed: false,
        decodeStrings: false,
        defaultEncoding: 'utf8',
        length: 0,
        writing: false,
        corked: 0,
        sync: true,
        bufferProcessing: false,
        onwrite: [Function: bound onwrite],
        writecb: null,
        writelen: 0,
        bufferedRequest: null,
        lastBufferedRequest: null,
        pendingcb: 0,
        prefinished: false,
        errorEmitted: false,
        bufferedRequestCount: 0,
        corkedRequestsFree: [Object] },
     writable: true,
     allowHalfOpen: true,
     _bytesDispatched: 0,
     _sockname: null,
     _pendingData: null,
     _pendingEncoding: '',
     server: 
      Server {
        domain: null,
        _events: [Object],
        _eventsCount: 2,
        _maxListeners: undefined,
        _connections: 1,
        _handle: [Object],
        _usingSlaves: false,
        _slaves: [],
        _unref: false,
        allowHalfOpen: true,
        pauseOnConnect: false,
        httpAllowHalfOpen: false,
        timeout: 120000,
        keepAliveTimeout: 5000,
        _pendingResponseData: 0,
        maxHeadersCount: null,
        _connectionKey: '4:127.0.0.1:0',
        [Symbol(asyncId)]: 9 },
     _server: 
      Server {
        domain: null,
        _events: [Object],
        _eventsCount: 2,
        _maxListeners: undefined,
        _connections: 1,
        _handle: [Object],
        _usingSlaves: false,
        _slaves: [],
        _unref: false,
        allowHalfOpen: true,
        pauseOnConnect: false,
        httpAllowHalfOpen: false,
        timeout: 120000,
        keepAliveTimeout: 5000,
        _pendingResponseData: 0,
        maxHeadersCount: null,
        _connectionKey: '4:127.0.0.1:0',
        [Symbol(asyncId)]: 9 },
     _idleTimeout: 120000,
     _idleNext: 
      TimersList {
        _idleNext: [Circular],
        _idlePrev: [Circular],
        _timer: [Object],
        _unrefed: true,
        msecs: 120000,
        nextTick: false },
     _idlePrev: 
      TimersList {
        _idleNext: [Circular],
        _idlePrev: [Circular],
        _timer: [Object],
        _unrefed: true,
        msecs: 120000,
        nextTick: false },
     _idleStart: 160102,
     _destroyed: false,
     parser: 
      HTTPParser {
        '0': [Function: parserOnHeaders],
        '1': [Function: parserOnHeadersComplete],
        '2': [Function: parserOnBody],
        '3': [Function: parserOnMessageComplete],
        '4': [Function: bound onParserExecute],
        _headers: [],
        _url: '',
        _consumed: true,
        socket: [Circular],
        incoming: [Circular],
        outgoing: null,
        maxHeaderPairs: 2000,
        onIncoming: [Function: bound parserOnIncoming] },
     on: [Function: socketOnWrap],
     _paused: false,
     read: [Function],
     _consuming: true,
     _httpMessage: 
      ServerResponse {
        domain: null,
        _events: [Object],
        _eventsCount: 1,
        _maxListeners: undefined,
        output: [],
        outputEncodings: [],
        outputCallbacks: [],
        outputSize: 0,
        writable: true,
        _last: false,
        upgrading: false,
        chunkedEncoding: false,
        shouldKeepAlive: false,
        useChunkedEncodingByDefault: true,
        sendDate: true,
        _removedConnection: false,
        _removedContLen: false,
        _removedTE: false,
        _contentLength: null,
        _hasBody: true,
        _trailer: '',
        finished: false,
        _headerSent: false,
        socket: [Circular],
        connection: [Circular],
        _header: null,
        _onPendingData: [Function: bound updateOutgoingData],
        _sent100: false,
        _expect_continue: false,
        req: [Circular],
        locals: {},
        [Symbol(outHeadersKey)]: [Object] },
     [Symbol(asyncId)]: 175,
     [Symbol(bytesRead)]: 0,
     [Symbol(asyncId)]: 176,
     [Symbol(triggerAsyncId)]: 9 },
  httpVersionMajor: 1,
  httpVersionMinor: 1,
  httpVersion: '1.1',
  complete: false,
  headers: { connection: 'close', host: 'localhost:5000' },
  rawHeaders: [ 'connection', 'close', 'host', 'localhost:5000' ],
  trailers: {},
  rawTrailers: [],
  upgrade: false,
  url: '/',
  method: 'GET',
  statusCode: null,
  statusMessage: null,
  client: 
   Socket {
     connecting: false,
     _hadError: false,
     _handle: 
      TCP {
        reading: true,
        owner: [Circular],
        onread: [Function: onread],
        onconnection: null,
        writeQueueSize: 0,
        _consumed: true },
     _parent: null,
     _host: null,
     _readableState: 
      ReadableState {
        objectMode: false,
        highWaterMark: 16384,
        buffer: [Object],
        length: 0,
        pipes: null,
        pipesCount: 0,
        flowing: true,
        ended: false,
        endEmitted: false,
        reading: true,
        sync: false,
        needReadable: true,
        emittedReadable: false,
        readableListening: false,
        resumeScheduled: false,
        destroyed: false,
        defaultEncoding: 'utf8',
        awaitDrain: 0,
        readingMore: false,
        decoder: null,
        encoding: null },
     readable: true,
     domain: null,
     _events: 
      { end: [Array],
        finish: [Function: onSocketFinish],
        _socketEnd: [Function: onSocketEnd],
        drain: [Array],
        timeout: [Function: socketOnTimeout],
        data: [Function: bound socketOnData],
        error: [Function: socketOnError],
        close: [Array],
        resume: [Function: onSocketResume],
        pause: [Function: onSocketPause] },
     _eventsCount: 10,
     _maxListeners: undefined,
     _writableState: 
      WritableState {
        objectMode: false,
        highWaterMark: 16384,
        finalCalled: false,
        needDrain: false,
        ending: false,
        ended: false,
        finished: false,
        destroyed: false,
        decodeStrings: false,
        defaultEncoding: 'utf8',
        length: 0,
        writing: false,
        corked: 0,
        sync: true,
        bufferProcessing: false,
        onwrite: [Function: bound onwrite],
        writecb: null,
        writelen: 0,
        bufferedRequest: null,
        lastBufferedRequest: null,
        pendingcb: 0,
        prefinished: false,
        errorEmitted: false,
        bufferedRequestCount: 0,
        corkedRequestsFree: [Object] },
     writable: true,
     allowHalfOpen: true,
     _bytesDispatched: 0,
     _sockname: null,
     _pendingData: null,
     _pendingEncoding: '',
     server: 
      Server {
        domain: null,
        _events: [Object],
        _eventsCount: 2,
        _maxListeners: undefined,
        _connections: 1,
        _handle: [Object],
        _usingSlaves: false,
        _slaves: [],
        _unref: false,
        allowHalfOpen: true,
        pauseOnConnect: false,
        httpAllowHalfOpen: false,
        timeout: 120000,
        keepAliveTimeout: 5000,
        _pendingResponseData: 0,
        maxHeadersCount: null,
        _connectionKey: '4:127.0.0.1:0',
        [Symbol(asyncId)]: 9 },
     _server: 
      Server {
        domain: null,
        _events: [Object],
        _eventsCount: 2,
        _maxListeners: undefined,
        _connections: 1,
        _handle: [Object],
        _usingSlaves: false,
        _slaves: [],
        _unref: false,
        allowHalfOpen: true,
        pauseOnConnect: false,
        httpAllowHalfOpen: false,
        timeout: 120000,
        keepAliveTimeout: 5000,
        _pendingResponseData: 0,
        maxHeadersCount: null,
        _connectionKey: '4:127.0.0.1:0',
        [Symbol(asyncId)]: 9 },
     _idleTimeout: 120000,
     _idleNext: 
      TimersList {
        _idleNext: [Circular],
        _idlePrev: [Circular],
        _timer: [Object],
        _unrefed: true,
        msecs: 120000,
        nextTick: false },
     _idlePrev: 
      TimersList {
        _idleNext: [Circular],
        _idlePrev: [Circular],
        _timer: [Object],
        _unrefed: true,
        msecs: 120000,
        nextTick: false },
     _idleStart: 160102,
     _destroyed: false,
     parser: 
      HTTPParser {
        '0': [Function: parserOnHeaders],
        '1': [Function: parserOnHeadersComplete],
        '2': [Function: parserOnBody],
        '3': [Function: parserOnMessageComplete],
        '4': [Function: bound onParserExecute],
        _headers: [],
        _url: '',
        _consumed: true,
        socket: [Circular],
        incoming: [Circular],
        outgoing: null,
        maxHeaderPairs: 2000,
        onIncoming: [Function: bound parserOnIncoming] },
     on: [Function: socketOnWrap],
     _paused: false,
     read: [Function],
     _consuming: true,
     _httpMessage: 
      ServerResponse {
        domain: null,
        _events: [Object],
        _eventsCount: 1,
        _maxListeners: undefined,
        output: [],
        outputEncodings: [],
        outputCallbacks: [],
        outputSize: 0,
        writable: true,
        _last: false,
        upgrading: false,
        chunkedEncoding: false,
        shouldKeepAlive: false,
        useChunkedEncodingByDefault: true,
        sendDate: true,
        _removedConnection: false,
        _removedContLen: false,
        _removedTE: false,
        _contentLength: null,
        _hasBody: true,
        _trailer: '',
        finished: false,
        _headerSent: false,
        socket: [Circular],
        connection: [Circular],
        _header: null,
        _onPendingData: [Function: bound updateOutgoingData],
        _sent100: false,
        _expect_continue: false,
        req: [Circular],
        locals: {},
        [Symbol(outHeadersKey)]: [Object] },
     [Symbol(asyncId)]: 175,
     [Symbol(bytesRead)]: 0,
     [Symbol(asyncId)]: 176,
     [Symbol(triggerAsyncId)]: 9 },
  _consuming: false,
  _dumped: false,
  next: [Function: next],
  baseUrl: '',
  originalUrl: '/',
  _parsedUrl: 
   Url {
     protocol: null,
     slashes: null,
     auth: null,
     host: null,
     port: null,
     hostname: null,
     hash: null,
     search: null,
     query: null,
     pathname: '/',
     path: '/',
     href: '/',
     _raw: '/' },
  params: {},
  query: {},
  res: 
   ServerResponse {
     domain: null,
     _events: { finish: [Array] },
     _eventsCount: 1,
     _maxListeners: undefined,
     output: [],
     outputEncodings: [],
     outputCallbacks: [],
     outputSize: 0,
     writable: true,
     _last: false,
     upgrading: false,
     chunkedEncoding: false,
     shouldKeepAlive: false,
     useChunkedEncodingByDefault: true,
     sendDate: true,
     _removedConnection: false,
     _removedContLen: false,
     _removedTE: false,
     _contentLength: null,
     _hasBody: true,
     _trailer: '',
     finished: false,
     _headerSent: false,
     socket: 
      Socket {
        connecting: false,
        _hadError: false,
        _handle: [Object],
        _parent: null,
        _host: null,
        _readableState: [Object],
        readable: true,
        domain: null,
        _events: [Object],
        _eventsCount: 10,
        _maxListeners: undefined,
        _writableState: [Object],
        writable: true,
        allowHalfOpen: true,
        _bytesDispatched: 0,
        _sockname: null,
        _pendingData: null,
        _pendingEncoding: '',
        server: [Object],
        _server: [Object],
        _idleTimeout: 120000,
        _idleNext: [Object],
        _idlePrev: [Object],
        _idleStart: 160102,
        _destroyed: false,
        parser: [Object],
        on: [Function: socketOnWrap],
        _paused: false,
        read: [Function],
        _consuming: true,
        _httpMessage: [Circular],
        [Symbol(asyncId)]: 175,
        [Symbol(bytesRead)]: 0,
        [Symbol(asyncId)]: 176,
        [Symbol(triggerAsyncId)]: 9 },
     connection: 
      Socket {
        connecting: false,
        _hadError: false,
        _handle: [Object],
        _parent: null,
        _host: null,
        _readableState: [Object],
        readable: true,
        domain: null,
        _events: [Object],
        _eventsCount: 10,
        _maxListeners: undefined,
        _writableState: [Object],
        writable: true,
        allowHalfOpen: true,
        _bytesDispatched: 0,
        _sockname: null,
        _pendingData: null,
        _pendingEncoding: '',
        server: [Object],
        _server: [Object],
        _idleTimeout: 120000,
        _idleNext: [Object],
        _idlePrev: [Object],
        _idleStart: 160102,
        _destroyed: false,
        parser: [Object],
        on: [Function: socketOnWrap],
        _paused: false,
        read: [Function],
        _consuming: true,
        _httpMessage: [Circular],
        [Symbol(asyncId)]: 175,
        [Symbol(bytesRead)]: 0,
        [Symbol(asyncId)]: 176,
        [Symbol(triggerAsyncId)]: 9 },
     _header: null,
     _onPendingData: [Function: bound updateOutgoingData],
     _sent100: false,
     _expect_continue: false,
     req: [Circular],
     locals: {},
     [Symbol(outHeadersKey)]: 
      { 'x-powered-by': [Array],
        'cache-control': [Array],
        pragma: [Array],
        expires: [Array],
        vary: [Array] } },
  body: {} }
2018-04-07T18:06:01.574Z - info: Execution took 10 ms, user function completed successfully
2018-04-07T18:06:07.346Z - info: User function triggered, starting execution
2018-04-07T18:06:07.347Z - error: Request has invalid method. GET
2018-04-07T18:06:07.358Z - error: Invalid request IncomingMessage {
  _readableState: 
   ReadableState {
     objectMode: false,
     highWaterMark: 16384,
     buffer: BufferList { head: null, tail: null, length: 0 },
     length: 0,
     pipes: null,
     pipesCount: 0,
     flowing: null,
     ended: false,
     endEmitted: false,
     reading: false,
     sync: true,
     needReadable: false,
     emittedReadable: false,
     readableListening: false,
     resumeScheduled: false,
     destroyed: false,
     defaultEncoding: 'utf8',
     awaitDrain: 0,
     readingMore: true,
     decoder: null,
     encoding: null },
  readable: true,
  domain: null,
  _events: {},
  _eventsCount: 0,
  _maxListeners: undefined,
  socket: 
   Socket {
     connecting: false,
     _hadError: false,
     _handle: 
      TCP {
        reading: true,
        owner: [Circular],
        onread: [Function: onread],
        onconnection: null,
        writeQueueSize: 0,
        _consumed: true },
     _parent: null,
     _host: null,
     _readableState: 
      ReadableState {
        objectMode: false,
        highWaterMark: 16384,
        buffer: [Object],
        length: 0,
        pipes: null,
        pipesCount: 0,
        flowing: true,
        ended: false,
        endEmitted: false,
        reading: true,
        sync: false,
        needReadable: true,
        emittedReadable: false,
        readableListening: false,
        resumeScheduled: false,
        destroyed: false,
        defaultEncoding: 'utf8',
        awaitDrain: 0,
        readingMore: false,
        decoder: null,
        encoding: null },
     readable: true,
     domain: null,
     _events: 
      { end: [Array],
        finish: [Function: onSocketFinish],
        _socketEnd: [Function: onSocketEnd],
        drain: [Array],
        timeout: [Function: socketOnTimeout],
        data: [Function: bound socketOnData],
        error: [Function: socketOnError],
        close: [Array],
        resume: [Function: onSocketResume],
        pause: [Function: onSocketPause] },
     _eventsCount: 10,
     _maxListeners: undefined,
     _writableState: 
      WritableState {
        objectMode: false,
        highWaterMark: 16384,
        finalCalled: false,
        needDrain: false,
        ending: false,
        ended: false,
        finished: false,
        destroyed: false,
        decodeStrings: false,
        defaultEncoding: 'utf8',
        length: 0,
        writing: false,
        corked: 0,
        sync: true,
        bufferProcessing: false,
        onwrite: [Function: bound onwrite],
        writecb: null,
        writelen: 0,
        bufferedRequest: null,
        lastBufferedRequest: null,
        pendingcb: 0,
        prefinished: false,
        errorEmitted: false,
        bufferedRequestCount: 0,
        corkedRequestsFree: [Object] },
     writable: true,
     allowHalfOpen: true,
     _bytesDispatched: 0,
     _sockname: null,
     _pendingData: null,
     _pendingEncoding: '',
     server: 
      Server {
        domain: null,
        _events: [Object],
        _eventsCount: 2,
        _maxListeners: undefined,
        _connections: 1,
        _handle: [Object],
        _usingSlaves: false,
        _slaves: [],
        _unref: false,
        allowHalfOpen: true,
        pauseOnConnect: false,
        httpAllowHalfOpen: false,
        timeout: 120000,
        keepAliveTimeout: 5000,
        _pendingResponseData: 0,
        maxHeadersCount: null,
        _connectionKey: '4:127.0.0.1:0',
        [Symbol(asyncId)]: 9 },
     _server: 
      Server {
        domain: null,
        _events: [Object],
        _eventsCount: 2,
        _maxListeners: undefined,
        _connections: 1,
        _handle: [Object],
        _usingSlaves: false,
        _slaves: [],
        _unref: false,
        allowHalfOpen: true,
        pauseOnConnect: false,
        httpAllowHalfOpen: false,
        timeout: 120000,
        keepAliveTimeout: 5000,
        _pendingResponseData: 0,
        maxHeadersCount: null,
        _connectionKey: '4:127.0.0.1:0',
        [Symbol(asyncId)]: 9 },
     _idleTimeout: 120000,
     _idleNext: 
      TimersList {
        _idleNext: [Circular],
        _idlePrev: [Circular],
        _timer: [Object],
        _unrefed: true,
        msecs: 120000,
        nextTick: false },
     _idlePrev: 
      TimersList {
        _idleNext: [Circular],
        _idlePrev: [Circular],
        _timer: [Object],
        _unrefed: true,
        msecs: 120000,
        nextTick: false },
     _idleStart: 165886,
     _destroyed: false,
     parser: 
      HTTPParser {
        '0': [Function: parserOnHeaders],
        '1': [Function: parserOnHeadersComplete],
        '2': [Function: parserOnBody],
        '3': [Function: parserOnMessageComplete],
        '4': [Function: bound onParserExecute],
        _headers: [],
        _url: '',
        _consumed: true,
        socket: [Circular],
        incoming: [Circular],
        outgoing: null,
        maxHeaderPairs: 2000,
        onIncoming: [Function: bound parserOnIncoming] },
     on: [Function: socketOnWrap],
     _paused: false,
     read: [Function],
     _consuming: true,
     _httpMessage: 
      ServerResponse {
        domain: null,
        _events: [Object],
        _eventsCount: 1,
        _maxListeners: undefined,
        output: [],
        outputEncodings: [],
        outputCallbacks: [],
        outputSize: 0,
        writable: true,
        _last: false,
        upgrading: false,
        chunkedEncoding: false,
        shouldKeepAlive: false,
        useChunkedEncodingByDefault: true,
        sendDate: true,
        _removedConnection: false,
        _removedContLen: false,
        _removedTE: false,
        _contentLength: null,
        _hasBody: true,
        _trailer: '',
        finished: false,
        _headerSent: false,
        socket: [Circular],
        connection: [Circular],
        _header: null,
        _onPendingData: [Function: bound updateOutgoingData],
        _sent100: false,
        _expect_continue: false,
        req: [Circular],
        locals: {},
        [Symbol(outHeadersKey)]: [Object] },
     [Symbol(asyncId)]: 195,
     [Symbol(bytesRead)]: 0,
     [Symbol(asyncId)]: 196,
     [Symbol(triggerAsyncId)]: 9 },
  connection: 
   Socket {
     connecting: false,
     _hadError: false,
     _handle: 
      TCP {
        reading: true,
        owner: [Circular],
        onread: [Function: onread],
        onconnection: null,
        writeQueueSize: 0,
        _consumed: true },
     _parent: null,
     _host: null,
     _readableState: 
      ReadableState {
        objectMode: false,
        highWaterMark: 16384,
        buffer: [Object],
        length: 0,
        pipes: null,
        pipesCount: 0,
        flowing: true,
        ended: false,
        endEmitted: false,
        reading: true,
        sync: false,
        needReadable: true,
        emittedReadable: false,
        readableListening: false,
        resumeScheduled: false,
        destroyed: false,
        defaultEncoding: 'utf8',
        awaitDrain: 0,
        readingMore: false,
        decoder: null,
        encoding: null },
     readable: true,
     domain: null,
     _events: 
      { end: [Array],
        finish: [Function: onSocketFinish],
        _socketEnd: [Function: onSocketEnd],
        drain: [Array],
        timeout: [Function: socketOnTimeout],
        data: [Function: bound socketOnData],
        error: [Function: socketOnError],
        close: [Array],
        resume: [Function: onSocketResume],
        pause: [Function: onSocketPause] },
     _eventsCount: 10,
     _maxListeners: undefined,
     _writableState: 
      WritableState {
        objectMode: false,
        highWaterMark: 16384,
        finalCalled: false,
        needDrain: false,
        ending: false,
        ended: false,
        finished: false,
        destroyed: false,
        decodeStrings: false,
        defaultEncoding: 'utf8',
        length: 0,
        writing: false,
        corked: 0,
        sync: true,
        bufferProcessing: false,
        onwrite: [Function: bound onwrite],
        writecb: null,
        writelen: 0,
        bufferedRequest: null,
        lastBufferedRequest: null,
        pendingcb: 0,
        prefinished: false,
        errorEmitted: false,
        bufferedRequestCount: 0,
        corkedRequestsFree: [Object] },
     writable: true,
     allowHalfOpen: true,
     _bytesDispatched: 0,
     _sockname: null,
     _pendingData: null,
     _pendingEncoding: '',
     server: 
      Server {
        domain: null,
        _events: [Object],
        _eventsCount: 2,
        _maxListeners: undefined,
        _connections: 1,
        _handle: [Object],
        _usingSlaves: false,
        _slaves: [],
        _unref: false,
        allowHalfOpen: true,
        pauseOnConnect: false,
        httpAllowHalfOpen: false,
        timeout: 120000,
        keepAliveTimeout: 5000,
        _pendingResponseData: 0,
        maxHeadersCount: null,
        _connectionKey: '4:127.0.0.1:0',
        [Symbol(asyncId)]: 9 },
     _server: 
      Server {
        domain: null,
        _events: [Object],
        _eventsCount: 2,
        _maxListeners: undefined,
        _connections: 1,
        _handle: [Object],
        _usingSlaves: false,
        _slaves: [],
        _unref: false,
        allowHalfOpen: true,
        pauseOnConnect: false,
        httpAllowHalfOpen: false,
        timeout: 120000,
        keepAliveTimeout: 5000,
        _pendingResponseData: 0,
        maxHeadersCount: null,
        _connectionKey: '4:127.0.0.1:0',
        [Symbol(asyncId)]: 9 },
     _idleTimeout: 120000,
     _idleNext: 
      TimersList {
        _idleNext: [Circular],
        _idlePrev: [Circular],
        _timer: [Object],
        _unrefed: true,
        msecs: 120000,
        nextTick: false },
     _idlePrev: 
      TimersList {
        _idleNext: [Circular],
        _idlePrev: [Circular],
        _timer: [Object],
        _unrefed: true,
        msecs: 120000,
        nextTick: false },
     _idleStart: 165886,
     _destroyed: false,
     parser: 
      HTTPParser {
        '0': [Function: parserOnHeaders],
        '1': [Function: parserOnHeadersComplete],
        '2': [Function: parserOnBody],
        '3': [Function: parserOnMessageComplete],
        '4': [Function: bound onParserExecute],
        _headers: [],
        _url: '',
        _consumed: true,
        socket: [Circular],
        incoming: [Circular],
        outgoing: null,
        maxHeaderPairs: 2000,
        onIncoming: [Function: bound parserOnIncoming] },
     on: [Function: socketOnWrap],
     _paused: false,
     read: [Function],
     _consuming: true,
     _httpMessage: 
      ServerResponse {
        domain: null,
        _events: [Object],
        _eventsCount: 1,
        _maxListeners: undefined,
        output: [],
        outputEncodings: [],
        outputCallbacks: [],
        outputSize: 0,
        writable: true,
        _last: false,
        upgrading: false,
        chunkedEncoding: false,
        shouldKeepAlive: false,
        useChunkedEncodingByDefault: true,
        sendDate: true,
        _removedConnection: false,
        _removedContLen: false,
        _removedTE: false,
        _contentLength: null,
        _hasBody: true,
        _trailer: '',
        finished: false,
        _headerSent: false,
        socket: [Circular],
        connection: [Circular],
        _header: null,
        _onPendingData: [Function: bound updateOutgoingData],
        _sent100: false,
        _expect_continue: false,
        req: [Circular],
        locals: {},
        [Symbol(outHeadersKey)]: [Object] },
     [Symbol(asyncId)]: 195,
     [Symbol(bytesRead)]: 0,
     [Symbol(asyncId)]: 196,
     [Symbol(triggerAsyncId)]: 9 },
  httpVersionMajor: 1,
  httpVersionMinor: 1,
  httpVersion: '1.1',
  complete: false,
  headers: { connection: 'close', host: 'localhost:5000' },
  rawHeaders: [ 'connection', 'close', 'host', 'localhost:5000' ],
  trailers: {},
  rawTrailers: [],
  upgrade: false,
  url: '/',
  method: 'GET',
  statusCode: null,
  statusMessage: null,
  client: 
   Socket {
     connecting: false,
     _hadError: false,
     _handle: 
      TCP {
        reading: true,
        owner: [Circular],
        onread: [Function: onread],
        onconnection: null,
        writeQueueSize: 0,
        _consumed: true },
     _parent: null,
     _host: null,
     _readableState: 
      ReadableState {
        objectMode: false,
        highWaterMark: 16384,
        buffer: [Object],
        length: 0,
        pipes: null,
        pipesCount: 0,
        flowing: true,
        ended: false,
        endEmitted: false,
        reading: true,
        sync: false,
        needReadable: true,
        emittedReadable: false,
        readableListening: false,
        resumeScheduled: false,
        destroyed: false,
        defaultEncoding: 'utf8',
        awaitDrain: 0,
        readingMore: false,
        decoder: null,
        encoding: null },
     readable: true,
     domain: null,
     _events: 
      { end: [Array],
        finish: [Function: onSocketFinish],
        _socketEnd: [Function: onSocketEnd],
        drain: [Array],
        timeout: [Function: socketOnTimeout],
        data: [Function: bound socketOnData],
        error: [Function: socketOnError],
        close: [Array],
        resume: [Function: onSocketResume],
        pause: [Function: onSocketPause] },
     _eventsCount: 10,
     _maxListeners: undefined,
     _writableState: 
      WritableState {
        objectMode: false,
        highWaterMark: 16384,
        finalCalled: false,
        needDrain: false,
        ending: false,
        ended: false,
        finished: false,
        destroyed: false,
        decodeStrings: false,
        defaultEncoding: 'utf8',
        length: 0,
        writing: false,
        corked: 0,
        sync: true,
        bufferProcessing: false,
        onwrite: [Function: bound onwrite],
        writecb: null,
        writelen: 0,
        bufferedRequest: null,
        lastBufferedRequest: null,
        pendingcb: 0,
        prefinished: false,
        errorEmitted: false,
        bufferedRequestCount: 0,
        corkedRequestsFree: [Object] },
     writable: true,
     allowHalfOpen: true,
     _bytesDispatched: 0,
     _sockname: null,
     _pendingData: null,
     _pendingEncoding: '',
     server: 
      Server {
        domain: null,
        _events: [Object],
        _eventsCount: 2,
        _maxListeners: undefined,
        _connections: 1,
        _handle: [Object],
        _usingSlaves: false,
        _slaves: [],
        _unref: false,
        allowHalfOpen: true,
        pauseOnConnect: false,
        httpAllowHalfOpen: false,
        timeout: 120000,
        keepAliveTimeout: 5000,
        _pendingResponseData: 0,
        maxHeadersCount: null,
        _connectionKey: '4:127.0.0.1:0',
        [Symbol(asyncId)]: 9 },
     _server: 
      Server {
        domain: null,
        _events: [Object],
        _eventsCount: 2,
        _maxListeners: undefined,
        _connections: 1,
        _handle: [Object],
        _usingSlaves: false,
        _slaves: [],
        _unref: false,
        allowHalfOpen: true,
        pauseOnConnect: false,
        httpAllowHalfOpen: false,
        timeout: 120000,
        keepAliveTimeout: 5000,
        _pendingResponseData: 0,
        maxHeadersCount: null,
        _connectionKey: '4:127.0.0.1:0',
        [Symbol(asyncId)]: 9 },
     _idleTimeout: 120000,
     _idleNext: 
      TimersList {
        _idleNext: [Circular],
        _idlePrev: [Circular],
        _timer: [Object],
        _unrefed: true,
        msecs: 120000,
        nextTick: false },
     _idlePrev: 
      TimersList {
        _idleNext: [Circular],
        _idlePrev: [Circular],
        _timer: [Object],
        _unrefed: true,
        msecs: 120000,
        nextTick: false },
     _idleStart: 165886,
     _destroyed: false,
     parser: 
      HTTPParser {
        '0': [Function: parserOnHeaders],
        '1': [Function: parserOnHeadersComplete],
        '2': [Function: parserOnBody],
        '3': [Function: parserOnMessageComplete],
        '4': [Function: bound onParserExecute],
        _headers: [],
        _url: '',
        _consumed: true,
        socket: [Circular],
        incoming: [Circular],
        outgoing: null,
        maxHeaderPairs: 2000,
        onIncoming: [Function: bound parserOnIncoming] },
     on: [Function: socketOnWrap],
     _paused: false,
     read: [Function],
     _consuming: true,
     _httpMessage: 
      ServerResponse {
        domain: null,
        _events: [Object],
        _eventsCount: 1,
        _maxListeners: undefined,
        output: [],
        outputEncodings: [],
        outputCallbacks: [],
        outputSize: 0,
        writable: true,
        _last: false,
        upgrading: false,
        chunkedEncoding: false,
        shouldKeepAlive: false,
        useChunkedEncodingByDefault: true,
        sendDate: true,
        _removedConnection: false,
        _removedContLen: false,
        _removedTE: false,
        _contentLength: null,
        _hasBody: true,
        _trailer: '',
        finished: false,
        _headerSent: false,
        socket: [Circular],
        connection: [Circular],
        _header: null,
        _onPendingData: [Function: bound updateOutgoingData],
        _sent100: false,
        _expect_continue: false,
        req: [Circular],
        locals: {},
        [Symbol(outHeadersKey)]: [Object] },
     [Symbol(asyncId)]: 195,
     [Symbol(bytesRead)]: 0,
     [Symbol(asyncId)]: 196,
     [Symbol(triggerAsyncId)]: 9 },
  _consuming: false,
  _dumped: false,
  next: [Function: next],
  baseUrl: '',
  originalUrl: '/',
  _parsedUrl: 
   Url {
     protocol: null,
     slashes: null,
     auth: null,
     host: null,
     port: null,
     hostname: null,
     hash: null,
     search: null,
     query: null,
     pathname: '/',
     path: '/',
     href: '/',
     _raw: '/' },
  params: {},
  query: {},
  res: 
   ServerResponse {
     domain: null,
     _events: { finish: [Array] },
     _eventsCount: 1,
     _maxListeners: undefined,
     output: [],
     outputEncodings: [],
     outputCallbacks: [],
     outputSize: 0,
     writable: true,
     _last: false,
     upgrading: false,
     chunkedEncoding: false,
     shouldKeepAlive: false,
     useChunkedEncodingByDefault: true,
     sendDate: true,
     _removedConnection: false,
     _removedContLen: false,
     _removedTE: false,
     _contentLength: null,
     _hasBody: true,
     _trailer: '',
     finished: false,
     _headerSent: false,
     socket: 
      Socket {
        connecting: false,
        _hadError: false,
        _handle: [Object],
        _parent: null,
        _host: null,
        _readableState: [Object],
        readable: true,
        domain: null,
        _events: [Object],
        _eventsCount: 10,
        _maxListeners: undefined,
        _writableState: [Object],
        writable: true,
        allowHalfOpen: true,
        _bytesDispatched: 0,
        _sockname: null,
        _pendingData: null,
        _pendingEncoding: '',
        server: [Object],
        _server: [Object],
        _idleTimeout: 120000,
        _idleNext: [Object],
        _idlePrev: [Object],
        _idleStart: 165886,
        _destroyed: false,
        parser: [Object],
        on: [Function: socketOnWrap],
        _paused: false,
        read: [Function],
        _consuming: true,
        _httpMessage: [Circular],
        [Symbol(asyncId)]: 195,
        [Symbol(bytesRead)]: 0,
        [Symbol(asyncId)]: 196,
        [Symbol(triggerAsyncId)]: 9 },
     connection: 
      Socket {
        connecting: false,
        _hadError: false,
        _handle: [Object],
        _parent: null,
        _host: null,
        _readableState: [Object],
        readable: true,
        domain: null,
        _events: [Object],
        _eventsCount: 10,
        _maxListeners: undefined,
        _writableState: [Object],
        writable: true,
        allowHalfOpen: true,
        _bytesDispatched: 0,
        _sockname: null,
        _pendingData: null,
        _pendingEncoding: '',
        server: [Object],
        _server: [Object],
        _idleTimeout: 120000,
        _idleNext: [Object],
        _idlePrev: [Object],
        _idleStart: 165886,
        _destroyed: false,
        parser: [Object],
        on: [Function: socketOnWrap],
        _paused: false,
        read: [Function],
        _consuming: true,
        _httpMessage: [Circular],
        [Symbol(asyncId)]: 195,
        [Symbol(bytesRead)]: 0,
        [Symbol(asyncId)]: 196,
        [Symbol(triggerAsyncId)]: 9 },
     _header: null,
     _onPendingData: [Function: bound updateOutgoingData],
     _sent100: false,
     _expect_continue: false,
     req: [Circular],
     locals: {},
     [Symbol(outHeadersKey)]: 
      { 'x-powered-by': [Array],
        'cache-control': [Array],
        pragma: [Array],
        expires: [Array],
        vary: [Array] } },
  body: {} }
2018-04-07T18:06:07.362Z - info: Execution took 13 ms, user function completed successfully
2018-04-07T18:06:27.245Z - info: User function triggered, starting execution
2018-04-07T18:06:27.246Z - error: Request has invalid method. GET
2018-04-07T18:06:27.257Z - error: Invalid request IncomingMessage {
  _readableState: 
   ReadableState {
     objectMode: false,
     highWaterMark: 16384,
     buffer: BufferList { head: null, tail: null, length: 0 },
     length: 0,
     pipes: null,
     pipesCount: 0,
     flowing: null,
     ended: false,
     endEmitted: false,
     reading: false,
     sync: true,
     needReadable: false,
     emittedReadable: false,
     readableListening: false,
     resumeScheduled: false,
     destroyed: false,
     defaultEncoding: 'utf8',
     awaitDrain: 0,
     readingMore: true,
     decoder: null,
     encoding: null },
  readable: true,
  domain: null,
  _events: {},
  _eventsCount: 0,
  _maxListeners: undefined,
  socket: 
   Socket {
     connecting: false,
     _hadError: false,
     _handle: 
      TCP {
        reading: true,
        owner: [Circular],
        onread: [Function: onread],
        onconnection: null,
        writeQueueSize: 0,
        _consumed: true },
     _parent: null,
     _host: null,
     _readableState: 
      ReadableState {
        objectMode: false,
        highWaterMark: 16384,
        buffer: [Object],
        length: 0,
        pipes: null,
        pipesCount: 0,
        flowing: true,
        ended: false,
        endEmitted: false,
        reading: true,
        sync: false,
        needReadable: true,
        emittedReadable: false,
        readableListening: false,
        resumeScheduled: false,
        destroyed: false,
        defaultEncoding: 'utf8',
        awaitDrain: 0,
        readingMore: false,
        decoder: null,
        encoding: null },
     readable: true,
     domain: null,
     _events: 
      { end: [Array],
        finish: [Function: onSocketFinish],
        _socketEnd: [Function: onSocketEnd],
        drain: [Array],
        timeout: [Function: socketOnTimeout],
        data: [Function: bound socketOnData],
        error: [Function: socketOnError],
        close: [Array],
        resume: [Function: onSocketResume],
        pause: [Function: onSocketPause] },
     _eventsCount: 10,
     _maxListeners: undefined,
     _writableState: 
      WritableState {
        objectMode: false,
        highWaterMark: 16384,
        finalCalled: false,
        needDrain: false,
        ending: false,
        ended: false,
        finished: false,
        destroyed: false,
        decodeStrings: false,
        defaultEncoding: 'utf8',
        length: 0,
        writing: false,
        corked: 0,
        sync: true,
        bufferProcessing: false,
        onwrite: [Function: bound onwrite],
        writecb: null,
        writelen: 0,
        bufferedRequest: null,
        lastBufferedRequest: null,
        pendingcb: 0,
        prefinished: false,
        errorEmitted: false,
        bufferedRequestCount: 0,
        corkedRequestsFree: [Object] },
     writable: true,
     allowHalfOpen: true,
     _bytesDispatched: 0,
     _sockname: null,
     _pendingData: null,
     _pendingEncoding: '',
     server: 
      Server {
        domain: null,
        _events: [Object],
        _eventsCount: 2,
        _maxListeners: undefined,
        _connections: 1,
        _handle: [Object],
        _usingSlaves: false,
        _slaves: [],
        _unref: false,
        allowHalfOpen: true,
        pauseOnConnect: false,
        httpAllowHalfOpen: false,
        timeout: 120000,
        keepAliveTimeout: 5000,
        _pendingResponseData: 0,
        maxHeadersCount: null,
        _connectionKey: '4:127.0.0.1:0',
        [Symbol(asyncId)]: 9 },
     _server: 
      Server {
        domain: null,
        _events: [Object],
        _eventsCount: 2,
        _maxListeners: undefined,
        _connections: 1,
        _handle: [Object],
        _usingSlaves: false,
        _slaves: [],
        _unref: false,
        allowHalfOpen: true,
        pauseOnConnect: false,
        httpAllowHalfOpen: false,
        timeout: 120000,
        keepAliveTimeout: 5000,
        _pendingResponseData: 0,
        maxHeadersCount: null,
        _connectionKey: '4:127.0.0.1:0',
        [Symbol(asyncId)]: 9 },
     _idleTimeout: 120000,
     _idleNext: 
      TimersList {
        _idleNext: [Circular],
        _idlePrev: [Circular],
        _timer: [Object],
        _unrefed: true,
        msecs: 120000,
        nextTick: false },
     _idlePrev: 
      TimersList {
        _idleNext: [Circular],
        _idlePrev: [Circular],
        _timer: [Object],
        _unrefed: true,
        msecs: 120000,
        nextTick: false },
     _idleStart: 185785,
     _destroyed: false,
     parser: 
      HTTPParser {
        '0': [Function: parserOnHeaders],
        '1': [Function: parserOnHeadersComplete],
        '2': [Function: parserOnBody],
        '3': [Function: parserOnMessageComplete],
        '4': [Function: bound onParserExecute],
        _headers: [],
        _url: '',
        _consumed: true,
        socket: [Circular],
        incoming: [Circular],
        outgoing: null,
        maxHeaderPairs: 2000,
        onIncoming: [Function: bound parserOnIncoming] },
     on: [Function: socketOnWrap],
     _paused: false,
     read: [Function],
     _consuming: true,
     _httpMessage: 
      ServerResponse {
        domain: null,
        _events: [Object],
        _eventsCount: 1,
        _maxListeners: undefined,
        output: [],
        outputEncodings: [],
        outputCallbacks: [],
        outputSize: 0,
        writable: true,
        _last: false,
        upgrading: false,
        chunkedEncoding: false,
        shouldKeepAlive: false,
        useChunkedEncodingByDefault: true,
        sendDate: true,
        _removedConnection: false,
        _removedContLen: false,
        _removedTE: false,
        _contentLength: null,
        _hasBody: true,
        _trailer: '',
        finished: false,
        _headerSent: false,
        socket: [Circular],
        connection: [Circular],
        _header: null,
        _onPendingData: [Function: bound updateOutgoingData],
        _sent100: false,
        _expect_continue: false,
        req: [Circular],
        locals: {},
        [Symbol(outHeadersKey)]: [Object] },
     [Symbol(asyncId)]: 215,
     [Symbol(bytesRead)]: 0,
     [Symbol(asyncId)]: 216,
     [Symbol(triggerAsyncId)]: 9 },
  connection: 
   Socket {
     connecting: false,
     _hadError: false,
     _handle: 
      TCP {
        reading: true,
        owner: [Circular],
        onread: [Function: onread],
        onconnection: null,
        writeQueueSize: 0,
        _consumed: true },
     _parent: null,
     _host: null,
     _readableState: 
      ReadableState {
        objectMode: false,
        highWaterMark: 16384,
        buffer: [Object],
        length: 0,
        pipes: null,
        pipesCount: 0,
        flowing: true,
        ended: false,
        endEmitted: false,
        reading: true,
        sync: false,
        needReadable: true,
        emittedReadable: false,
        readableListening: false,
        resumeScheduled: false,
        destroyed: false,
        defaultEncoding: 'utf8',
        awaitDrain: 0,
        readingMore: false,
        decoder: null,
        encoding: null },
     readable: true,
     domain: null,
     _events: 
      { end: [Array],
        finish: [Function: onSocketFinish],
        _socketEnd: [Function: onSocketEnd],
        drain: [Array],
        timeout: [Function: socketOnTimeout],
        data: [Function: bound socketOnData],
        error: [Function: socketOnError],
        close: [Array],
        resume: [Function: onSocketResume],
        pause: [Function: onSocketPause] },
     _eventsCount: 10,
     _maxListeners: undefined,
     _writableState: 
      WritableState {
        objectMode: false,
        highWaterMark: 16384,
        finalCalled: false,
        needDrain: false,
        ending: false,
        ended: false,
        finished: false,
        destroyed: false,
        decodeStrings: false,
        defaultEncoding: 'utf8',
        length: 0,
        writing: false,
        corked: 0,
        sync: true,
        bufferProcessing: false,
        onwrite: [Function: bound onwrite],
        writecb: null,
        writelen: 0,
        bufferedRequest: null,
        lastBufferedRequest: null,
        pendingcb: 0,
        prefinished: false,
        errorEmitted: false,
        bufferedRequestCount: 0,
        corkedRequestsFree: [Object] },
     writable: true,
     allowHalfOpen: true,
     _bytesDispatched: 0,
     _sockname: null,
     _pendingData: null,
     _pendingEncoding: '',
     server: 
      Server {
        domain: null,
        _events: [Object],
        _eventsCount: 2,
        _maxListeners: undefined,
        _connections: 1,
        _handle: [Object],
        _usingSlaves: false,
        _slaves: [],
        _unref: false,
        allowHalfOpen: true,
        pauseOnConnect: false,
        httpAllowHalfOpen: false,
        timeout: 120000,
        keepAliveTimeout: 5000,
        _pendingResponseData: 0,
        maxHeadersCount: null,
        _connectionKey: '4:127.0.0.1:0',
        [Symbol(asyncId)]: 9 },
     _server: 
      Server {
        domain: null,
        _events: [Object],
        _eventsCount: 2,
        _maxListeners: undefined,
        _connections: 1,
        _handle: [Object],
        _usingSlaves: false,
        _slaves: [],
        _unref: false,
        allowHalfOpen: true,
        pauseOnConnect: false,
        httpAllowHalfOpen: false,
        timeout: 120000,
        keepAliveTimeout: 5000,
        _pendingResponseData: 0,
        maxHeadersCount: null,
        _connectionKey: '4:127.0.0.1:0',
        [Symbol(asyncId)]: 9 },
     _idleTimeout: 120000,
     _idleNext: 
      TimersList {
        _idleNext: [Circular],
        _idlePrev: [Circular],
        _timer: [Object],
        _unrefed: true,
        msecs: 120000,
        nextTick: false },
     _idlePrev: 
      TimersList {
        _idleNext: [Circular],
        _idlePrev: [Circular],
        _timer: [Object],
        _unrefed: true,
        msecs: 120000,
        nextTick: false },
     _idleStart: 185785,
     _destroyed: false,
     parser: 
      HTTPParser {
        '0': [Function: parserOnHeaders],
        '1': [Function: parserOnHeadersComplete],
        '2': [Function: parserOnBody],
        '3': [Function: parserOnMessageComplete],
        '4': [Function: bound onParserExecute],
        _headers: [],
        _url: '',
        _consumed: true,
        socket: [Circular],
        incoming: [Circular],
        outgoing: null,
        maxHeaderPairs: 2000,
        onIncoming: [Function: bound parserOnIncoming] },
     on: [Function: socketOnWrap],
     _paused: false,
     read: [Function],
     _consuming: true,
     _httpMessage: 
      ServerResponse {
        domain: null,
        _events: [Object],
        _eventsCount: 1,
        _maxListeners: undefined,
        output: [],
        outputEncodings: [],
        outputCallbacks: [],
        outputSize: 0,
        writable: true,
        _last: false,
        upgrading: false,
        chunkedEncoding: false,
        shouldKeepAlive: false,
        useChunkedEncodingByDefault: true,
        sendDate: true,
        _removedConnection: false,
        _removedContLen: false,
        _removedTE: false,
        _contentLength: null,
        _hasBody: true,
        _trailer: '',
        finished: false,
        _headerSent: false,
        socket: [Circular],
        connection: [Circular],
        _header: null,
        _onPendingData: [Function: bound updateOutgoingData],
        _sent100: false,
        _expect_continue: false,
        req: [Circular],
        locals: {},
        [Symbol(outHeadersKey)]: [Object] },
     [Symbol(asyncId)]: 215,
     [Symbol(bytesRead)]: 0,
     [Symbol(asyncId)]: 216,
     [Symbol(triggerAsyncId)]: 9 },
  httpVersionMajor: 1,
  httpVersionMinor: 1,
  httpVersion: '1.1',
  complete: false,
  headers: { connection: 'close', host: 'localhost:5000' },
  rawHeaders: [ 'connection', 'close', 'host', 'localhost:5000' ],
  trailers: {},
  rawTrailers: [],
  upgrade: false,
  url: '/',
  method: 'GET',
  statusCode: null,
  statusMessage: null,
  client: 
   Socket {
     connecting: false,
     _hadError: false,
     _handle: 
      TCP {
        reading: true,
        owner: [Circular],
        onread: [Function: onread],
        onconnection: null,
        writeQueueSize: 0,
        _consumed: true },
     _parent: null,
     _host: null,
     _readableState: 
      ReadableState {
        objectMode: false,
        highWaterMark: 16384,
        buffer: [Object],
        length: 0,
        pipes: null,
        pipesCount: 0,
        flowing: true,
        ended: false,
        endEmitted: false,
        reading: true,
        sync: false,
        needReadable: true,
        emittedReadable: false,
        readableListening: false,
        resumeScheduled: false,
        destroyed: false,
        defaultEncoding: 'utf8',
        awaitDrain: 0,
        readingMore: false,
        decoder: null,
        encoding: null },
     readable: true,
     domain: null,
     _events: 
      { end: [Array],
        finish: [Function: onSocketFinish],
        _socketEnd: [Function: onSocketEnd],
        drain: [Array],
        timeout: [Function: socketOnTimeout],
        data: [Function: bound socketOnData],
        error: [Function: socketOnError],
        close: [Array],
        resume: [Function: onSocketResume],
        pause: [Function: onSocketPause] },
     _eventsCount: 10,
     _maxListeners: undefined,
     _writableState: 
      WritableState {
        objectMode: false,
        highWaterMark: 16384,
        finalCalled: false,
        needDrain: false,
        ending: false,
        ended: false,
        finished: false,
        destroyed: false,
        decodeStrings: false,
        defaultEncoding: 'utf8',
        length: 0,
        writing: false,
        corked: 0,
        sync: true,
        bufferProcessing: false,
        onwrite: [Function: bound onwrite],
        writecb: null,
        writelen: 0,
        bufferedRequest: null,
        lastBufferedRequest: null,
        pendingcb: 0,
        prefinished: false,
        errorEmitted: false,
        bufferedRequestCount: 0,
        corkedRequestsFree: [Object] },
     writable: true,
     allowHalfOpen: true,
     _bytesDispatched: 0,
     _sockname: null,
     _pendingData: null,
     _pendingEncoding: '',
     server: 
      Server {
        domain: null,
        _events: [Object],
        _eventsCount: 2,
        _maxListeners: undefined,
        _connections: 1,
        _handle: [Object],
        _usingSlaves: false,
        _slaves: [],
        _unref: false,
        allowHalfOpen: true,
        pauseOnConnect: false,
        httpAllowHalfOpen: false,
        timeout: 120000,
        keepAliveTimeout: 5000,
        _pendingResponseData: 0,
        maxHeadersCount: null,
        _connectionKey: '4:127.0.0.1:0',
        [Symbol(asyncId)]: 9 },
     _server: 
      Server {
        domain: null,
        _events: [Object],
        _eventsCount: 2,
        _maxListeners: undefined,
        _connections: 1,
        _handle: [Object],
        _usingSlaves: false,
        _slaves: [],
        _unref: false,
        allowHalfOpen: true,
        pauseOnConnect: false,
        httpAllowHalfOpen: false,
        timeout: 120000,
        keepAliveTimeout: 5000,
        _pendingResponseData: 0,
        maxHeadersCount: null,
        _connectionKey: '4:127.0.0.1:0',
        [Symbol(asyncId)]: 9 },
     _idleTimeout: 120000,
     _idleNext: 
      TimersList {
        _idleNext: [Circular],
        _idlePrev: [Circular],
        _timer: [Object],
        _unrefed: true,
        msecs: 120000,
        nextTick: false },
     _idlePrev: 
      TimersList {
        _idleNext: [Circular],
        _idlePrev: [Circular],
        _timer: [Object],
        _unrefed: true,
        msecs: 120000,
        nextTick: false },
     _idleStart: 185785,
     _destroyed: false,
     parser: 
      HTTPParser {
        '0': [Function: parserOnHeaders],
        '1': [Function: parserOnHeadersComplete],
        '2': [Function: parserOnBody],
        '3': [Function: parserOnMessageComplete],
        '4': [Function: bound onParserExecute],
        _headers: [],
        _url: '',
        _consumed: true,
        socket: [Circular],
        incoming: [Circular],
        outgoing: null,
        maxHeaderPairs: 2000,
        onIncoming: [Function: bound parserOnIncoming] },
     on: [Function: socketOnWrap],
     _paused: false,
     read: [Function],
     _consuming: true,
     _httpMessage: 
      ServerResponse {
        domain: null,
        _events: [Object],
        _eventsCount: 1,
        _maxListeners: undefined,
        output: [],
        outputEncodings: [],
        outputCallbacks: [],
        outputSize: 0,
        writable: true,
        _last: false,
        upgrading: false,
        chunkedEncoding: false,
        shouldKeepAlive: false,
        useChunkedEncodingByDefault: true,
        sendDate: true,
        _removedConnection: false,
        _removedContLen: false,
        _removedTE: false,
        _contentLength: null,
        _hasBody: true,
        _trailer: '',
        finished: false,
        _headerSent: false,
        socket: [Circular],
        connection: [Circular],
        _header: null,
        _onPendingData: [Function: bound updateOutgoingData],
        _sent100: false,
        _expect_continue: false,
        req: [Circular],
        locals: {},
        [Symbol(outHeadersKey)]: [Object] },
     [Symbol(asyncId)]: 215,
     [Symbol(bytesRead)]: 0,
     [Symbol(asyncId)]: 216,
     [Symbol(triggerAsyncId)]: 9 },
  _consuming: false,
  _dumped: false,
  next: [Function: next],
  baseUrl: '',
  originalUrl: '/',
  _parsedUrl: 
   Url {
     protocol: null,
     slashes: null,
     auth: null,
     host: null,
     port: null,
     hostname: null,
     hash: null,
     search: null,
     query: null,
     pathname: '/',
     path: '/',
     href: '/',
     _raw: '/' },
  params: {},
  query: {},
  res: 
   ServerResponse {
     domain: null,
     _events: { finish: [Array] },
     _eventsCount: 1,
     _maxListeners: undefined,
     output: [],
     outputEncodings: [],
     outputCallbacks: [],
     outputSize: 0,
     writable: true,
     _last: false,
     upgrading: false,
     chunkedEncoding: false,
     shouldKeepAlive: false,
     useChunkedEncodingByDefault: true,
     sendDate: true,
     _removedConnection: false,
     _removedContLen: false,
     _removedTE: false,
     _contentLength: null,
     _hasBody: true,
     _trailer: '',
     finished: false,
     _headerSent: false,
     socket: 
      Socket {
        connecting: false,
        _hadError: false,
        _handle: [Object],
        _parent: null,
        _host: null,
        _readableState: [Object],
        readable: true,
        domain: null,
        _events: [Object],
        _eventsCount: 10,
        _maxListeners: undefined,
        _writableState: [Object],
        writable: true,
        allowHalfOpen: true,
        _bytesDispatched: 0,
        _sockname: null,
        _pendingData: null,
        _pendingEncoding: '',
        server: [Object],
        _server: [Object],
        _idleTimeout: 120000,
        _idleNext: [Object],
        _idlePrev: [Object],
        _idleStart: 185785,
        _destroyed: false,
        parser: [Object],
        on: [Function: socketOnWrap],
        _paused: false,
        read: [Function],
        _consuming: true,
        _httpMessage: [Circular],
        [Symbol(asyncId)]: 215,
        [Symbol(bytesRead)]: 0,
        [Symbol(asyncId)]: 216,
        [Symbol(triggerAsyncId)]: 9 },
     connection: 
      Socket {
        connecting: false,
        _hadError: false,
        _handle: [Object],
        _parent: null,
        _host: null,
        _readableState: [Object],
        readable: true,
        domain: null,
        _events: [Object],
        _eventsCount: 10,
        _maxListeners: undefined,
        _writableState: [Object],
        writable: true,
        allowHalfOpen: true,
        _bytesDispatched: 0,
        _sockname: null,
        _pendingData: null,
        _pendingEncoding: '',
        server: [Object],
        _server: [Object],
        _idleTimeout: 120000,
        _idleNext: [Object],
        _idlePrev: [Object],
        _idleStart: 185785,
        _destroyed: false,
        parser: [Object],
        on: [Function: socketOnWrap],
        _paused: false,
        read: [Function],
        _consuming: true,
        _httpMessage: [Circular],
        [Symbol(asyncId)]: 215,
        [Symbol(bytesRead)]: 0,
        [Symbol(asyncId)]: 216,
        [Symbol(triggerAsyncId)]: 9 },
     _header: null,
     _onPendingData: [Function: bound updateOutgoingData],
     _sent100: false,
     _expect_continue: false,
     req: [Circular],
     locals: {},
     [Symbol(outHeadersKey)]: 
      { 'x-powered-by': [Array],
        'cache-control': [Array],
        pragma: [Array],
        expires: [Array],
        vary: [Array] } },
  body: {} }
2018-04-07T18:06:27.259Z - info: Execution took 12 ms, user function completed successfully
2018-04-07T18:06:55.316Z - info: Worker for getChannels closed due to file changes.
2018-04-07T18:06:55.316Z - info: Worker for test closed due to file changes.
2018-04-07T18:09:06.487Z - info: User function triggered, starting execution
2018-04-07T18:09:06.490Z - error: Request has invalid method. GET
2018-04-07T18:09:06.510Z - error: Invalid request IncomingMessage {
  _readableState: 
   ReadableState {
     objectMode: false,
     highWaterMark: 16384,
     buffer: BufferList { head: null, tail: null, length: 0 },
     length: 0,
     pipes: null,
     pipesCount: 0,
     flowing: null,
     ended: false,
     endEmitted: false,
     reading: false,
     sync: true,
     needReadable: false,
     emittedReadable: false,
     readableListening: false,
     resumeScheduled: false,
     destroyed: false,
     defaultEncoding: 'utf8',
     awaitDrain: 0,
     readingMore: true,
     decoder: null,
     encoding: null },
  readable: true,
  domain: null,
  _events: {},
  _eventsCount: 0,
  _maxListeners: undefined,
  socket: 
   Socket {
     connecting: false,
     _hadError: false,
     _handle: 
      TCP {
        reading: true,
        owner: [Circular],
        onread: [Function: onread],
        onconnection: null,
        writeQueueSize: 0,
        _consumed: true },
     _parent: null,
     _host: null,
     _readableState: 
      ReadableState {
        objectMode: false,
        highWaterMark: 16384,
        buffer: [Object],
        length: 0,
        pipes: null,
        pipesCount: 0,
        flowing: true,
        ended: false,
        endEmitted: false,
        reading: true,
        sync: false,
        needReadable: true,
        emittedReadable: false,
        readableListening: false,
        resumeScheduled: false,
        destroyed: false,
        defaultEncoding: 'utf8',
        awaitDrain: 0,
        readingMore: false,
        decoder: null,
        encoding: null },
     readable: true,
     domain: null,
     _events: 
      { end: [Array],
        finish: [Function: onSocketFinish],
        _socketEnd: [Function: onSocketEnd],
        drain: [Array],
        timeout: [Function: socketOnTimeout],
        data: [Function: bound socketOnData],
        error: [Function: socketOnError],
        close: [Array],
        resume: [Function: onSocketResume],
        pause: [Function: onSocketPause] },
     _eventsCount: 10,
     _maxListeners: undefined,
     _writableState: 
      WritableState {
        objectMode: false,
        highWaterMark: 16384,
        finalCalled: false,
        needDrain: false,
        ending: false,
        ended: false,
        finished: false,
        destroyed: false,
        decodeStrings: false,
        defaultEncoding: 'utf8',
        length: 0,
        writing: false,
        corked: 0,
        sync: true,
        bufferProcessing: false,
        onwrite: [Function: bound onwrite],
        writecb: null,
        writelen: 0,
        bufferedRequest: null,
        lastBufferedRequest: null,
        pendingcb: 0,
        prefinished: false,
        errorEmitted: false,
        bufferedRequestCount: 0,
        corkedRequestsFree: [Object] },
     writable: true,
     allowHalfOpen: true,
     _bytesDispatched: 0,
     _sockname: null,
     _pendingData: null,
     _pendingEncoding: '',
     server: 
      Server {
        domain: null,
        _events: [Object],
        _eventsCount: 2,
        _maxListeners: undefined,
        _connections: 1,
        _handle: [Object],
        _usingSlaves: false,
        _slaves: [],
        _unref: false,
        allowHalfOpen: true,
        pauseOnConnect: false,
        httpAllowHalfOpen: false,
        timeout: 120000,
        keepAliveTimeout: 5000,
        _pendingResponseData: 0,
        maxHeadersCount: null,
        _connectionKey: '4:127.0.0.1:0',
        [Symbol(asyncId)]: 9 },
     _server: 
      Server {
        domain: null,
        _events: [Object],
        _eventsCount: 2,
        _maxListeners: undefined,
        _connections: 1,
        _handle: [Object],
        _usingSlaves: false,
        _slaves: [],
        _unref: false,
        allowHalfOpen: true,
        pauseOnConnect: false,
        httpAllowHalfOpen: false,
        timeout: 120000,
        keepAliveTimeout: 5000,
        _pendingResponseData: 0,
        maxHeadersCount: null,
        _connectionKey: '4:127.0.0.1:0',
        [Symbol(asyncId)]: 9 },
     _idleTimeout: 120000,
     _idleNext: 
      TimersList {
        _idleNext: [Circular],
        _idlePrev: [Circular],
        _timer: [Object],
        _unrefed: true,
        msecs: 120000,
        nextTick: false },
     _idlePrev: 
      TimersList {
        _idleNext: [Circular],
        _idlePrev: [Circular],
        _timer: [Object],
        _unrefed: true,
        msecs: 120000,
        nextTick: false },
     _idleStart: 593,
     _destroyed: false,
     parser: 
      HTTPParser {
        '0': [Function: parserOnHeaders],
        '1': [Function: parserOnHeadersComplete],
        '2': [Function: parserOnBody],
        '3': [Function: parserOnMessageComplete],
        '4': [Function: bound onParserExecute],
        _headers: [],
        _url: '',
        _consumed: true,
        socket: [Circular],
        incoming: [Circular],
        outgoing: null,
        maxHeaderPairs: 2000,
        onIncoming: [Function: bound parserOnIncoming] },
     on: [Function: socketOnWrap],
     _paused: false,
     read: [Function],
     _consuming: true,
     _httpMessage: 
      ServerResponse {
        domain: null,
        _events: [Object],
        _eventsCount: 1,
        _maxListeners: undefined,
        output: [],
        outputEncodings: [],
        outputCallbacks: [],
        outputSize: 0,
        writable: true,
        _last: false,
        upgrading: false,
        chunkedEncoding: false,
        shouldKeepAlive: false,
        useChunkedEncodingByDefault: true,
        sendDate: true,
        _removedConnection: false,
        _removedContLen: false,
        _removedTE: false,
        _contentLength: null,
        _hasBody: true,
        _trailer: '',
        finished: false,
        _headerSent: false,
        socket: [Circular],
        connection: [Circular],
        _header: null,
        _onPendingData: [Function: bound updateOutgoingData],
        _sent100: false,
        _expect_continue: false,
        req: [Circular],
        locals: {},
        [Symbol(outHeadersKey)]: [Object] },
     [Symbol(asyncId)]: 11,
     [Symbol(bytesRead)]: 0,
     [Symbol(asyncId)]: 13,
     [Symbol(triggerAsyncId)]: 9 },
  connection: 
   Socket {
     connecting: false,
     _hadError: false,
     _handle: 
      TCP {
        reading: true,
        owner: [Circular],
        onread: [Function: onread],
        onconnection: null,
        writeQueueSize: 0,
        _consumed: true },
     _parent: null,
     _host: null,
     _readableState: 
      ReadableState {
        objectMode: false,
        highWaterMark: 16384,
        buffer: [Object],
        length: 0,
        pipes: null,
        pipesCount: 0,
        flowing: true,
        ended: false,
        endEmitted: false,
        reading: true,
        sync: false,
        needReadable: true,
        emittedReadable: false,
        readableListening: false,
        resumeScheduled: false,
        destroyed: false,
        defaultEncoding: 'utf8',
        awaitDrain: 0,
        readingMore: false,
        decoder: null,
        encoding: null },
     readable: true,
     domain: null,
     _events: 
      { end: [Array],
        finish: [Function: onSocketFinish],
        _socketEnd: [Function: onSocketEnd],
        drain: [Array],
        timeout: [Function: socketOnTimeout],
        data: [Function: bound socketOnData],
        error: [Function: socketOnError],
        close: [Array],
        resume: [Function: onSocketResume],
        pause: [Function: onSocketPause] },
     _eventsCount: 10,
     _maxListeners: undefined,
     _writableState: 
      WritableState {
        objectMode: false,
        highWaterMark: 16384,
        finalCalled: false,
        needDrain: false,
        ending: false,
        ended: false,
        finished: false,
        destroyed: false,
        decodeStrings: false,
        defaultEncoding: 'utf8',
        length: 0,
        writing: false,
        corked: 0,
        sync: true,
        bufferProcessing: false,
        onwrite: [Function: bound onwrite],
        writecb: null,
        writelen: 0,
        bufferedRequest: null,
        lastBufferedRequest: null,
        pendingcb: 0,
        prefinished: false,
        errorEmitted: false,
        bufferedRequestCount: 0,
        corkedRequestsFree: [Object] },
     writable: true,
     allowHalfOpen: true,
     _bytesDispatched: 0,
     _sockname: null,
     _pendingData: null,
     _pendingEncoding: '',
     server: 
      Server {
        domain: null,
        _events: [Object],
        _eventsCount: 2,
        _maxListeners: undefined,
        _connections: 1,
        _handle: [Object],
        _usingSlaves: false,
        _slaves: [],
        _unref: false,
        allowHalfOpen: true,
        pauseOnConnect: false,
        httpAllowHalfOpen: false,
        timeout: 120000,
        keepAliveTimeout: 5000,
        _pendingResponseData: 0,
        maxHeadersCount: null,
        _connectionKey: '4:127.0.0.1:0',
        [Symbol(asyncId)]: 9 },
     _server: 
      Server {
        domain: null,
        _events: [Object],
        _eventsCount: 2,
        _maxListeners: undefined,
        _connections: 1,
        _handle: [Object],
        _usingSlaves: false,
        _slaves: [],
        _unref: false,
        allowHalfOpen: true,
        pauseOnConnect: false,
        httpAllowHalfOpen: false,
        timeout: 120000,
        keepAliveTimeout: 5000,
        _pendingResponseData: 0,
        maxHeadersCount: null,
        _connectionKey: '4:127.0.0.1:0',
        [Symbol(asyncId)]: 9 },
     _idleTimeout: 120000,
     _idleNext: 
      TimersList {
        _idleNext: [Circular],
        _idlePrev: [Circular],
        _timer: [Object],
        _unrefed: true,
        msecs: 120000,
        nextTick: false },
     _idlePrev: 
      TimersList {
        _idleNext: [Circular],
        _idlePrev: [Circular],
        _timer: [Object],
        _unrefed: true,
        msecs: 120000,
        nextTick: false },
     _idleStart: 593,
     _destroyed: false,
     parser: 
      HTTPParser {
        '0': [Function: parserOnHeaders],
        '1': [Function: parserOnHeadersComplete],
        '2': [Function: parserOnBody],
        '3': [Function: parserOnMessageComplete],
        '4': [Function: bound onParserExecute],
        _headers: [],
        _url: '',
        _consumed: true,
        socket: [Circular],
        incoming: [Circular],
        outgoing: null,
        maxHeaderPairs: 2000,
        onIncoming: [Function: bound parserOnIncoming] },
     on: [Function: socketOnWrap],
     _paused: false,
     read: [Function],
     _consuming: true,
     _httpMessage: 
      ServerResponse {
        domain: null,
        _events: [Object],
        _eventsCount: 1,
        _maxListeners: undefined,
        output: [],
        outputEncodings: [],
        outputCallbacks: [],
        outputSize: 0,
        writable: true,
        _last: false,
        upgrading: false,
        chunkedEncoding: false,
        shouldKeepAlive: false,
        useChunkedEncodingByDefault: true,
        sendDate: true,
        _removedConnection: false,
        _removedContLen: false,
        _removedTE: false,
        _contentLength: null,
        _hasBody: true,
        _trailer: '',
        finished: false,
        _headerSent: false,
        socket: [Circular],
        connection: [Circular],
        _header: null,
        _onPendingData: [Function: bound updateOutgoingData],
        _sent100: false,
        _expect_continue: false,
        req: [Circular],
        locals: {},
        [Symbol(outHeadersKey)]: [Object] },
     [Symbol(asyncId)]: 11,
     [Symbol(bytesRead)]: 0,
     [Symbol(asyncId)]: 13,
     [Symbol(triggerAsyncId)]: 9 },
  httpVersionMajor: 1,
  httpVersionMinor: 1,
  httpVersion: '1.1',
  complete: false,
  headers: 
   { cookie: '_ga=GA1.1.172753334.1513776715; csrftoken=CmeS2SjYV3OxHeD52vWSC9QOACuVFOAtMtkTu2m5pB33M3l9TFt26kuuM9LvKD5j; Webstorm-5095f49=dce568b7-c9b1-405a-a939-a4ce355e09d1',
     'accept-language': 'en-GB,en-US;q=0.9,en;q=0.8',
     'accept-encoding': 'gzip, deflate, br',
     accept: 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8',
     'user-agent': 'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/64.0.3282.186 Safari/537.36',
     'upgrade-insecure-requests': '1',
     connection: 'close',
     host: 'localhost:5000' },
  rawHeaders: 
   [ 'cookie',
     '_ga=GA1.1.172753334.1513776715; csrftoken=CmeS2SjYV3OxHeD52vWSC9QOACuVFOAtMtkTu2m5pB33M3l9TFt26kuuM9LvKD5j; Webstorm-5095f49=dce568b7-c9b1-405a-a939-a4ce355e09d1',
     'accept-language',
     'en-GB,en-US;q=0.9,en;q=0.8',
     'accept-encoding',
     'gzip, deflate, br',
     'accept',
     'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8',
     'user-agent',
     'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/64.0.3282.186 Safari/537.36',
     'upgrade-insecure-requests',
     '1',
     'connection',
     'close',
     'host',
     'localhost:5000' ],
  trailers: {},
  rawTrailers: [],
  upgrade: false,
  url: '/',
  method: 'GET',
  statusCode: null,
  statusMessage: null,
  client: 
   Socket {
     connecting: false,
     _hadError: false,
     _handle: 
      TCP {
        reading: true,
        owner: [Circular],
        onread: [Function: onread],
        onconnection: null,
        writeQueueSize: 0,
        _consumed: true },
     _parent: null,
     _host: null,
     _readableState: 
      ReadableState {
        objectMode: false,
        highWaterMark: 16384,
        buffer: [Object],
        length: 0,
        pipes: null,
        pipesCount: 0,
        flowing: true,
        ended: false,
        endEmitted: false,
        reading: true,
        sync: false,
        needReadable: true,
        emittedReadable: false,
        readableListening: false,
        resumeScheduled: false,
        destroyed: false,
        defaultEncoding: 'utf8',
        awaitDrain: 0,
        readingMore: false,
        decoder: null,
        encoding: null },
     readable: true,
     domain: null,
     _events: 
      { end: [Array],
        finish: [Function: onSocketFinish],
        _socketEnd: [Function: onSocketEnd],
        drain: [Array],
        timeout: [Function: socketOnTimeout],
        data: [Function: bound socketOnData],
        error: [Function: socketOnError],
        close: [Array],
        resume: [Function: onSocketResume],
        pause: [Function: onSocketPause] },
     _eventsCount: 10,
     _maxListeners: undefined,
     _writableState: 
      WritableState {
        objectMode: false,
        highWaterMark: 16384,
        finalCalled: false,
        needDrain: false,
        ending: false,
        ended: false,
        finished: false,
        destroyed: false,
        decodeStrings: false,
        defaultEncoding: 'utf8',
        length: 0,
        writing: false,
        corked: 0,
        sync: true,
        bufferProcessing: false,
        onwrite: [Function: bound onwrite],
        writecb: null,
        writelen: 0,
        bufferedRequest: null,
        lastBufferedRequest: null,
        pendingcb: 0,
        prefinished: false,
        errorEmitted: false,
        bufferedRequestCount: 0,
        corkedRequestsFree: [Object] },
     writable: true,
     allowHalfOpen: true,
     _bytesDispatched: 0,
     _sockname: null,
     _pendingData: null,
     _pendingEncoding: '',
     server: 
      Server {
        domain: null,
        _events: [Object],
        _eventsCount: 2,
        _maxListeners: undefined,
        _connections: 1,
        _handle: [Object],
        _usingSlaves: false,
        _slaves: [],
        _unref: false,
        allowHalfOpen: true,
        pauseOnConnect: false,
        httpAllowHalfOpen: false,
        timeout: 120000,
        keepAliveTimeout: 5000,
        _pendingResponseData: 0,
        maxHeadersCount: null,
        _connectionKey: '4:127.0.0.1:0',
        [Symbol(asyncId)]: 9 },
     _server: 
      Server {
        domain: null,
        _events: [Object],
        _eventsCount: 2,
        _maxListeners: undefined,
        _connections: 1,
        _handle: [Object],
        _usingSlaves: false,
        _slaves: [],
        _unref: false,
        allowHalfOpen: true,
        pauseOnConnect: false,
        httpAllowHalfOpen: false,
        timeout: 120000,
        keepAliveTimeout: 5000,
        _pendingResponseData: 0,
        maxHeadersCount: null,
        _connectionKey: '4:127.0.0.1:0',
        [Symbol(asyncId)]: 9 },
     _idleTimeout: 120000,
     _idleNext: 
      TimersList {
        _idleNext: [Circular],
        _idlePrev: [Circular],
        _timer: [Object],
        _unrefed: true,
        msecs: 120000,
        nextTick: false },
     _idlePrev: 
      TimersList {
        _idleNext: [Circular],
        _idlePrev: [Circular],
        _timer: [Object],
        _unrefed: true,
        msecs: 120000,
        nextTick: false },
     _idleStart: 593,
     _destroyed: false,
     parser: 
      HTTPParser {
        '0': [Function: parserOnHeaders],
        '1': [Function: parserOnHeadersComplete],
        '2': [Function: parserOnBody],
        '3': [Function: parserOnMessageComplete],
        '4': [Function: bound onParserExecute],
        _headers: [],
        _url: '',
        _consumed: true,
        socket: [Circular],
        incoming: [Circular],
        outgoing: null,
        maxHeaderPairs: 2000,
        onIncoming: [Function: bound parserOnIncoming] },
     on: [Function: socketOnWrap],
     _paused: false,
     read: [Function],
     _consuming: true,
     _httpMessage: 
      ServerResponse {
        domain: null,
        _events: [Object],
        _eventsCount: 1,
        _maxListeners: undefined,
        output: [],
        outputEncodings: [],
        outputCallbacks: [],
        outputSize: 0,
        writable: true,
        _last: false,
        upgrading: false,
        chunkedEncoding: false,
        shouldKeepAlive: false,
        useChunkedEncodingByDefault: true,
        sendDate: true,
        _removedConnection: false,
        _removedContLen: false,
        _removedTE: false,
        _contentLength: null,
        _hasBody: true,
        _trailer: '',
        finished: false,
        _headerSent: false,
        socket: [Circular],
        connection: [Circular],
        _header: null,
        _onPendingData: [Function: bound updateOutgoingData],
        _sent100: false,
        _expect_continue: false,
        req: [Circular],
        locals: {},
        [Symbol(outHeadersKey)]: [Object] },
     [Symbol(asyncId)]: 11,
     [Symbol(bytesRead)]: 0,
     [Symbol(asyncId)]: 13,
     [Symbol(triggerAsyncId)]: 9 },
  _consuming: false,
  _dumped: false,
  next: [Function: next],
  baseUrl: '',
  originalUrl: '/',
  _parsedUrl: 
   Url {
     protocol: null,
     slashes: null,
     auth: null,
     host: null,
     port: null,
     hostname: null,
     hash: null,
     search: null,
     query: null,
     pathname: '/',
     path: '/',
     href: '/',
     _raw: '/' },
  params: {},
  query: {},
  res: 
   ServerResponse {
     domain: null,
     _events: { finish: [Array] },
     _eventsCount: 1,
     _maxListeners: undefined,
     output: [],
     outputEncodings: [],
     outputCallbacks: [],
     outputSize: 0,
     writable: true,
     _last: false,
     upgrading: false,
     chunkedEncoding: false,
     shouldKeepAlive: false,
     useChunkedEncodingByDefault: true,
     sendDate: true,
     _removedConnection: false,
     _removedContLen: false,
     _removedTE: false,
     _contentLength: null,
     _hasBody: true,
     _trailer: '',
     finished: false,
     _headerSent: false,
     socket: 
      Socket {
        connecting: false,
        _hadError: false,
        _handle: [Object],
        _parent: null,
        _host: null,
        _readableState: [Object],
        readable: true,
        domain: null,
        _events: [Object],
        _eventsCount: 10,
        _maxListeners: undefined,
        _writableState: [Object],
        writable: true,
        allowHalfOpen: true,
        _bytesDispatched: 0,
        _sockname: null,
        _pendingData: null,
        _pendingEncoding: '',
        server: [Object],
        _server: [Object],
        _idleTimeout: 120000,
        _idleNext: [Object],
        _idlePrev: [Object],
        _idleStart: 593,
        _destroyed: false,
        parser: [Object],
        on: [Function: socketOnWrap],
        _paused: false,
        read: [Function],
        _consuming: true,
        _httpMessage: [Circular],
        [Symbol(asyncId)]: 11,
        [Symbol(bytesRead)]: 0,
        [Symbol(asyncId)]: 13,
        [Symbol(triggerAsyncId)]: 9 },
     connection: 
      Socket {
        connecting: false,
        _hadError: false,
        _handle: [Object],
        _parent: null,
        _host: null,
        _readableState: [Object],
        readable: true,
        domain: null,
        _events: [Object],
        _eventsCount: 10,
        _maxListeners: undefined,
        _writableState: [Object],
        writable: true,
        allowHalfOpen: true,
        _bytesDispatched: 0,
        _sockname: null,
        _pendingData: null,
        _pendingEncoding: '',
        server: [Object],
        _server: [Object],
        _idleTimeout: 120000,
        _idleNext: [Object],
        _idlePrev: [Object],
        _idleStart: 593,
        _destroyed: false,
        parser: [Object],
        on: [Function: socketOnWrap],
        _paused: false,
        read: [Function],
        _consuming: true,
        _httpMessage: [Circular],
        [Symbol(asyncId)]: 11,
        [Symbol(bytesRead)]: 0,
        [Symbol(asyncId)]: 13,
        [Symbol(triggerAsyncId)]: 9 },
     _header: null,
     _onPendingData: [Function: bound updateOutgoingData],
     _sent100: false,
     _expect_continue: false,
     req: [Circular],
     locals: {},
     [Symbol(outHeadersKey)]: 
      { 'x-powered-by': [Array],
        'cache-control': [Array],
        pragma: [Array],
        expires: [Array],
        vary: [Array] } },
  body: {} }
2018-04-07T18:09:06.523Z - info: Execution took 38 ms, user function completed successfully
2018-04-07T18:12:06.381Z - error: Function worker killed by signal: SIGTERM
2018-04-07T18:12:22.535Z - info: User function triggered, starting execution
2018-04-07T18:12:22.536Z - info: Function crashed
2018-04-07T18:12:22.538Z - info: TypeError: Cannot destructure property `uid` of 'undefined' or 'null'.
    at exports.getChannels.functions.https.onRequest (/home/akash/Documents/pro/juspay/metutu-server/functions/index.js:19:27)
    at cloudFunction (/home/akash/Documents/pro/juspay/metutu-server/functions/node_modules/firebase-functions/lib/providers/https.js:37:41)
    at app.use (/usr/lib/node_modules/firebase-tools/node_modules/@google-cloud/functions-emulator/src/supervisor/worker.js:142:11)
    at Layer.handle [as handle_request] (/usr/lib/node_modules/firebase-tools/node_modules/express/lib/router/layer.js:95:5)
    at trim_prefix (/usr/lib/node_modules/firebase-tools/node_modules/express/lib/router/index.js:317:13)
    at /usr/lib/node_modules/firebase-tools/node_modules/express/lib/router/index.js:284:7
    at Function.process_params (/usr/lib/node_modules/firebase-tools/node_modules/express/lib/router/index.js:335:12)
    at next (/usr/lib/node_modules/firebase-tools/node_modules/express/lib/router/index.js:275:10)
    at app.use (/usr/lib/node_modules/firebase-tools/node_modules/@google-cloud/functions-emulator/src/supervisor/worker.js:114:7)
    at Layer.handle [as handle_request] (/usr/lib/node_modules/firebase-tools/node_modules/express/lib/router/layer.js:95:5)
2018-04-07T18:12:22.546Z - info: Execution took 12 ms, user function completed successfully
2018-04-07T18:12:51.618Z - info: User function triggered, starting execution
2018-04-07T18:13:12.733Z - info: User function triggered, starting execution
Function crashed
TypeError: Cannot destructure property `uid` of 'undefined' or 'null'.
    at exports.getChannels.functions.https.onRequest (/home/akash/Documents/pro/juspay/metutu-server/functions/index.js:19:27)
    at cloudFunction (/home/akash/Documents/pro/juspay/metutu-server/functions/node_modules/firebase-functions/lib/providers/https.js:37:41)
    at app.use (/usr/lib/node_modules/firebase-tools/node_modules/@google-cloud/functions-emulator/src/supervisor/worker.js:142:11)
    at Layer.handle [as handle_request] (/usr/lib/node_modules/firebase-tools/node_modules/express/lib/router/layer.js:95:5)
    at trim_prefix (/usr/lib/node_modules/firebase-tools/node_modules/express/lib/router/index.js:317:13)
    at /usr/lib/node_modules/firebase-tools/node_modules/express/lib/router/index.js:284:7
    at Function.process_params (/usr/lib/node_modules/firebase-tools/node_modules/express/lib/router/index.js:335:12)
    at next (/usr/lib/node_modules/firebase-tools/node_modules/express/lib/router/index.js:275:10)
    at app.use (/usr/lib/node_modules/firebase-tools/node_modules/@google-cloud/functions-emulator/src/supervisor/worker.js:114:7)
    at Layer.handle [as handle_request] (/usr/lib/node_modules/firebase-tools/node_modules/express/lib/router/layer.js:95:5)
Execution took 2 ms, user function completed successfully
2018-04-07T18:13:48.712Z - info: User function triggered, starting execution
2018-04-07T18:13:51.615Z - info: Execution took 60002 ms, finished with status: 'timeout'
2018-04-07T18:13:51.620Z - info: Execution took 2912 ms, finished with status: 'crash'
2018-04-07T18:14:18.511Z - info: User function triggered, starting execution
2018-04-07T18:14:20.804Z - info: Execution took 3153 ms, finished with status: 'crash'
2018-04-07T18:14:26.489Z - info: User function triggered, starting execution
2018-04-07T18:15:06.448Z - info: Worker for test closed due to file changes.
2018-04-07T18:15:06.575Z - info: Execution took 40104 ms, finished with status: 'crash'
2018-04-07T18:15:12.310Z - info: User function triggered, starting execution
2018-04-07T18:15:12.500Z - info: Execution took 192 ms, user function completed successfully
2018-04-07T18:15:34.761Z - info: Worker for getChannels closed due to file changes.
2018-04-07T18:15:42.932Z - info: User function triggered, starting execution
2018-04-07T18:15:42.933Z - info: Function crashed
2018-04-07T18:15:42.934Z - info: TypeError: Cannot destructure property `uid` of 'undefined' or 'null'.
    at exports.getChannels.functions.https.onRequest (/home/akash/Documents/pro/juspay/metutu-server/functions/index.js:19:27)
    at cloudFunction (/home/akash/Documents/pro/juspay/metutu-server/functions/node_modules/firebase-functions/lib/providers/https.js:37:41)
    at app.use (/usr/lib/node_modules/firebase-tools/node_modules/@google-cloud/functions-emulator/src/supervisor/worker.js:142:11)
    at Layer.handle [as handle_request] (/usr/lib/node_modules/firebase-tools/node_modules/express/lib/router/layer.js:95:5)
    at trim_prefix (/usr/lib/node_modules/firebase-tools/node_modules/express/lib/router/index.js:317:13)
    at /usr/lib/node_modules/firebase-tools/node_modules/express/lib/router/index.js:284:7
    at Function.process_params (/usr/lib/node_modules/firebase-tools/node_modules/express/lib/router/index.js:335:12)
    at next (/usr/lib/node_modules/firebase-tools/node_modules/express/lib/router/index.js:275:10)
    at app.use (/usr/lib/node_modules/firebase-tools/node_modules/@google-cloud/functions-emulator/src/supervisor/worker.js:114:7)
    at Layer.handle [as handle_request] (/usr/lib/node_modules/firebase-tools/node_modules/express/lib/router/layer.js:95:5)
2018-04-07T18:15:42.943Z - info: Execution took 11 ms, user function completed successfully
2018-04-07T18:15:54.457Z - info: User function triggered, starting execution
2018-04-07T18:15:57.559Z - info: Execution took 3102 ms, user function completed successfully
2018-04-07T18:16:50.743Z - info: User function triggered, starting execution
2018-04-07T18:16:51.071Z - info: Execution took 328 ms, user function completed successfully
2018-04-07T18:17:27.743Z - info: User function triggered, starting execution
2018-04-07T18:17:30.041Z - info: []
2018-04-07T18:17:30.046Z - info: Execution took 2303 ms, user function completed successfully
2018-04-07T18:17:58.813Z - info: User function triggered, starting execution
2018-04-07T18:18:00.871Z - info: { S9cIFvYv1ifgbmEJlI8wTi8Z7Cz22mZfdVQdOHXVAaaXRPSFV6n6Bwo2: 
   { '-L9VFJ0rINCzcWAdqAib': 
      { by: '2mZfdVQdOHXVAaaXRPSFV6n6Bwo2',
        text: 'dfasfdf',
        timestamp: 1523107054110 },
     '-L9VFcUvpcM36CqkPbfg': 
      { by: '2mZfdVQdOHXVAaaXRPSFV6n6Bwo2',
        text: 'hello',
        timestamp: 1523107137722 },
     '-L9VFpfvJv1lOmgWJsEv': 
      { by: '2mZfdVQdOHXVAaaXRPSFV6n6Bwo2',
        text: 'sdfadf',
        timestamp: 1523107191704 },
     '-L9VMvWepipgPuYThc30': 
      { by: '2mZfdVQdOHXVAaaXRPSFV6n6Bwo2',
        text: 'so?',
        timestamp: 1523109050900 },
     '-L9VMwZVunjxnqMoK6RH': 
      { by: '2mZfdVQdOHXVAaaXRPSFV6n6Bwo2',
        text: 'then ',
        timestamp: 1523109055179 },
     '-L9VMxhwLsAGPqKBZXX_': 
      { by: '2mZfdVQdOHXVAaaXRPSFV6n6Bwo2',
        text: 'anything new?',
        timestamp: 1523109059879 },
     '-L9VNKtRc0OHoz1fN9Z3': 
      { by: 'S9cIFvYv1ifgbmEJlI8wTi8Z7Cz2',
        text: 'hey',
        timestamp: 1523109159054 },
     '-L9VNVA7Ajs05Jhl6IxC': 
      { by: '2mZfdVQdOHXVAaaXRPSFV6n6Bwo2',
        text: 'this is akash15005',
        timestamp: 1523109201011 },
     '-L9VNYOPxEeUZpNusSM0': 
      { by: '2mZfdVQdOHXVAaaXRPSFV6n6Bwo2',
        text: 'this is mil10',
        timestamp: 1523109214213 },
     '-L9VNzABkWW8hbUd-bev': 
      { by: '2mZfdVQdOHXVAaaXRPSFV6n6Bwo2',
        text: 'from normal window',
        timestamp: 1523109328059 },
     '-L9VO-k3DyNujR05GyXz': 
      { by: 'S9cIFvYv1ifgbmEJlI8wTi8Z7Cz2',
        text: 'From incognito',
        timestamp: 1523109336067 },
     '-L9VOKrEmbY-5eNkU_iB': 
      { by: 'S9cIFvYv1ifgbmEJlI8wTi8Z7Cz2',
        text: 'From incognito',
        timestamp: 1523109422544 },
     '-L9VOKuNNYPEo2R3oUML': 
      { by: 'S9cIFvYv1ifgbmEJlI8wTi8Z7Cz2',
        text: 'From incognito',
        timestamp: 1523109422745 },
     '-L9VOKx2OLnNVtC7uKBj': 
      { by: 'S9cIFvYv1ifgbmEJlI8wTi8Z7Cz2',
        text: 'From incognito',
        timestamp: 1523109422916 },
     '-L9VOKz_u59IRzA7NOG8': 
      { by: 'S9cIFvYv1ifgbmEJlI8wTi8Z7Cz2',
        text: 'From incognito',
        timestamp: 1523109423078 },
     '-L9VOL0lxpHIJLtzThCD': 
      { by: 'S9cIFvYv1ifgbmEJlI8wTi8Z7Cz2',
        text: 'From incognito',
        timestamp: 1523109423218 },
     '-L9VOL51GzqJWBDJUHW2': 
      { by: 'S9cIFvYv1ifgbmEJlI8wTi8Z7Cz2',
        text: 'From incognito',
        timestamp: 1523109423491 },
     '-L9VOLb9xrEhJpdloi6f': 
      { by: 'S9cIFvYv1ifgbmEJlI8wTi8Z7Cz2',
        text: 'From incognito',
        timestamp: 1523109425610 },
     '-L9VPYSJmQT3jhZWoFUz': 
      { by: 'S9cIFvYv1ifgbmEJlI8wTi8Z7Cz2',
        text: 'fuck you unacademicbitch',
        timestamp: 1523109740958 },
     '-L9VP_CRpwFcR7HWhPSN': 
      { by: 'S9cIFvYv1ifgbmEJlI8wTi8Z7Cz2',
        text: 'get los',
        timestamp: 1523109748137 } } }
2018-04-07T18:18:00.872Z - info: []
2018-04-07T18:18:00.878Z - info: Execution took 2067 ms, user function completed successfully
2018-04-07T18:19:32.074Z - info: User function triggered, starting execution
2018-04-07T18:19:32.394Z - info: { S9cIFvYv1ifgbmEJlI8wTi8Z7Cz22mZfdVQdOHXVAaaXRPSFV6n6Bwo2: 
   { '-L9VFJ0rINCzcWAdqAib': 
      { by: '2mZfdVQdOHXVAaaXRPSFV6n6Bwo2',
        text: 'dfasfdf',
        timestamp: 1523107054110 },
     '-L9VFcUvpcM36CqkPbfg': 
      { by: '2mZfdVQdOHXVAaaXRPSFV6n6Bwo2',
        text: 'hello',
        timestamp: 1523107137722 },
     '-L9VFpfvJv1lOmgWJsEv': 
      { by: '2mZfdVQdOHXVAaaXRPSFV6n6Bwo2',
        text: 'sdfadf',
        timestamp: 1523107191704 },
     '-L9VMvWepipgPuYThc30': 
      { by: '2mZfdVQdOHXVAaaXRPSFV6n6Bwo2',
        text: 'so?',
        timestamp: 1523109050900 },
     '-L9VMwZVunjxnqMoK6RH': 
      { by: '2mZfdVQdOHXVAaaXRPSFV6n6Bwo2',
        text: 'then ',
        timestamp: 1523109055179 },
     '-L9VMxhwLsAGPqKBZXX_': 
      { by: '2mZfdVQdOHXVAaaXRPSFV6n6Bwo2',
        text: 'anything new?',
        timestamp: 1523109059879 },
     '-L9VNKtRc0OHoz1fN9Z3': 
      { by: 'S9cIFvYv1ifgbmEJlI8wTi8Z7Cz2',
        text: 'hey',
        timestamp: 1523109159054 },
     '-L9VNVA7Ajs05Jhl6IxC': 
      { by: '2mZfdVQdOHXVAaaXRPSFV6n6Bwo2',
        text: 'this is akash15005',
        timestamp: 1523109201011 },
     '-L9VNYOPxEeUZpNusSM0': 
      { by: '2mZfdVQdOHXVAaaXRPSFV6n6Bwo2',
        text: 'this is mil10',
        timestamp: 1523109214213 },
     '-L9VNzABkWW8hbUd-bev': 
      { by: '2mZfdVQdOHXVAaaXRPSFV6n6Bwo2',
        text: 'from normal window',
        timestamp: 1523109328059 },
     '-L9VO-k3DyNujR05GyXz': 
      { by: 'S9cIFvYv1ifgbmEJlI8wTi8Z7Cz2',
        text: 'From incognito',
        timestamp: 1523109336067 },
     '-L9VOKrEmbY-5eNkU_iB': 
      { by: 'S9cIFvYv1ifgbmEJlI8wTi8Z7Cz2',
        text: 'From incognito',
        timestamp: 1523109422544 },
     '-L9VOKuNNYPEo2R3oUML': 
      { by: 'S9cIFvYv1ifgbmEJlI8wTi8Z7Cz2',
        text: 'From incognito',
        timestamp: 1523109422745 },
     '-L9VOKx2OLnNVtC7uKBj': 
      { by: 'S9cIFvYv1ifgbmEJlI8wTi8Z7Cz2',
        text: 'From incognito',
        timestamp: 1523109422916 },
     '-L9VOKz_u59IRzA7NOG8': 
      { by: 'S9cIFvYv1ifgbmEJlI8wTi8Z7Cz2',
        text: 'From incognito',
        timestamp: 1523109423078 },
     '-L9VOL0lxpHIJLtzThCD': 
      { by: 'S9cIFvYv1ifgbmEJlI8wTi8Z7Cz2',
        text: 'From incognito',
        timestamp: 1523109423218 },
     '-L9VOL51GzqJWBDJUHW2': 
      { by: 'S9cIFvYv1ifgbmEJlI8wTi8Z7Cz2',
        text: 'From incognito',
        timestamp: 1523109423491 },
     '-L9VOLb9xrEhJpdloi6f': 
      { by: 'S9cIFvYv1ifgbmEJlI8wTi8Z7Cz2',
        text: 'From incognito',
        timestamp: 1523109425610 },
     '-L9VPYSJmQT3jhZWoFUz': 
      { by: 'S9cIFvYv1ifgbmEJlI8wTi8Z7Cz2',
        text: 'fuck you unacademicbitch',
        timestamp: 1523109740958 },
     '-L9VP_CRpwFcR7HWhPSN': 
      { by: 'S9cIFvYv1ifgbmEJlI8wTi8Z7Cz2',
        text: 'get los',
        timestamp: 1523109748137 } } }
2018-04-07T18:19:32.395Z - info: []
2018-04-07T18:19:32.396Z - info: Execution took 321 ms, user function completed successfully
2018-04-07T18:19:52.699Z - info: User function triggered, starting execution
2018-04-07T18:19:53.016Z - info: { S9cIFvYv1ifgbmEJlI8wTi8Z7Cz22mZfdVQdOHXVAaaXRPSFV6n6Bwo2: 
   { '-L9VFJ0rINCzcWAdqAib': 
      { by: '2mZfdVQdOHXVAaaXRPSFV6n6Bwo2',
        text: 'dfasfdf',
        timestamp: 1523107054110 },
     '-L9VFcUvpcM36CqkPbfg': 
      { by: '2mZfdVQdOHXVAaaXRPSFV6n6Bwo2',
        text: 'hello',
        timestamp: 1523107137722 },
     '-L9VFpfvJv1lOmgWJsEv': 
      { by: '2mZfdVQdOHXVAaaXRPSFV6n6Bwo2',
        text: 'sdfadf',
        timestamp: 1523107191704 },
     '-L9VMvWepipgPuYThc30': 
      { by: '2mZfdVQdOHXVAaaXRPSFV6n6Bwo2',
        text: 'so?',
        timestamp: 1523109050900 },
     '-L9VMwZVunjxnqMoK6RH': 
      { by: '2mZfdVQdOHXVAaaXRPSFV6n6Bwo2',
        text: 'then ',
        timestamp: 1523109055179 },
     '-L9VMxhwLsAGPqKBZXX_': 
      { by: '2mZfdVQdOHXVAaaXRPSFV6n6Bwo2',
        text: 'anything new?',
        timestamp: 1523109059879 },
     '-L9VNKtRc0OHoz1fN9Z3': 
      { by: 'S9cIFvYv1ifgbmEJlI8wTi8Z7Cz2',
        text: 'hey',
        timestamp: 1523109159054 },
     '-L9VNVA7Ajs05Jhl6IxC': 
      { by: '2mZfdVQdOHXVAaaXRPSFV6n6Bwo2',
        text: 'this is akash15005',
        timestamp: 1523109201011 },
     '-L9VNYOPxEeUZpNusSM0': 
      { by: '2mZfdVQdOHXVAaaXRPSFV6n6Bwo2',
        text: 'this is mil10',
        timestamp: 1523109214213 },
     '-L9VNzABkWW8hbUd-bev': 
      { by: '2mZfdVQdOHXVAaaXRPSFV6n6Bwo2',
        text: 'from normal window',
        timestamp: 1523109328059 },
     '-L9VO-k3DyNujR05GyXz': 
      { by: 'S9cIFvYv1ifgbmEJlI8wTi8Z7Cz2',
        text: 'From incognito',
        timestamp: 1523109336067 },
     '-L9VOKrEmbY-5eNkU_iB': 
      { by: 'S9cIFvYv1ifgbmEJlI8wTi8Z7Cz2',
        text: 'From incognito',
        timestamp: 1523109422544 },
     '-L9VOKuNNYPEo2R3oUML': 
      { by: 'S9cIFvYv1ifgbmEJlI8wTi8Z7Cz2',
        text: 'From incognito',
        timestamp: 1523109422745 },
     '-L9VOKx2OLnNVtC7uKBj': 
      { by: 'S9cIFvYv1ifgbmEJlI8wTi8Z7Cz2',
        text: 'From incognito',
        timestamp: 1523109422916 },
     '-L9VOKz_u59IRzA7NOG8': 
      { by: 'S9cIFvYv1ifgbmEJlI8wTi8Z7Cz2',
        text: 'From incognito',
        timestamp: 1523109423078 },
     '-L9VOL0lxpHIJLtzThCD': 
      { by: 'S9cIFvYv1ifgbmEJlI8wTi8Z7Cz2',
        text: 'From incognito',
        timestamp: 1523109423218 },
     '-L9VOL51GzqJWBDJUHW2': 
      { by: 'S9cIFvYv1ifgbmEJlI8wTi8Z7Cz2',
        text: 'From incognito',
        timestamp: 1523109423491 },
     '-L9VOLb9xrEhJpdloi6f': 
      { by: 'S9cIFvYv1ifgbmEJlI8wTi8Z7Cz2',
        text: 'From incognito',
        timestamp: 1523109425610 },
     '-L9VPYSJmQT3jhZWoFUz': 
      { by: 'S9cIFvYv1ifgbmEJlI8wTi8Z7Cz2',
        text: 'fuck you unacademicbitch',
        timestamp: 1523109740958 },
     '-L9VP_CRpwFcR7HWhPSN': 
      { by: 'S9cIFvYv1ifgbmEJlI8wTi8Z7Cz2',
        text: 'get los',
        timestamp: 1523109748137 } } }
2018-04-07T18:19:53.016Z - info: []
2018-04-07T18:19:53.018Z - info: Execution took 318 ms, user function completed successfully
2018-04-07T18:20:13.989Z - info: User function triggered, starting execution
2018-04-07T18:20:13.991Z - info: undefined
2018-04-07T18:20:16.214Z - info: { S9cIFvYv1ifgbmEJlI8wTi8Z7Cz22mZfdVQdOHXVAaaXRPSFV6n6Bwo2: 
   { '-L9VFJ0rINCzcWAdqAib': 
      { by: '2mZfdVQdOHXVAaaXRPSFV6n6Bwo2',
        text: 'dfasfdf',
        timestamp: 1523107054110 },
     '-L9VFcUvpcM36CqkPbfg': 
      { by: '2mZfdVQdOHXVAaaXRPSFV6n6Bwo2',
        text: 'hello',
        timestamp: 1523107137722 },
     '-L9VFpfvJv1lOmgWJsEv': 
      { by: '2mZfdVQdOHXVAaaXRPSFV6n6Bwo2',
        text: 'sdfadf',
        timestamp: 1523107191704 },
     '-L9VMvWepipgPuYThc30': 
      { by: '2mZfdVQdOHXVAaaXRPSFV6n6Bwo2',
        text: 'so?',
        timestamp: 1523109050900 },
     '-L9VMwZVunjxnqMoK6RH': 
      { by: '2mZfdVQdOHXVAaaXRPSFV6n6Bwo2',
        text: 'then ',
        timestamp: 1523109055179 },
     '-L9VMxhwLsAGPqKBZXX_': 
      { by: '2mZfdVQdOHXVAaaXRPSFV6n6Bwo2',
        text: 'anything new?',
        timestamp: 1523109059879 },
     '-L9VNKtRc0OHoz1fN9Z3': 
      { by: 'S9cIFvYv1ifgbmEJlI8wTi8Z7Cz2',
        text: 'hey',
        timestamp: 1523109159054 },
     '-L9VNVA7Ajs05Jhl6IxC': 
      { by: '2mZfdVQdOHXVAaaXRPSFV6n6Bwo2',
        text: 'this is akash15005',
        timestamp: 1523109201011 },
     '-L9VNYOPxEeUZpNusSM0': 
      { by: '2mZfdVQdOHXVAaaXRPSFV6n6Bwo2',
        text: 'this is mil10',
        timestamp: 1523109214213 },
     '-L9VNzABkWW8hbUd-bev': 
      { by: '2mZfdVQdOHXVAaaXRPSFV6n6Bwo2',
        text: 'from normal window',
        timestamp: 1523109328059 },
     '-L9VO-k3DyNujR05GyXz': 
      { by: 'S9cIFvYv1ifgbmEJlI8wTi8Z7Cz2',
        text: 'From incognito',
        timestamp: 1523109336067 },
     '-L9VOKrEmbY-5eNkU_iB': 
      { by: 'S9cIFvYv1ifgbmEJlI8wTi8Z7Cz2',
        text: 'From incognito',
        timestamp: 1523109422544 },
     '-L9VOKuNNYPEo2R3oUML': 
      { by: 'S9cIFvYv1ifgbmEJlI8wTi8Z7Cz2',
        text: 'From incognito',
        timestamp: 1523109422745 },
     '-L9VOKx2OLnNVtC7uKBj': 
      { by: 'S9cIFvYv1ifgbmEJlI8wTi8Z7Cz2',
        text: 'From incognito',
        timestamp: 1523109422916 },
     '-L9VOKz_u59IRzA7NOG8': 
      { by: 'S9cIFvYv1ifgbmEJlI8wTi8Z7Cz2',
        text: 'From incognito',
        timestamp: 1523109423078 },
     '-L9VOL0lxpHIJLtzThCD': 
      { by: 'S9cIFvYv1ifgbmEJlI8wTi8Z7Cz2',
        text: 'From incognito',
        timestamp: 1523109423218 },
     '-L9VOL51GzqJWBDJUHW2': 
      { by: 'S9cIFvYv1ifgbmEJlI8wTi8Z7Cz2',
        text: 'From incognito',
        timestamp: 1523109423491 },
     '-L9VOLb9xrEhJpdloi6f': 
      { by: 'S9cIFvYv1ifgbmEJlI8wTi8Z7Cz2',
        text: 'From incognito',
        timestamp: 1523109425610 },
     '-L9VPYSJmQT3jhZWoFUz': 
      { by: 'S9cIFvYv1ifgbmEJlI8wTi8Z7Cz2',
        text: 'fuck you unacademicbitch',
        timestamp: 1523109740958 },
     '-L9VP_CRpwFcR7HWhPSN': 
      { by: 'S9cIFvYv1ifgbmEJlI8wTi8Z7Cz2',
        text: 'get los',
        timestamp: 1523109748137 } } }
2018-04-07T18:20:16.214Z - info: []
2018-04-07T18:20:16.219Z - info: Execution took 2233 ms, user function completed successfully
2018-04-07T18:21:31.738Z - info: User function triggered, starting execution
2018-04-07T18:21:31.739Z - info: S9cIFvYv1ifgbmEJlI8wTi8Z7Cz2
2018-04-07T18:21:33.881Z - info: { S9cIFvYv1ifgbmEJlI8wTi8Z7Cz22mZfdVQdOHXVAaaXRPSFV6n6Bwo2: 
   { '-L9VFJ0rINCzcWAdqAib': 
      { by: '2mZfdVQdOHXVAaaXRPSFV6n6Bwo2',
        text: 'dfasfdf',
        timestamp: 1523107054110 },
     '-L9VFcUvpcM36CqkPbfg': 
      { by: '2mZfdVQdOHXVAaaXRPSFV6n6Bwo2',
        text: 'hello',
        timestamp: 1523107137722 },
     '-L9VFpfvJv1lOmgWJsEv': 
      { by: '2mZfdVQdOHXVAaaXRPSFV6n6Bwo2',
        text: 'sdfadf',
        timestamp: 1523107191704 },
     '-L9VMvWepipgPuYThc30': 
      { by: '2mZfdVQdOHXVAaaXRPSFV6n6Bwo2',
        text: 'so?',
        timestamp: 1523109050900 },
     '-L9VMwZVunjxnqMoK6RH': 
      { by: '2mZfdVQdOHXVAaaXRPSFV6n6Bwo2',
        text: 'then ',
        timestamp: 1523109055179 },
     '-L9VMxhwLsAGPqKBZXX_': 
      { by: '2mZfdVQdOHXVAaaXRPSFV6n6Bwo2',
        text: 'anything new?',
        timestamp: 1523109059879 },
     '-L9VNKtRc0OHoz1fN9Z3': 
      { by: 'S9cIFvYv1ifgbmEJlI8wTi8Z7Cz2',
        text: 'hey',
        timestamp: 1523109159054 },
     '-L9VNVA7Ajs05Jhl6IxC': 
      { by: '2mZfdVQdOHXVAaaXRPSFV6n6Bwo2',
        text: 'this is akash15005',
        timestamp: 1523109201011 },
     '-L9VNYOPxEeUZpNusSM0': 
      { by: '2mZfdVQdOHXVAaaXRPSFV6n6Bwo2',
        text: 'this is mil10',
        timestamp: 1523109214213 },
     '-L9VNzABkWW8hbUd-bev': 
      { by: '2mZfdVQdOHXVAaaXRPSFV6n6Bwo2',
        text: 'from normal window',
        timestamp: 1523109328059 },
     '-L9VO-k3DyNujR05GyXz': 
      { by: 'S9cIFvYv1ifgbmEJlI8wTi8Z7Cz2',
        text: 'From incognito',
        timestamp: 1523109336067 },
     '-L9VOKrEmbY-5eNkU_iB': 
      { by: 'S9cIFvYv1ifgbmEJlI8wTi8Z7Cz2',
        text: 'From incognito',
        timestamp: 1523109422544 },
     '-L9VOKuNNYPEo2R3oUML': 
      { by: 'S9cIFvYv1ifgbmEJlI8wTi8Z7Cz2',
        text: 'From incognito',
        timestamp: 1523109422745 },
     '-L9VOKx2OLnNVtC7uKBj': 
      { by: 'S9cIFvYv1ifgbmEJlI8wTi8Z7Cz2',
        text: 'From incognito',
        timestamp: 1523109422916 },
     '-L9VOKz_u59IRzA7NOG8': 
      { by: 'S9cIFvYv1ifgbmEJlI8wTi8Z7Cz2',
        text: 'From incognito',
        timestamp: 1523109423078 },
     '-L9VOL0lxpHIJLtzThCD': 
      { by: 'S9cIFvYv1ifgbmEJlI8wTi8Z7Cz2',
        text: 'From incognito',
        timestamp: 1523109423218 },
     '-L9VOL51GzqJWBDJUHW2': 
      { by: 'S9cIFvYv1ifgbmEJlI8wTi8Z7Cz2',
        text: 'From incognito',
        timestamp: 1523109423491 },
     '-L9VOLb9xrEhJpdloi6f': 
      { by: 'S9cIFvYv1ifgbmEJlI8wTi8Z7Cz2',
        text: 'From incognito',
        timestamp: 1523109425610 },
     '-L9VPYSJmQT3jhZWoFUz': 
      { by: 'S9cIFvYv1ifgbmEJlI8wTi8Z7Cz2',
        text: 'fuck you unacademicbitch',
        timestamp: 1523109740958 },
     '-L9VP_CRpwFcR7HWhPSN': 
      { by: 'S9cIFvYv1ifgbmEJlI8wTi8Z7Cz2',
        text: 'get los',
        timestamp: 1523109748137 } } }
2018-04-07T18:21:33.882Z - info: [ '2mZfdVQdOHXVAaaXRPSFV6n6Bwo2' ]
2018-04-07T18:21:37.311Z - info: Execution took 5574 ms, user function completed successfully
2018-04-07T18:22:56.138Z - info: User function triggered, starting execution
2018-04-07T18:22:58.860Z - info: []
2018-04-07T18:22:58.868Z - info: Execution took 2728 ms, user function completed successfully
2018-04-07T18:23:10.616Z - info: User function triggered, starting execution
2018-04-07T18:23:11.087Z - info: [ '2mZfdVQdOHXVAaaXRPSFV6n6Bwo2' ]
2018-04-07T18:23:11.725Z - info: Execution took 1108 ms, user function completed successfully
2018-04-07T18:29:25.316Z - info: User function triggered, starting execution
2018-04-07T18:29:25.632Z - info: [ 'S9cIFvYv1ifgbmEJlI8wTi8Z7Cz2' ]
2018-04-07T18:29:26.779Z - info: Execution took 1462 ms, user function completed successfully
2018-04-07T18:29:54.384Z - info: User function triggered, starting execution
2018-04-07T18:29:54.724Z - info: [ 'S9cIFvYv1ifgbmEJlI8wTi8Z7Cz2' ]
2018-04-07T18:29:55.226Z - info: Execution took 841 ms, user function completed successfully
2018-04-07T18:30:43.640Z - info: User function triggered, starting execution
2018-04-07T18:30:43.966Z - info: [ 'S9cIFvYv1ifgbmEJlI8wTi8Z7Cz2' ]
2018-04-07T18:30:53.564Z - info: Execution took 9924 ms, user function completed successfully
2018-04-07T18:35:33.561Z - info: User function triggered, starting execution
2018-04-07T18:35:36.733Z - info: [ 'S9cIFvYv1ifgbmEJlI8wTi8Z7Cz2' ]
2018-04-07T18:35:37.291Z - info: Execution took 3731 ms, user function completed successfully
2018-04-07T18:37:16.316Z - info: User function triggered, starting execution
2018-04-07T18:37:16.644Z - info: [ 'S9cIFvYv1ifgbmEJlI8wTi8Z7Cz2' ]
2018-04-07T18:37:17.367Z - info: Execution took 1051 ms, user function completed successfully
2018-04-07T18:38:33.774Z - info: User function triggered, starting execution
2018-04-07T18:38:34.234Z - info: [ 'S9cIFvYv1ifgbmEJlI8wTi8Z7Cz2' ]
2018-04-07T18:38:34.873Z - info: Execution took 1099 ms, user function completed successfully
2018-04-07T18:38:48.230Z - info: User function triggered, starting execution
2018-04-07T18:38:48.562Z - info: [ 'S9cIFvYv1ifgbmEJlI8wTi8Z7Cz2' ]
2018-04-07T18:38:49.130Z - info: Execution took 899 ms, user function completed successfully
2018-04-07T18:41:38.137Z - info: User function triggered, starting execution
2018-04-07T18:41:38.140Z - error: Request has invalid method. GET
2018-04-07T18:41:38.152Z - error: Invalid request IncomingMessage {
  _readableState: 
   ReadableState {
     objectMode: false,
     highWaterMark: 16384,
     buffer: BufferList { head: null, tail: null, length: 0 },
     length: 0,
     pipes: null,
     pipesCount: 0,
     flowing: null,
     ended: false,
     endEmitted: false,
     reading: false,
     sync: true,
     needReadable: false,
     emittedReadable: false,
     readableListening: false,
     resumeScheduled: false,
     destroyed: false,
     defaultEncoding: 'utf8',
     awaitDrain: 0,
     readingMore: true,
     decoder: null,
     encoding: null },
  readable: true,
  domain: null,
  _events: {},
  _eventsCount: 0,
  _maxListeners: undefined,
  socket: 
   Socket {
     connecting: false,
     _hadError: false,
     _handle: 
      TCP {
        reading: true,
        owner: [Circular],
        onread: [Function: onread],
        onconnection: null,
        writeQueueSize: 0,
        _consumed: true },
     _parent: null,
     _host: null,
     _readableState: 
      ReadableState {
        objectMode: false,
        highWaterMark: 16384,
        buffer: [Object],
        length: 0,
        pipes: null,
        pipesCount: 0,
        flowing: true,
        ended: false,
        endEmitted: false,
        reading: true,
        sync: false,
        needReadable: true,
        emittedReadable: false,
        readableListening: false,
        resumeScheduled: false,
        destroyed: false,
        defaultEncoding: 'utf8',
        awaitDrain: 0,
        readingMore: false,
        decoder: null,
        encoding: null },
     readable: true,
     domain: null,
     _events: 
      { end: [Array],
        finish: [Function: onSocketFinish],
        _socketEnd: [Function: onSocketEnd],
        drain: [Array],
        timeout: [Function: socketOnTimeout],
        data: [Function: bound socketOnData],
        error: [Function: socketOnError],
        close: [Array],
        resume: [Function: onSocketResume],
        pause: [Function: onSocketPause] },
     _eventsCount: 10,
     _maxListeners: undefined,
     _writableState: 
      WritableState {
        objectMode: false,
        highWaterMark: 16384,
        finalCalled: false,
        needDrain: false,
        ending: false,
        ended: false,
        finished: false,
        destroyed: false,
        decodeStrings: false,
        defaultEncoding: 'utf8',
        length: 0,
        writing: false,
        corked: 0,
        sync: true,
        bufferProcessing: false,
        onwrite: [Function: bound onwrite],
        writecb: null,
        writelen: 0,
        bufferedRequest: null,
        lastBufferedRequest: null,
        pendingcb: 0,
        prefinished: false,
        errorEmitted: false,
        bufferedRequestCount: 0,
        corkedRequestsFree: [Object] },
     writable: true,
     allowHalfOpen: true,
     _bytesDispatched: 0,
     _sockname: null,
     _pendingData: null,
     _pendingEncoding: '',
     server: 
      Server {
        domain: null,
        _events: [Object],
        _eventsCount: 2,
        _maxListeners: undefined,
        _connections: 1,
        _handle: [Object],
        _usingSlaves: false,
        _slaves: [],
        _unref: false,
        allowHalfOpen: true,
        pauseOnConnect: false,
        httpAllowHalfOpen: false,
        timeout: 120000,
        keepAliveTimeout: 5000,
        _pendingResponseData: 0,
        maxHeadersCount: null,
        _connectionKey: '4:127.0.0.1:0',
        [Symbol(asyncId)]: 9 },
     _server: 
      Server {
        domain: null,
        _events: [Object],
        _eventsCount: 2,
        _maxListeners: undefined,
        _connections: 1,
        _handle: [Object],
        _usingSlaves: false,
        _slaves: [],
        _unref: false,
        allowHalfOpen: true,
        pauseOnConnect: false,
        httpAllowHalfOpen: false,
        timeout: 120000,
        keepAliveTimeout: 5000,
        _pendingResponseData: 0,
        maxHeadersCount: null,
        _connectionKey: '4:127.0.0.1:0',
        [Symbol(asyncId)]: 9 },
     _idleTimeout: 120000,
     _idleNext: 
      TimersList {
        _idleNext: [Circular],
        _idlePrev: [Circular],
        _timer: [Object],
        _unrefed: true,
        msecs: 120000,
        nextTick: false },
     _idlePrev: 
      TimersList {
        _idleNext: [Circular],
        _idlePrev: [Circular],
        _timer: [Object],
        _unrefed: true,
        msecs: 120000,
        nextTick: false },
     _idleStart: 10777,
     _destroyed: false,
     parser: 
      HTTPParser {
        '0': [Function: parserOnHeaders],
        '1': [Function: parserOnHeadersComplete],
        '2': [Function: parserOnBody],
        '3': [Function: parserOnMessageComplete],
        '4': [Function: bound onParserExecute],
        _headers: [],
        _url: '',
        _consumed: true,
        socket: [Circular],
        incoming: [Circular],
        outgoing: null,
        maxHeaderPairs: 2000,
        onIncoming: [Function: bound parserOnIncoming] },
     on: [Function: socketOnWrap],
     _paused: false,
     read: [Function],
     _consuming: true,
     _httpMessage: 
      ServerResponse {
        domain: null,
        _events: [Object],
        _eventsCount: 1,
        _maxListeners: undefined,
        output: [],
        outputEncodings: [],
        outputCallbacks: [],
        outputSize: 0,
        writable: true,
        _last: false,
        upgrading: false,
        chunkedEncoding: false,
        shouldKeepAlive: false,
        useChunkedEncodingByDefault: true,
        sendDate: true,
        _removedConnection: false,
        _removedContLen: false,
        _removedTE: false,
        _contentLength: null,
        _hasBody: true,
        _trailer: '',
        finished: false,
        _headerSent: false,
        socket: [Circular],
        connection: [Circular],
        _header: null,
        _onPendingData: [Function: bound updateOutgoingData],
        _sent100: false,
        _expect_continue: false,
        req: [Circular],
        locals: {},
        [Symbol(outHeadersKey)]: [Object] },
     [Symbol(asyncId)]: 11,
     [Symbol(bytesRead)]: 0,
     [Symbol(asyncId)]: 13,
     [Symbol(triggerAsyncId)]: 9 },
  connection: 
   Socket {
     connecting: false,
     _hadError: false,
     _handle: 
      TCP {
        reading: true,
        owner: [Circular],
        onread: [Function: onread],
        onconnection: null,
        writeQueueSize: 0,
        _consumed: true },
     _parent: null,
     _host: null,
     _readableState: 
      ReadableState {
        objectMode: false,
        highWaterMark: 16384,
        buffer: [Object],
        length: 0,
        pipes: null,
        pipesCount: 0,
        flowing: true,
        ended: false,
        endEmitted: false,
        reading: true,
        sync: false,
        needReadable: true,
        emittedReadable: false,
        readableListening: false,
        resumeScheduled: false,
        destroyed: false,
        defaultEncoding: 'utf8',
        awaitDrain: 0,
        readingMore: false,
        decoder: null,
        encoding: null },
     readable: true,
     domain: null,
     _events: 
      { end: [Array],
        finish: [Function: onSocketFinish],
        _socketEnd: [Function: onSocketEnd],
        drain: [Array],
        timeout: [Function: socketOnTimeout],
        data: [Function: bound socketOnData],
        error: [Function: socketOnError],
        close: [Array],
        resume: [Function: onSocketResume],
        pause: [Function: onSocketPause] },
     _eventsCount: 10,
     _maxListeners: undefined,
     _writableState: 
      WritableState {
        objectMode: false,
        highWaterMark: 16384,
        finalCalled: false,
        needDrain: false,
        ending: false,
        ended: false,
        finished: false,
        destroyed: false,
        decodeStrings: false,
        defaultEncoding: 'utf8',
        length: 0,
        writing: false,
        corked: 0,
        sync: true,
        bufferProcessing: false,
        onwrite: [Function: bound onwrite],
        writecb: null,
        writelen: 0,
        bufferedRequest: null,
        lastBufferedRequest: null,
        pendingcb: 0,
        prefinished: false,
        errorEmitted: false,
        bufferedRequestCount: 0,
        corkedRequestsFree: [Object] },
     writable: true,
     allowHalfOpen: true,
     _bytesDispatched: 0,
     _sockname: null,
     _pendingData: null,
     _pendingEncoding: '',
     server: 
      Server {
        domain: null,
        _events: [Object],
        _eventsCount: 2,
        _maxListeners: undefined,
        _connections: 1,
        _handle: [Object],
        _usingSlaves: false,
        _slaves: [],
        _unref: false,
        allowHalfOpen: true,
        pauseOnConnect: false,
        httpAllowHalfOpen: false,
        timeout: 120000,
        keepAliveTimeout: 5000,
        _pendingResponseData: 0,
        maxHeadersCount: null,
        _connectionKey: '4:127.0.0.1:0',
        [Symbol(asyncId)]: 9 },
     _server: 
      Server {
        domain: null,
        _events: [Object],
        _eventsCount: 2,
        _maxListeners: undefined,
        _connections: 1,
        _handle: [Object],
        _usingSlaves: false,
        _slaves: [],
        _unref: false,
        allowHalfOpen: true,
        pauseOnConnect: false,
        httpAllowHalfOpen: false,
        timeout: 120000,
        keepAliveTimeout: 5000,
        _pendingResponseData: 0,
        maxHeadersCount: null,
        _connectionKey: '4:127.0.0.1:0',
        [Symbol(asyncId)]: 9 },
     _idleTimeout: 120000,
     _idleNext: 
      TimersList {
        _idleNext: [Circular],
        _idlePrev: [Circular],
        _timer: [Object],
        _unrefed: true,
        msecs: 120000,
        nextTick: false },
     _idlePrev: 
      TimersList {
        _idleNext: [Circular],
        _idlePrev: [Circular],
        _timer: [Object],
        _unrefed: true,
        msecs: 120000,
        nextTick: false },
     _idleStart: 10777,
     _destroyed: false,
     parser: 
      HTTPParser {
        '0': [Function: parserOnHeaders],
        '1': [Function: parserOnHeadersComplete],
        '2': [Function: parserOnBody],
        '3': [Function: parserOnMessageComplete],
        '4': [Function: bound onParserExecute],
        _headers: [],
        _url: '',
        _consumed: true,
        socket: [Circular],
        incoming: [Circular],
        outgoing: null,
        maxHeaderPairs: 2000,
        onIncoming: [Function: bound parserOnIncoming] },
     on: [Function: socketOnWrap],
     _paused: false,
     read: [Function],
     _consuming: true,
     _httpMessage: 
      ServerResponse {
        domain: null,
        _events: [Object],
        _eventsCount: 1,
        _maxListeners: undefined,
        output: [],
        outputEncodings: [],
        outputCallbacks: [],
        outputSize: 0,
        writable: true,
        _last: false,
        upgrading: false,
        chunkedEncoding: false,
        shouldKeepAlive: false,
        useChunkedEncodingByDefault: true,
        sendDate: true,
        _removedConnection: false,
        _removedContLen: false,
        _removedTE: false,
        _contentLength: null,
        _hasBody: true,
        _trailer: '',
        finished: false,
        _headerSent: false,
        socket: [Circular],
        connection: [Circular],
        _header: null,
        _onPendingData: [Function: bound updateOutgoingData],
        _sent100: false,
        _expect_continue: false,
        req: [Circular],
        locals: {},
        [Symbol(outHeadersKey)]: [Object] },
     [Symbol(asyncId)]: 11,
     [Symbol(bytesRead)]: 0,
     [Symbol(asyncId)]: 13,
     [Symbol(triggerAsyncId)]: 9 },
  httpVersionMajor: 1,
  httpVersionMinor: 1,
  httpVersion: '1.1',
  complete: false,
  headers: { connection: 'close', host: 'localhost:5000' },
  rawHeaders: [ 'connection', 'close', 'host', 'localhost:5000' ],
  trailers: {},
  rawTrailers: [],
  upgrade: false,
  url: '/',
  method: 'GET',
  statusCode: null,
  statusMessage: null,
  client: 
   Socket {
     connecting: false,
     _hadError: false,
     _handle: 
      TCP {
        reading: true,
        owner: [Circular],
        onread: [Function: onread],
        onconnection: null,
        writeQueueSize: 0,
        _consumed: true },
     _parent: null,
     _host: null,
     _readableState: 
      ReadableState {
        objectMode: false,
        highWaterMark: 16384,
        buffer: [Object],
        length: 0,
        pipes: null,
        pipesCount: 0,
        flowing: true,
        ended: false,
        endEmitted: false,
        reading: true,
        sync: false,
        needReadable: true,
        emittedReadable: false,
        readableListening: false,
        resumeScheduled: false,
        destroyed: false,
        defaultEncoding: 'utf8',
        awaitDrain: 0,
        readingMore: false,
        decoder: null,
        encoding: null },
     readable: true,
     domain: null,
     _events: 
      { end: [Array],
        finish: [Function: onSocketFinish],
        _socketEnd: [Function: onSocketEnd],
        drain: [Array],
        timeout: [Function: socketOnTimeout],
        data: [Function: bound socketOnData],
        error: [Function: socketOnError],
        close: [Array],
        resume: [Function: onSocketResume],
        pause: [Function: onSocketPause] },
     _eventsCount: 10,
     _maxListeners: undefined,
     _writableState: 
      WritableState {
        objectMode: false,
        highWaterMark: 16384,
        finalCalled: false,
        needDrain: false,
        ending: false,
        ended: false,
        finished: false,
        destroyed: false,
        decodeStrings: false,
        defaultEncoding: 'utf8',
        length: 0,
        writing: false,
        corked: 0,
        sync: true,
        bufferProcessing: false,
        onwrite: [Function: bound onwrite],
        writecb: null,
        writelen: 0,
        bufferedRequest: null,
        lastBufferedRequest: null,
        pendingcb: 0,
        prefinished: false,
        errorEmitted: false,
        bufferedRequestCount: 0,
        corkedRequestsFree: [Object] },
     writable: true,
     allowHalfOpen: true,
     _bytesDispatched: 0,
     _sockname: null,
     _pendingData: null,
     _pendingEncoding: '',
     server: 
      Server {
        domain: null,
        _events: [Object],
        _eventsCount: 2,
        _maxListeners: undefined,
        _connections: 1,
        _handle: [Object],
        _usingSlaves: false,
        _slaves: [],
        _unref: false,
        allowHalfOpen: true,
        pauseOnConnect: false,
        httpAllowHalfOpen: false,
        timeout: 120000,
        keepAliveTimeout: 5000,
        _pendingResponseData: 0,
        maxHeadersCount: null,
        _connectionKey: '4:127.0.0.1:0',
        [Symbol(asyncId)]: 9 },
     _server: 
      Server {
        domain: null,
        _events: [Object],
        _eventsCount: 2,
        _maxListeners: undefined,
        _connections: 1,
        _handle: [Object],
        _usingSlaves: false,
        _slaves: [],
        _unref: false,
        allowHalfOpen: true,
        pauseOnConnect: false,
        httpAllowHalfOpen: false,
        timeout: 120000,
        keepAliveTimeout: 5000,
        _pendingResponseData: 0,
        maxHeadersCount: null,
        _connectionKey: '4:127.0.0.1:0',
        [Symbol(asyncId)]: 9 },
     _idleTimeout: 120000,
     _idleNext: 
      TimersList {
        _idleNext: [Circular],
        _idlePrev: [Circular],
        _timer: [Object],
        _unrefed: true,
        msecs: 120000,
        nextTick: false },
     _idlePrev: 
      TimersList {
        _idleNext: [Circular],
        _idlePrev: [Circular],
        _timer: [Object],
        _unrefed: true,
        msecs: 120000,
        nextTick: false },
     _idleStart: 10777,
     _destroyed: false,
     parser: 
      HTTPParser {
        '0': [Function: parserOnHeaders],
        '1': [Function: parserOnHeadersComplete],
        '2': [Function: parserOnBody],
        '3': [Function: parserOnMessageComplete],
        '4': [Function: bound onParserExecute],
        _headers: [],
        _url: '',
        _consumed: true,
        socket: [Circular],
        incoming: [Circular],
        outgoing: null,
        maxHeaderPairs: 2000,
        onIncoming: [Function: bound parserOnIncoming] },
     on: [Function: socketOnWrap],
     _paused: false,
     read: [Function],
     _consuming: true,
     _httpMessage: 
      ServerResponse {
        domain: null,
        _events: [Object],
        _eventsCount: 1,
        _maxListeners: undefined,
        output: [],
        outputEncodings: [],
        outputCallbacks: [],
        outputSize: 0,
        writable: true,
        _last: false,
        upgrading: false,
        chunkedEncoding: false,
        shouldKeepAlive: false,
        useChunkedEncodingByDefault: true,
        sendDate: true,
        _removedConnection: false,
        _removedContLen: false,
        _removedTE: false,
        _contentLength: null,
        _hasBody: true,
        _trailer: '',
        finished: false,
        _headerSent: false,
        socket: [Circular],
        connection: [Circular],
        _header: null,
        _onPendingData: [Function: bound updateOutgoingData],
        _sent100: false,
        _expect_continue: false,
        req: [Circular],
        locals: {},
        [Symbol(outHeadersKey)]: [Object] },
     [Symbol(asyncId)]: 11,
     [Symbol(bytesRead)]: 0,
     [Symbol(asyncId)]: 13,
     [Symbol(triggerAsyncId)]: 9 },
  _consuming: false,
  _dumped: false,
  next: [Function: next],
  baseUrl: '',
  originalUrl: '/',
  _parsedUrl: 
   Url {
     protocol: null,
     slashes: null,
     auth: null,
     host: null,
     port: null,
     hostname: null,
     hash: null,
     search: null,
     query: null,
     pathname: '/',
     path: '/',
     href: '/',
     _raw: '/' },
  params: {},
  query: {},
  res: 
   ServerResponse {
     domain: null,
     _events: { finish: [Array] },
     _eventsCount: 1,
     _maxListeners: undefined,
     output: [],
     outputEncodings: [],
     outputCallbacks: [],
     outputSize: 0,
     writable: true,
     _last: false,
     upgrading: false,
     chunkedEncoding: false,
     shouldKeepAlive: false,
     useChunkedEncodingByDefault: true,
     sendDate: true,
     _removedConnection: false,
     _removedContLen: false,
     _removedTE: false,
     _contentLength: null,
     _hasBody: true,
     _trailer: '',
     finished: false,
     _headerSent: false,
     socket: 
      Socket {
        connecting: false,
        _hadError: false,
        _handle: [Object],
        _parent: null,
        _host: null,
        _readableState: [Object],
        readable: true,
        domain: null,
        _events: [Object],
        _eventsCount: 10,
        _maxListeners: undefined,
        _writableState: [Object],
        writable: true,
        allowHalfOpen: true,
        _bytesDispatched: 0,
        _sockname: null,
        _pendingData: null,
        _pendingEncoding: '',
        server: [Object],
        _server: [Object],
        _idleTimeout: 120000,
        _idleNext: [Object],
        _idlePrev: [Object],
        _idleStart: 10777,
        _destroyed: false,
        parser: [Object],
        on: [Function: socketOnWrap],
        _paused: false,
        read: [Function],
        _consuming: true,
        _httpMessage: [Circular],
        [Symbol(asyncId)]: 11,
        [Symbol(bytesRead)]: 0,
        [Symbol(asyncId)]: 13,
        [Symbol(triggerAsyncId)]: 9 },
     connection: 
      Socket {
        connecting: false,
        _hadError: false,
        _handle: [Object],
        _parent: null,
        _host: null,
        _readableState: [Object],
        readable: true,
        domain: null,
        _events: [Object],
        _eventsCount: 10,
        _maxListeners: undefined,
        _writableState: [Object],
        writable: true,
        allowHalfOpen: true,
        _bytesDispatched: 0,
        _sockname: null,
        _pendingData: null,
        _pendingEncoding: '',
        server: [Object],
        _server: [Object],
        _idleTimeout: 120000,
        _idleNext: [Object],
        _idlePrev: [Object],
        _idleStart: 10777,
        _destroyed: false,
        parser: [Object],
        on: [Function: socketOnWrap],
        _paused: false,
        read: [Function],
        _consuming: true,
        _httpMessage: [Circular],
        [Symbol(asyncId)]: 11,
        [Symbol(bytesRead)]: 0,
        [Symbol(asyncId)]: 13,
        [Symbol(triggerAsyncId)]: 9 },
     _header: null,
     _onPendingData: [Function: bound updateOutgoingData],
     _sent100: false,
     _expect_continue: false,
     req: [Circular],
     locals: {},
     [Symbol(outHeadersKey)]: 
      { 'x-powered-by': [Array],
        'cache-control': [Array],
        pragma: [Array],
        expires: [Array],
        vary: [Array] } },
  body: {} }
2018-04-07T18:41:38.163Z - info: Execution took 26 ms, user function completed successfully
2018-04-07T18:41:50.686Z - info: Worker for getChatList closed due to file changes.
2018-04-07T18:41:50.770Z - error: Function worker killed by signal: SIGTERM
2018-04-07T18:53:16.410Z - info: User function triggered, starting execution
2018-04-07T18:53:20.319Z - info: [ 'S9cIFvYv1ifgbmEJlI8wTi8Z7Cz2' ]
2018-04-07T18:53:22.812Z - info: Execution took 6402 ms, user function completed successfully
2018-04-07T18:55:00.397Z - info: User function triggered, starting execution
2018-04-07T18:55:04.010Z - info: [ 'S9cIFvYv1ifgbmEJlI8wTi8Z7Cz2' ]
2018-04-07T18:55:04.568Z - info: Execution took 4173 ms, user function completed successfully
2018-04-07T18:57:04.347Z - info: User function triggered, starting execution
2018-04-07T18:57:07.210Z - info: [ 'S9cIFvYv1ifgbmEJlI8wTi8Z7Cz2' ]
2018-04-07T18:57:08.165Z - info: Execution took 3819 ms, user function completed successfully
2018-04-07T18:58:22.044Z - info: User function triggered, starting execution
2018-04-07T18:58:22.358Z - info: [ 'S9cIFvYv1ifgbmEJlI8wTi8Z7Cz2' ]
2018-04-07T18:58:22.827Z - info: Execution took 783 ms, user function completed successfully
2018-04-07T18:58:33.833Z - info: User function triggered, starting execution
2018-04-07T18:58:34.183Z - info: [ 'S9cIFvYv1ifgbmEJlI8wTi8Z7Cz2' ]
2018-04-07T18:58:34.645Z - info: Execution took 810 ms, user function completed successfully
2018-04-07T19:15:17.189Z - info: User function triggered, starting execution
2018-04-07T19:15:20.203Z - info: [ 'S9cIFvYv1ifgbmEJlI8wTi8Z7Cz2' ]
2018-04-07T19:15:21.001Z - info: Execution took 3817 ms, user function completed successfully
2018-04-07T19:27:53.340Z - info: User function triggered, starting execution
2018-04-07T19:27:55.597Z - info: [ 'S9cIFvYv1ifgbmEJlI8wTi8Z7Cz2' ]
2018-04-07T19:28:53.341Z - info: Execution took 60612 ms, finished with status: 'timeout'
2018-04-07T19:28:53.346Z - info: Execution took 60617 ms, finished with status: 'crash'
2018-04-07T19:28:53.347Z - error: Something went wrong with the function!
2018-04-07T19:28:53.348Z - error:  Error: Can't set headers after they are sent.
    at validateHeader (_http_outgoing.js:494:11)
    at ServerResponse.setHeader (_http_outgoing.js:501:3)
    at ServerResponse.header (/usr/lib/node_modules/firebase-tools/node_modules/express/lib/response.js:767:10)
    at ServerResponse.send (/usr/lib/node_modules/firebase-tools/node_modules/express/lib/response.js:170:12)
    at ServerResponse.json (/usr/lib/node_modules/firebase-tools/node_modules/express/lib/response.js:267:15)
    at ProxyServer.Supervisor._proxy.on (/usr/lib/node_modules/firebase-tools/node_modules/@google-cloud/functions-emulator/src/supervisor/supervisor.js:107:14)
    at ProxyServer.emit (/usr/lib/node_modules/firebase-tools/node_modules/eventemitter3/index.js:144:27)
    at ClientRequest.proxyError (/usr/lib/node_modules/firebase-tools/node_modules/http-proxy/lib/http-proxy/passes/web-incoming.js:156:18)
    at emitOne (events.js:116:13)
    at ClientRequest.emit (events.js:211:7)
2018-04-07T19:28:58.880Z - info: User function triggered, starting execution
2018-04-07T19:29:01.199Z - info: [ 'S9cIFvYv1ifgbmEJlI8wTi8Z7Cz2' ]
2018-04-07T19:29:54.197Z - info: User function triggered, starting execution
2018-04-07T19:29:54.200Z - error: Request has invalid method. GET
2018-04-07T19:29:54.218Z - error: Invalid request IncomingMessage {
  _readableState: 
   ReadableState {
     objectMode: false,
     highWaterMark: 16384,
     buffer: BufferList { head: null, tail: null, length: 0 },
     length: 0,
     pipes: null,
     pipesCount: 0,
     flowing: null,
     ended: false,
     endEmitted: false,
     reading: false,
     sync: true,
     needReadable: false,
     emittedReadable: false,
     readableListening: false,
     resumeScheduled: false,
     destroyed: false,
     defaultEncoding: 'utf8',
     awaitDrain: 0,
     readingMore: true,
     decoder: null,
     encoding: null },
  readable: true,
  domain: null,
  _events: {},
  _eventsCount: 0,
  _maxListeners: undefined,
  socket: 
   Socket {
     connecting: false,
     _hadError: false,
     _handle: 
      TCP {
        reading: true,
        owner: [Circular],
        onread: [Function: onread],
        onconnection: null,
        writeQueueSize: 0,
        _consumed: true },
     _parent: null,
     _host: null,
     _readableState: 
      ReadableState {
        objectMode: false,
        highWaterMark: 16384,
        buffer: [Object],
        length: 0,
        pipes: null,
        pipesCount: 0,
        flowing: true,
        ended: false,
        endEmitted: false,
        reading: true,
        sync: false,
        needReadable: true,
        emittedReadable: false,
        readableListening: false,
        resumeScheduled: false,
        destroyed: false,
        defaultEncoding: 'utf8',
        awaitDrain: 0,
        readingMore: false,
        decoder: null,
        encoding: null },
     readable: true,
     domain: null,
     _events: 
      { end: [Array],
        finish: [Function: onSocketFinish],
        _socketEnd: [Function: onSocketEnd],
        drain: [Array],
        timeout: [Function: socketOnTimeout],
        data: [Function: bound socketOnData],
        error: [Function: socketOnError],
        close: [Array],
        resume: [Function: onSocketResume],
        pause: [Function: onSocketPause] },
     _eventsCount: 10,
     _maxListeners: undefined,
     _writableState: 
      WritableState {
        objectMode: false,
        highWaterMark: 16384,
        finalCalled: false,
        needDrain: false,
        ending: false,
        ended: false,
        finished: false,
        destroyed: false,
        decodeStrings: false,
        defaultEncoding: 'utf8',
        length: 0,
        writing: false,
        corked: 0,
        sync: true,
        bufferProcessing: false,
        onwrite: [Function: bound onwrite],
        writecb: null,
        writelen: 0,
        bufferedRequest: null,
        lastBufferedRequest: null,
        pendingcb: 0,
        prefinished: false,
        errorEmitted: false,
        bufferedRequestCount: 0,
        corkedRequestsFree: [Object] },
     writable: true,
     allowHalfOpen: true,
     _bytesDispatched: 0,
     _sockname: null,
     _pendingData: null,
     _pendingEncoding: '',
     server: 
      Server {
        domain: null,
        _events: [Object],
        _eventsCount: 2,
        _maxListeners: undefined,
        _connections: 1,
        _handle: [Object],
        _usingSlaves: false,
        _slaves: [],
        _unref: false,
        allowHalfOpen: true,
        pauseOnConnect: false,
        httpAllowHalfOpen: false,
        timeout: 120000,
        keepAliveTimeout: 5000,
        _pendingResponseData: 0,
        maxHeadersCount: null,
        _connectionKey: '4:127.0.0.1:0',
        [Symbol(asyncId)]: 9 },
     _server: 
      Server {
        domain: null,
        _events: [Object],
        _eventsCount: 2,
        _maxListeners: undefined,
        _connections: 1,
        _handle: [Object],
        _usingSlaves: false,
        _slaves: [],
        _unref: false,
        allowHalfOpen: true,
        pauseOnConnect: false,
        httpAllowHalfOpen: false,
        timeout: 120000,
        keepAliveTimeout: 5000,
        _pendingResponseData: 0,
        maxHeadersCount: null,
        _connectionKey: '4:127.0.0.1:0',
        [Symbol(asyncId)]: 9 },
     _idleTimeout: 120000,
     _idleNext: 
      TimersList {
        _idleNext: [Circular],
        _idlePrev: [Circular],
        _timer: [Object],
        _unrefed: true,
        msecs: 120000,
        nextTick: false },
     _idlePrev: 
      TimersList {
        _idleNext: [Circular],
        _idlePrev: [Circular],
        _timer: [Object],
        _unrefed: true,
        msecs: 120000,
        nextTick: false },
     _idleStart: 13331,
     _destroyed: false,
     parser: 
      HTTPParser {
        '0': [Function: parserOnHeaders],
        '1': [Function: parserOnHeadersComplete],
        '2': [Function: parserOnBody],
        '3': [Function: parserOnMessageComplete],
        '4': [Function: bound onParserExecute],
        _headers: [],
        _url: '',
        _consumed: true,
        socket: [Circular],
        incoming: [Circular],
        outgoing: null,
        maxHeaderPairs: 2000,
        onIncoming: [Function: bound parserOnIncoming] },
     on: [Function: socketOnWrap],
     _paused: false,
     read: [Function],
     _consuming: true,
     _httpMessage: 
      ServerResponse {
        domain: null,
        _events: [Object],
        _eventsCount: 1,
        _maxListeners: undefined,
        output: [],
        outputEncodings: [],
        outputCallbacks: [],
        outputSize: 0,
        writable: true,
        _last: false,
        upgrading: false,
        chunkedEncoding: false,
        shouldKeepAlive: false,
        useChunkedEncodingByDefault: true,
        sendDate: true,
        _removedConnection: false,
        _removedContLen: false,
        _removedTE: false,
        _contentLength: null,
        _hasBody: true,
        _trailer: '',
        finished: false,
        _headerSent: false,
        socket: [Circular],
        connection: [Circular],
        _header: null,
        _onPendingData: [Function: bound updateOutgoingData],
        _sent100: false,
        _expect_continue: false,
        req: [Circular],
        locals: {},
        [Symbol(outHeadersKey)]: [Object] },
     [Symbol(asyncId)]: 11,
     [Symbol(bytesRead)]: 0,
     [Symbol(asyncId)]: 13,
     [Symbol(triggerAsyncId)]: 9 },
  connection: 
   Socket {
     connecting: false,
     _hadError: false,
     _handle: 
      TCP {
        reading: true,
        owner: [Circular],
        onread: [Function: onread],
        onconnection: null,
        writeQueueSize: 0,
        _consumed: true },
     _parent: null,
     _host: null,
     _readableState: 
      ReadableState {
        objectMode: false,
        highWaterMark: 16384,
        buffer: [Object],
        length: 0,
        pipes: null,
        pipesCount: 0,
        flowing: true,
        ended: false,
        endEmitted: false,
        reading: true,
        sync: false,
        needReadable: true,
        emittedReadable: false,
        readableListening: false,
        resumeScheduled: false,
        destroyed: false,
        defaultEncoding: 'utf8',
        awaitDrain: 0,
        readingMore: false,
        decoder: null,
        encoding: null },
     readable: true,
     domain: null,
     _events: 
      { end: [Array],
        finish: [Function: onSocketFinish],
        _socketEnd: [Function: onSocketEnd],
        drain: [Array],
        timeout: [Function: socketOnTimeout],
        data: [Function: bound socketOnData],
        error: [Function: socketOnError],
        close: [Array],
        resume: [Function: onSocketResume],
        pause: [Function: onSocketPause] },
     _eventsCount: 10,
     _maxListeners: undefined,
     _writableState: 
      WritableState {
        objectMode: false,
        highWaterMark: 16384,
        finalCalled: false,
        needDrain: false,
        ending: false,
        ended: false,
        finished: false,
        destroyed: false,
        decodeStrings: false,
        defaultEncoding: 'utf8',
        length: 0,
        writing: false,
        corked: 0,
        sync: true,
        bufferProcessing: false,
        onwrite: [Function: bound onwrite],
        writecb: null,
        writelen: 0,
        bufferedRequest: null,
        lastBufferedRequest: null,
        pendingcb: 0,
        prefinished: false,
        errorEmitted: false,
        bufferedRequestCount: 0,
        corkedRequestsFree: [Object] },
     writable: true,
     allowHalfOpen: true,
     _bytesDispatched: 0,
     _sockname: null,
     _pendingData: null,
     _pendingEncoding: '',
     server: 
      Server {
        domain: null,
        _events: [Object],
        _eventsCount: 2,
        _maxListeners: undefined,
        _connections: 1,
        _handle: [Object],
        _usingSlaves: false,
        _slaves: [],
        _unref: false,
        allowHalfOpen: true,
        pauseOnConnect: false,
        httpAllowHalfOpen: false,
        timeout: 120000,
        keepAliveTimeout: 5000,
        _pendingResponseData: 0,
        maxHeadersCount: null,
        _connectionKey: '4:127.0.0.1:0',
        [Symbol(asyncId)]: 9 },
     _server: 
      Server {
        domain: null,
        _events: [Object],
        _eventsCount: 2,
        _maxListeners: undefined,
        _connections: 1,
        _handle: [Object],
        _usingSlaves: false,
        _slaves: [],
        _unref: false,
        allowHalfOpen: true,
        pauseOnConnect: false,
        httpAllowHalfOpen: false,
        timeout: 120000,
        keepAliveTimeout: 5000,
        _pendingResponseData: 0,
        maxHeadersCount: null,
        _connectionKey: '4:127.0.0.1:0',
        [Symbol(asyncId)]: 9 },
     _idleTimeout: 120000,
     _idleNext: 
      TimersList {
        _idleNext: [Circular],
        _idlePrev: [Circular],
        _timer: [Object],
        _unrefed: true,
        msecs: 120000,
        nextTick: false },
     _idlePrev: 
      TimersList {
        _idleNext: [Circular],
        _idlePrev: [Circular],
        _timer: [Object],
        _unrefed: true,
        msecs: 120000,
        nextTick: false },
     _idleStart: 13331,
     _destroyed: false,
     parser: 
      HTTPParser {
        '0': [Function: parserOnHeaders],
        '1': [Function: parserOnHeadersComplete],
        '2': [Function: parserOnBody],
        '3': [Function: parserOnMessageComplete],
        '4': [Function: bound onParserExecute],
        _headers: [],
        _url: '',
        _consumed: true,
        socket: [Circular],
        incoming: [Circular],
        outgoing: null,
        maxHeaderPairs: 2000,
        onIncoming: [Function: bound parserOnIncoming] },
     on: [Function: socketOnWrap],
     _paused: false,
     read: [Function],
     _consuming: true,
     _httpMessage: 
      ServerResponse {
        domain: null,
        _events: [Object],
        _eventsCount: 1,
        _maxListeners: undefined,
        output: [],
        outputEncodings: [],
        outputCallbacks: [],
        outputSize: 0,
        writable: true,
        _last: false,
        upgrading: false,
        chunkedEncoding: false,
        shouldKeepAlive: false,
        useChunkedEncodingByDefault: true,
        sendDate: true,
        _removedConnection: false,
        _removedContLen: false,
        _removedTE: false,
        _contentLength: null,
        _hasBody: true,
        _trailer: '',
        finished: false,
        _headerSent: false,
        socket: [Circular],
        connection: [Circular],
        _header: null,
        _onPendingData: [Function: bound updateOutgoingData],
        _sent100: false,
        _expect_continue: false,
        req: [Circular],
        locals: {},
        [Symbol(outHeadersKey)]: [Object] },
     [Symbol(asyncId)]: 11,
     [Symbol(bytesRead)]: 0,
     [Symbol(asyncId)]: 13,
     [Symbol(triggerAsyncId)]: 9 },
  httpVersionMajor: 1,
  httpVersionMinor: 1,
  httpVersion: '1.1',
  complete: false,
  headers: { connection: 'close', host: 'localhost:5000' },
  rawHeaders: [ 'connection', 'close', 'host', 'localhost:5000' ],
  trailers: {},
  rawTrailers: [],
  upgrade: false,
  url: '/',
  method: 'GET',
  statusCode: null,
  statusMessage: null,
  client: 
   Socket {
     connecting: false,
     _hadError: false,
     _handle: 
      TCP {
        reading: true,
        owner: [Circular],
        onread: [Function: onread],
        onconnection: null,
        writeQueueSize: 0,
        _consumed: true },
     _parent: null,
     _host: null,
     _readableState: 
      ReadableState {
        objectMode: false,
        highWaterMark: 16384,
        buffer: [Object],
        length: 0,
        pipes: null,
        pipesCount: 0,
        flowing: true,
        ended: false,
        endEmitted: false,
        reading: true,
        sync: false,
        needReadable: true,
        emittedReadable: false,
        readableListening: false,
        resumeScheduled: false,
        destroyed: false,
        defaultEncoding: 'utf8',
        awaitDrain: 0,
        readingMore: false,
        decoder: null,
        encoding: null },
     readable: true,
     domain: null,
     _events: 
      { end: [Array],
        finish: [Function: onSocketFinish],
        _socketEnd: [Function: onSocketEnd],
        drain: [Array],
        timeout: [Function: socketOnTimeout],
        data: [Function: bound socketOnData],
        error: [Function: socketOnError],
        close: [Array],
        resume: [Function: onSocketResume],
        pause: [Function: onSocketPause] },
     _eventsCount: 10,
     _maxListeners: undefined,
     _writableState: 
      WritableState {
        objectMode: false,
        highWaterMark: 16384,
        finalCalled: false,
        needDrain: false,
        ending: false,
        ended: false,
        finished: false,
        destroyed: false,
        decodeStrings: false,
        defaultEncoding: 'utf8',
        length: 0,
        writing: false,
        corked: 0,
        sync: true,
        bufferProcessing: false,
        onwrite: [Function: bound onwrite],
        writecb: null,
        writelen: 0,
        bufferedRequest: null,
        lastBufferedRequest: null,
        pendingcb: 0,
        prefinished: false,
        errorEmitted: false,
        bufferedRequestCount: 0,
        corkedRequestsFree: [Object] },
     writable: true,
     allowHalfOpen: true,
     _bytesDispatched: 0,
     _sockname: null,
     _pendingData: null,
     _pendingEncoding: '',
     server: 
      Server {
        domain: null,
        _events: [Object],
        _eventsCount: 2,
        _maxListeners: undefined,
        _connections: 1,
        _handle: [Object],
        _usingSlaves: false,
        _slaves: [],
        _unref: false,
        allowHalfOpen: true,
        pauseOnConnect: false,
        httpAllowHalfOpen: false,
        timeout: 120000,
        keepAliveTimeout: 5000,
        _pendingResponseData: 0,
        maxHeadersCount: null,
        _connectionKey: '4:127.0.0.1:0',
        [Symbol(asyncId)]: 9 },
     _server: 
      Server {
        domain: null,
        _events: [Object],
        _eventsCount: 2,
        _maxListeners: undefined,
        _connections: 1,
        _handle: [Object],
        _usingSlaves: false,
        _slaves: [],
        _unref: false,
        allowHalfOpen: true,
        pauseOnConnect: false,
        httpAllowHalfOpen: false,
        timeout: 120000,
        keepAliveTimeout: 5000,
        _pendingResponseData: 0,
        maxHeadersCount: null,
        _connectionKey: '4:127.0.0.1:0',
        [Symbol(asyncId)]: 9 },
     _idleTimeout: 120000,
     _idleNext: 
      TimersList {
        _idleNext: [Circular],
        _idlePrev: [Circular],
        _timer: [Object],
        _unrefed: true,
        msecs: 120000,
        nextTick: false },
     _idlePrev: 
      TimersList {
        _idleNext: [Circular],
        _idlePrev: [Circular],
        _timer: [Object],
        _unrefed: true,
        msecs: 120000,
        nextTick: false },
     _idleStart: 13331,
     _destroyed: false,
     parser: 
      HTTPParser {
        '0': [Function: parserOnHeaders],
        '1': [Function: parserOnHeadersComplete],
        '2': [Function: parserOnBody],
        '3': [Function: parserOnMessageComplete],
        '4': [Function: bound onParserExecute],
        _headers: [],
        _url: '',
        _consumed: true,
        socket: [Circular],
        incoming: [Circular],
        outgoing: null,
        maxHeaderPairs: 2000,
        onIncoming: [Function: bound parserOnIncoming] },
     on: [Function: socketOnWrap],
     _paused: false,
     read: [Function],
     _consuming: true,
     _httpMessage: 
      ServerResponse {
        domain: null,
        _events: [Object],
        _eventsCount: 1,
        _maxListeners: undefined,
        output: [],
        outputEncodings: [],
        outputCallbacks: [],
        outputSize: 0,
        writable: true,
        _last: false,
        upgrading: false,
        chunkedEncoding: false,
        shouldKeepAlive: false,
        useChunkedEncodingByDefault: true,
        sendDate: true,
        _removedConnection: false,
        _removedContLen: false,
        _removedTE: false,
        _contentLength: null,
        _hasBody: true,
        _trailer: '',
        finished: false,
        _headerSent: false,
        socket: [Circular],
        connection: [Circular],
        _header: null,
        _onPendingData: [Function: bound updateOutgoingData],
        _sent100: false,
        _expect_continue: false,
        req: [Circular],
        locals: {},
        [Symbol(outHeadersKey)]: [Object] },
     [Symbol(asyncId)]: 11,
     [Symbol(bytesRead)]: 0,
     [Symbol(asyncId)]: 13,
     [Symbol(triggerAsyncId)]: 9 },
  _consuming: false,
  _dumped: false,
  next: [Function: next],
  baseUrl: '',
  originalUrl: '/',
  _parsedUrl: 
   Url {
     protocol: null,
     slashes: null,
     auth: null,
     host: null,
     port: null,
     hostname: null,
     hash: null,
     search: null,
     query: null,
     pathname: '/',
     path: '/',
     href: '/',
     _raw: '/' },
  params: {},
  query: {},
  res: 
   ServerResponse {
     domain: null,
     _events: { finish: [Array] },
     _eventsCount: 1,
     _maxListeners: undefined,
     output: [],
     outputEncodings: [],
     outputCallbacks: [],
     outputSize: 0,
     writable: true,
     _last: false,
     upgrading: false,
     chunkedEncoding: false,
     shouldKeepAlive: false,
     useChunkedEncodingByDefault: true,
     sendDate: true,
     _removedConnection: false,
     _removedContLen: false,
     _removedTE: false,
     _contentLength: null,
     _hasBody: true,
     _trailer: '',
     finished: false,
     _headerSent: false,
     socket: 
      Socket {
        connecting: false,
        _hadError: false,
        _handle: [Object],
        _parent: null,
        _host: null,
        _readableState: [Object],
        readable: true,
        domain: null,
        _events: [Object],
        _eventsCount: 10,
        _maxListeners: undefined,
        _writableState: [Object],
        writable: true,
        allowHalfOpen: true,
        _bytesDispatched: 0,
        _sockname: null,
        _pendingData: null,
        _pendingEncoding: '',
        server: [Object],
        _server: [Object],
        _idleTimeout: 120000,
        _idleNext: [Object],
        _idlePrev: [Object],
        _idleStart: 13331,
        _destroyed: false,
        parser: [Object],
        on: [Function: socketOnWrap],
        _paused: false,
        read: [Function],
        _consuming: true,
        _httpMessage: [Circular],
        [Symbol(asyncId)]: 11,
        [Symbol(bytesRead)]: 0,
        [Symbol(asyncId)]: 13,
        [Symbol(triggerAsyncId)]: 9 },
     connection: 
      Socket {
        connecting: false,
        _hadError: false,
        _handle: [Object],
        _parent: null,
        _host: null,
        _readableState: [Object],
        readable: true,
        domain: null,
        _events: [Object],
        _eventsCount: 10,
        _maxListeners: undefined,
        _writableState: [Object],
        writable: true,
        allowHalfOpen: true,
        _bytesDispatched: 0,
        _sockname: null,
        _pendingData: null,
        _pendingEncoding: '',
        server: [Object],
        _server: [Object],
        _idleTimeout: 120000,
        _idleNext: [Object],
        _idlePrev: [Object],
        _idleStart: 13331,
        _destroyed: false,
        parser: [Object],
        on: [Function: socketOnWrap],
        _paused: false,
        read: [Function],
        _consuming: true,
        _httpMessage: [Circular],
        [Symbol(asyncId)]: 11,
        [Symbol(bytesRead)]: 0,
        [Symbol(asyncId)]: 13,
        [Symbol(triggerAsyncId)]: 9 },
     _header: null,
     _onPendingData: [Function: bound updateOutgoingData],
     _sent100: false,
     _expect_continue: false,
     req: [Circular],
     locals: {},
     [Symbol(outHeadersKey)]: 
      { 'x-powered-by': [Array],
        'cache-control': [Array],
        pragma: [Array],
        expires: [Array],
        vary: [Array] } },
  body: {} }
2018-04-07T19:29:54.230Z - info: Execution took 32 ms, user function completed successfully
2018-04-07T19:30:04.997Z - info: User function triggered, starting execution
2018-04-07T19:30:04.998Z - error: Request has invalid method. GET
2018-04-07T19:30:05.012Z - error: Invalid request IncomingMessage {
  _readableState: 
   ReadableState {
     objectMode: false,
     highWaterMark: 16384,
     buffer: BufferList { head: null, tail: null, length: 0 },
     length: 0,
     pipes: null,
     pipesCount: 0,
     flowing: null,
     ended: false,
     endEmitted: false,
     reading: false,
     sync: true,
     needReadable: false,
     emittedReadable: false,
     readableListening: false,
     resumeScheduled: false,
     destroyed: false,
     defaultEncoding: 'utf8',
     awaitDrain: 0,
     readingMore: true,
     decoder: null,
     encoding: null },
  readable: true,
  domain: null,
  _events: {},
  _eventsCount: 0,
  _maxListeners: undefined,
  socket: 
   Socket {
     connecting: false,
     _hadError: false,
     _handle: 
      TCP {
        reading: true,
        owner: [Circular],
        onread: [Function: onread],
        onconnection: null,
        writeQueueSize: 0,
        _consumed: true },
     _parent: null,
     _host: null,
     _readableState: 
      ReadableState {
        objectMode: false,
        highWaterMark: 16384,
        buffer: [Object],
        length: 0,
        pipes: null,
        pipesCount: 0,
        flowing: true,
        ended: false,
        endEmitted: false,
        reading: true,
        sync: false,
        needReadable: true,
        emittedReadable: false,
        readableListening: false,
        resumeScheduled: false,
        destroyed: false,
        defaultEncoding: 'utf8',
        awaitDrain: 0,
        readingMore: false,
        decoder: null,
        encoding: null },
     readable: true,
     domain: null,
     _events: 
      { end: [Array],
        finish: [Function: onSocketFinish],
        _socketEnd: [Function: onSocketEnd],
        drain: [Array],
        timeout: [Function: socketOnTimeout],
        data: [Function: bound socketOnData],
        error: [Function: socketOnError],
        close: [Array],
        resume: [Function: onSocketResume],
        pause: [Function: onSocketPause] },
     _eventsCount: 10,
     _maxListeners: undefined,
     _writableState: 
      WritableState {
        objectMode: false,
        highWaterMark: 16384,
        finalCalled: false,
        needDrain: false,
        ending: false,
        ended: false,
        finished: false,
        destroyed: false,
        decodeStrings: false,
        defaultEncoding: 'utf8',
        length: 0,
        writing: false,
        corked: 0,
        sync: true,
        bufferProcessing: false,
        onwrite: [Function: bound onwrite],
        writecb: null,
        writelen: 0,
        bufferedRequest: null,
        lastBufferedRequest: null,
        pendingcb: 0,
        prefinished: false,
        errorEmitted: false,
        bufferedRequestCount: 0,
        corkedRequestsFree: [Object] },
     writable: true,
     allowHalfOpen: true,
     _bytesDispatched: 0,
     _sockname: null,
     _pendingData: null,
     _pendingEncoding: '',
     server: 
      Server {
        domain: null,
        _events: [Object],
        _eventsCount: 2,
        _maxListeners: undefined,
        _connections: 1,
        _handle: [Object],
        _usingSlaves: false,
        _slaves: [],
        _unref: false,
        allowHalfOpen: true,
        pauseOnConnect: false,
        httpAllowHalfOpen: false,
        timeout: 120000,
        keepAliveTimeout: 5000,
        _pendingResponseData: 0,
        maxHeadersCount: null,
        _connectionKey: '4:127.0.0.1:0',
        [Symbol(asyncId)]: 9 },
     _server: 
      Server {
        domain: null,
        _events: [Object],
        _eventsCount: 2,
        _maxListeners: undefined,
        _connections: 1,
        _handle: [Object],
        _usingSlaves: false,
        _slaves: [],
        _unref: false,
        allowHalfOpen: true,
        pauseOnConnect: false,
        httpAllowHalfOpen: false,
        timeout: 120000,
        keepAliveTimeout: 5000,
        _pendingResponseData: 0,
        maxHeadersCount: null,
        _connectionKey: '4:127.0.0.1:0',
        [Symbol(asyncId)]: 9 },
     _idleTimeout: 120000,
     _idleNext: 
      TimersList {
        _idleNext: [Circular],
        _idlePrev: [Circular],
        _timer: [Object],
        _unrefed: true,
        msecs: 120000,
        nextTick: false },
     _idlePrev: 
      TimersList {
        _idleNext: [Circular],
        _idlePrev: [Circular],
        _timer: [Object],
        _unrefed: true,
        msecs: 120000,
        nextTick: false },
     _idleStart: 24139,
     _destroyed: false,
     parser: 
      HTTPParser {
        '0': [Function: parserOnHeaders],
        '1': [Function: parserOnHeadersComplete],
        '2': [Function: parserOnBody],
        '3': [Function: parserOnMessageComplete],
        '4': [Function: bound onParserExecute],
        _headers: [],
        _url: '',
        _consumed: true,
        socket: [Circular],
        incoming: [Circular],
        outgoing: null,
        maxHeaderPairs: 2000,
        onIncoming: [Function: bound parserOnIncoming] },
     on: [Function: socketOnWrap],
     _paused: false,
     read: [Function],
     _consuming: true,
     _httpMessage: 
      ServerResponse {
        domain: null,
        _events: [Object],
        _eventsCount: 1,
        _maxListeners: undefined,
        output: [],
        outputEncodings: [],
        outputCallbacks: [],
        outputSize: 0,
        writable: true,
        _last: false,
        upgrading: false,
        chunkedEncoding: false,
        shouldKeepAlive: false,
        useChunkedEncodingByDefault: true,
        sendDate: true,
        _removedConnection: false,
        _removedContLen: false,
        _removedTE: false,
        _contentLength: null,
        _hasBody: true,
        _trailer: '',
        finished: false,
        _headerSent: false,
        socket: [Circular],
        connection: [Circular],
        _header: null,
        _onPendingData: [Function: bound updateOutgoingData],
        _sent100: false,
        _expect_continue: false,
        req: [Circular],
        locals: {},
        [Symbol(outHeadersKey)]: [Object] },
     [Symbol(asyncId)]: 34,
     [Symbol(bytesRead)]: 0,
     [Symbol(asyncId)]: 35,
     [Symbol(triggerAsyncId)]: 9 },
  connection: 
   Socket {
     connecting: false,
     _hadError: false,
     _handle: 
      TCP {
        reading: true,
        owner: [Circular],
        onread: [Function: onread],
        onconnection: null,
        writeQueueSize: 0,
        _consumed: true },
     _parent: null,
     _host: null,
     _readableState: 
      ReadableState {
        objectMode: false,
        highWaterMark: 16384,
        buffer: [Object],
        length: 0,
        pipes: null,
        pipesCount: 0,
        flowing: true,
        ended: false,
        endEmitted: false,
        reading: true,
        sync: false,
        needReadable: true,
        emittedReadable: false,
        readableListening: false,
        resumeScheduled: false,
        destroyed: false,
        defaultEncoding: 'utf8',
        awaitDrain: 0,
        readingMore: false,
        decoder: null,
        encoding: null },
     readable: true,
     domain: null,
     _events: 
      { end: [Array],
        finish: [Function: onSocketFinish],
        _socketEnd: [Function: onSocketEnd],
        drain: [Array],
        timeout: [Function: socketOnTimeout],
        data: [Function: bound socketOnData],
        error: [Function: socketOnError],
        close: [Array],
        resume: [Function: onSocketResume],
        pause: [Function: onSocketPause] },
     _eventsCount: 10,
     _maxListeners: undefined,
     _writableState: 
      WritableState {
        objectMode: false,
        highWaterMark: 16384,
        finalCalled: false,
        needDrain: false,
        ending: false,
        ended: false,
        finished: false,
        destroyed: false,
        decodeStrings: false,
        defaultEncoding: 'utf8',
        length: 0,
        writing: false,
        corked: 0,
        sync: true,
        bufferProcessing: false,
        onwrite: [Function: bound onwrite],
        writecb: null,
        writelen: 0,
        bufferedRequest: null,
        lastBufferedRequest: null,
        pendingcb: 0,
        prefinished: false,
        errorEmitted: false,
        bufferedRequestCount: 0,
        corkedRequestsFree: [Object] },
     writable: true,
     allowHalfOpen: true,
     _bytesDispatched: 0,
     _sockname: null,
     _pendingData: null,
     _pendingEncoding: '',
     server: 
      Server {
        domain: null,
        _events: [Object],
        _eventsCount: 2,
        _maxListeners: undefined,
        _connections: 1,
        _handle: [Object],
        _usingSlaves: false,
        _slaves: [],
        _unref: false,
        allowHalfOpen: true,
        pauseOnConnect: false,
        httpAllowHalfOpen: false,
        timeout: 120000,
        keepAliveTimeout: 5000,
        _pendingResponseData: 0,
        maxHeadersCount: null,
        _connectionKey: '4:127.0.0.1:0',
        [Symbol(asyncId)]: 9 },
     _server: 
      Server {
        domain: null,
        _events: [Object],
        _eventsCount: 2,
        _maxListeners: undefined,
        _connections: 1,
        _handle: [Object],
        _usingSlaves: false,
        _slaves: [],
        _unref: false,
        allowHalfOpen: true,
        pauseOnConnect: false,
        httpAllowHalfOpen: false,
        timeout: 120000,
        keepAliveTimeout: 5000,
        _pendingResponseData: 0,
        maxHeadersCount: null,
        _connectionKey: '4:127.0.0.1:0',
        [Symbol(asyncId)]: 9 },
     _idleTimeout: 120000,
     _idleNext: 
      TimersList {
        _idleNext: [Circular],
        _idlePrev: [Circular],
        _timer: [Object],
        _unrefed: true,
        msecs: 120000,
        nextTick: false },
     _idlePrev: 
      TimersList {
        _idleNext: [Circular],
        _idlePrev: [Circular],
        _timer: [Object],
        _unrefed: true,
        msecs: 120000,
        nextTick: false },
     _idleStart: 24139,
     _destroyed: false,
     parser: 
      HTTPParser {
        '0': [Function: parserOnHeaders],
        '1': [Function: parserOnHeadersComplete],
        '2': [Function: parserOnBody],
        '3': [Function: parserOnMessageComplete],
        '4': [Function: bound onParserExecute],
        _headers: [],
        _url: '',
        _consumed: true,
        socket: [Circular],
        incoming: [Circular],
        outgoing: null,
        maxHeaderPairs: 2000,
        onIncoming: [Function: bound parserOnIncoming] },
     on: [Function: socketOnWrap],
     _paused: false,
     read: [Function],
     _consuming: true,
     _httpMessage: 
      ServerResponse {
        domain: null,
        _events: [Object],
        _eventsCount: 1,
        _maxListeners: undefined,
        output: [],
        outputEncodings: [],
        outputCallbacks: [],
        outputSize: 0,
        writable: true,
        _last: false,
        upgrading: false,
        chunkedEncoding: false,
        shouldKeepAlive: false,
        useChunkedEncodingByDefault: true,
        sendDate: true,
        _removedConnection: false,
        _removedContLen: false,
        _removedTE: false,
        _contentLength: null,
        _hasBody: true,
        _trailer: '',
        finished: false,
        _headerSent: false,
        socket: [Circular],
        connection: [Circular],
        _header: null,
        _onPendingData: [Function: bound updateOutgoingData],
        _sent100: false,
        _expect_continue: false,
        req: [Circular],
        locals: {},
        [Symbol(outHeadersKey)]: [Object] },
     [Symbol(asyncId)]: 34,
     [Symbol(bytesRead)]: 0,
     [Symbol(asyncId)]: 35,
     [Symbol(triggerAsyncId)]: 9 },
  httpVersionMajor: 1,
  httpVersionMinor: 1,
  httpVersion: '1.1',
  complete: false,
  headers: { connection: 'close', host: 'localhost:5000' },
  rawHeaders: [ 'connection', 'close', 'host', 'localhost:5000' ],
  trailers: {},
  rawTrailers: [],
  upgrade: false,
  url: '/?uid=asdf',
  method: 'GET',
  statusCode: null,
  statusMessage: null,
  client: 
   Socket {
     connecting: false,
     _hadError: false,
     _handle: 
      TCP {
        reading: true,
        owner: [Circular],
        onread: [Function: onread],
        onconnection: null,
        writeQueueSize: 0,
        _consumed: true },
     _parent: null,
     _host: null,
     _readableState: 
      ReadableState {
        objectMode: false,
        highWaterMark: 16384,
        buffer: [Object],
        length: 0,
        pipes: null,
        pipesCount: 0,
        flowing: true,
        ended: false,
        endEmitted: false,
        reading: true,
        sync: false,
        needReadable: true,
        emittedReadable: false,
        readableListening: false,
        resumeScheduled: false,
        destroyed: false,
        defaultEncoding: 'utf8',
        awaitDrain: 0,
        readingMore: false,
        decoder: null,
        encoding: null },
     readable: true,
     domain: null,
     _events: 
      { end: [Array],
        finish: [Function: onSocketFinish],
        _socketEnd: [Function: onSocketEnd],
        drain: [Array],
        timeout: [Function: socketOnTimeout],
        data: [Function: bound socketOnData],
        error: [Function: socketOnError],
        close: [Array],
        resume: [Function: onSocketResume],
        pause: [Function: onSocketPause] },
     _eventsCount: 10,
     _maxListeners: undefined,
     _writableState: 
      WritableState {
        objectMode: false,
        highWaterMark: 16384,
        finalCalled: false,
        needDrain: false,
        ending: false,
        ended: false,
        finished: false,
        destroyed: false,
        decodeStrings: false,
        defaultEncoding: 'utf8',
        length: 0,
        writing: false,
        corked: 0,
        sync: true,
        bufferProcessing: false,
        onwrite: [Function: bound onwrite],
        writecb: null,
        writelen: 0,
        bufferedRequest: null,
        lastBufferedRequest: null,
        pendingcb: 0,
        prefinished: false,
        errorEmitted: false,
        bufferedRequestCount: 0,
        corkedRequestsFree: [Object] },
     writable: true,
     allowHalfOpen: true,
     _bytesDispatched: 0,
     _sockname: null,
     _pendingData: null,
     _pendingEncoding: '',
     server: 
      Server {
        domain: null,
        _events: [Object],
        _eventsCount: 2,
        _maxListeners: undefined,
        _connections: 1,
        _handle: [Object],
        _usingSlaves: false,
        _slaves: [],
        _unref: false,
        allowHalfOpen: true,
        pauseOnConnect: false,
        httpAllowHalfOpen: false,
        timeout: 120000,
        keepAliveTimeout: 5000,
        _pendingResponseData: 0,
        maxHeadersCount: null,
        _connectionKey: '4:127.0.0.1:0',
        [Symbol(asyncId)]: 9 },
     _server: 
      Server {
        domain: null,
        _events: [Object],
        _eventsCount: 2,
        _maxListeners: undefined,
        _connections: 1,
        _handle: [Object],
        _usingSlaves: false,
        _slaves: [],
        _unref: false,
        allowHalfOpen: true,
        pauseOnConnect: false,
        httpAllowHalfOpen: false,
        timeout: 120000,
        keepAliveTimeout: 5000,
        _pendingResponseData: 0,
        maxHeadersCount: null,
        _connectionKey: '4:127.0.0.1:0',
        [Symbol(asyncId)]: 9 },
     _idleTimeout: 120000,
     _idleNext: 
      TimersList {
        _idleNext: [Circular],
        _idlePrev: [Circular],
        _timer: [Object],
        _unrefed: true,
        msecs: 120000,
        nextTick: false },
     _idlePrev: 
      TimersList {
        _idleNext: [Circular],
        _idlePrev: [Circular],
        _timer: [Object],
        _unrefed: true,
        msecs: 120000,
        nextTick: false },
     _idleStart: 24139,
     _destroyed: false,
     parser: 
      HTTPParser {
        '0': [Function: parserOnHeaders],
        '1': [Function: parserOnHeadersComplete],
        '2': [Function: parserOnBody],
        '3': [Function: parserOnMessageComplete],
        '4': [Function: bound onParserExecute],
        _headers: [],
        _url: '',
        _consumed: true,
        socket: [Circular],
        incoming: [Circular],
        outgoing: null,
        maxHeaderPairs: 2000,
        onIncoming: [Function: bound parserOnIncoming] },
     on: [Function: socketOnWrap],
     _paused: false,
     read: [Function],
     _consuming: true,
     _httpMessage: 
      ServerResponse {
        domain: null,
        _events: [Object],
        _eventsCount: 1,
        _maxListeners: undefined,
        output: [],
        outputEncodings: [],
        outputCallbacks: [],
        outputSize: 0,
        writable: true,
        _last: false,
        upgrading: false,
        chunkedEncoding: false,
        shouldKeepAlive: false,
        useChunkedEncodingByDefault: true,
        sendDate: true,
        _removedConnection: false,
        _removedContLen: false,
        _removedTE: false,
        _contentLength: null,
        _hasBody: true,
        _trailer: '',
        finished: false,
        _headerSent: false,
        socket: [Circular],
        connection: [Circular],
        _header: null,
        _onPendingData: [Function: bound updateOutgoingData],
        _sent100: false,
        _expect_continue: false,
        req: [Circular],
        locals: {},
        [Symbol(outHeadersKey)]: [Object] },
     [Symbol(asyncId)]: 34,
     [Symbol(bytesRead)]: 0,
     [Symbol(asyncId)]: 35,
     [Symbol(triggerAsyncId)]: 9 },
  _consuming: false,
  _dumped: false,
  next: [Function: next],
  baseUrl: '',
  originalUrl: '/?uid=asdf',
  _parsedUrl: 
   Url {
     protocol: null,
     slashes: null,
     auth: null,
     host: null,
     port: null,
     hostname: null,
     hash: null,
     search: '?uid=asdf',
     query: 'uid=asdf',
     pathname: '/',
     path: '/?uid=asdf',
     href: '/?uid=asdf',
     _raw: '/?uid=asdf' },
  params: {},
  query: { uid: 'asdf' },
  res: 
   ServerResponse {
     domain: null,
     _events: { finish: [Array] },
     _eventsCount: 1,
     _maxListeners: undefined,
     output: [],
     outputEncodings: [],
     outputCallbacks: [],
     outputSize: 0,
     writable: true,
     _last: false,
     upgrading: false,
     chunkedEncoding: false,
     shouldKeepAlive: false,
     useChunkedEncodingByDefault: true,
     sendDate: true,
     _removedConnection: false,
     _removedContLen: false,
     _removedTE: false,
     _contentLength: null,
     _hasBody: true,
     _trailer: '',
     finished: false,
     _headerSent: false,
     socket: 
      Socket {
        connecting: false,
        _hadError: false,
        _handle: [Object],
        _parent: null,
        _host: null,
        _readableState: [Object],
        readable: true,
        domain: null,
        _events: [Object],
        _eventsCount: 10,
        _maxListeners: undefined,
        _writableState: [Object],
        writable: true,
        allowHalfOpen: true,
        _bytesDispatched: 0,
        _sockname: null,
        _pendingData: null,
        _pendingEncoding: '',
        server: [Object],
        _server: [Object],
        _idleTimeout: 120000,
        _idleNext: [Object],
        _idlePrev: [Object],
        _idleStart: 24139,
        _destroyed: false,
        parser: [Object],
        on: [Function: socketOnWrap],
        _paused: false,
        read: [Function],
        _consuming: true,
        _httpMessage: [Circular],
        [Symbol(asyncId)]: 34,
        [Symbol(bytesRead)]: 0,
        [Symbol(asyncId)]: 35,
        [Symbol(triggerAsyncId)]: 9 },
     connection: 
      Socket {
        connecting: false,
        _hadError: false,
        _handle: [Object],
        _parent: null,
        _host: null,
        _readableState: [Object],
        readable: true,
        domain: null,
        _events: [Object],
        _eventsCount: 10,
        _maxListeners: undefined,
        _writableState: [Object],
        writable: true,
        allowHalfOpen: true,
        _bytesDispatched: 0,
        _sockname: null,
        _pendingData: null,
        _pendingEncoding: '',
        server: [Object],
        _server: [Object],
        _idleTimeout: 120000,
        _idleNext: [Object],
        _idlePrev: [Object],
        _idleStart: 24139,
        _destroyed: false,
        parser: [Object],
        on: [Function: socketOnWrap],
        _paused: false,
        read: [Function],
        _consuming: true,
        _httpMessage: [Circular],
        [Symbol(asyncId)]: 34,
        [Symbol(bytesRead)]: 0,
        [Symbol(asyncId)]: 35,
        [Symbol(triggerAsyncId)]: 9 },
     _header: null,
     _onPendingData: [Function: bound updateOutgoingData],
     _sent100: false,
     _expect_continue: false,
     req: [Circular],
     locals: {},
     [Symbol(outHeadersKey)]: 
      { 'x-powered-by': [Array],
        'cache-control': [Array],
        pragma: [Array],
        expires: [Array],
        vary: [Array] } },
  body: {} }
2018-04-07T19:30:05.014Z - info: Execution took 16 ms, user function completed successfully
2018-04-07T19:30:18.313Z - info: User function triggered, starting execution
2018-04-07T19:30:21.180Z - info: []
2018-04-07T19:30:34.444Z - info: User function triggered, starting execution
2018-04-07T19:30:34.772Z - info: [ 'S9cIFvYv1ifgbmEJlI8wTi8Z7Cz2' ]
2018-04-07T19:31:18.343Z - info: Execution took 60043 ms, finished with status: 'timeout'
2018-04-07T19:31:18.347Z - info: Execution took 43906 ms, finished with status: 'crash'
2018-04-07T19:32:25.651Z - info: User function triggered, starting execution
2018-04-07T19:32:27.921Z - info: [ 'S9cIFvYv1ifgbmEJlI8wTi8Z7Cz2' ]
2018-04-07T19:33:25.675Z - info: Execution took 60635 ms, finished with status: 'timeout'
2018-04-07T19:33:25.679Z - info: Execution took 60639 ms, finished with status: 'crash'
2018-04-07T19:33:25.680Z - error: Something went wrong with the function!
2018-04-07T19:33:25.680Z - error:  Error: Can't set headers after they are sent.
    at validateHeader (_http_outgoing.js:494:11)
    at ServerResponse.setHeader (_http_outgoing.js:501:3)
    at ServerResponse.header (/usr/lib/node_modules/firebase-tools/node_modules/express/lib/response.js:767:10)
    at ServerResponse.send (/usr/lib/node_modules/firebase-tools/node_modules/express/lib/response.js:170:12)
    at ServerResponse.json (/usr/lib/node_modules/firebase-tools/node_modules/express/lib/response.js:267:15)
    at ProxyServer.Supervisor._proxy.on (/usr/lib/node_modules/firebase-tools/node_modules/@google-cloud/functions-emulator/src/supervisor/supervisor.js:107:14)
    at ProxyServer.emit (/usr/lib/node_modules/firebase-tools/node_modules/eventemitter3/index.js:144:27)
    at ClientRequest.proxyError (/usr/lib/node_modules/firebase-tools/node_modules/http-proxy/lib/http-proxy/passes/web-incoming.js:156:18)
    at emitOne (events.js:116:13)
    at ClientRequest.emit (events.js:211:7)
2018-04-07T19:34:17.640Z - info: User function triggered, starting execution
2018-04-07T19:34:20.187Z - info: [ 'S9cIFvYv1ifgbmEJlI8wTi8Z7Cz2' ]
2018-04-07T19:35:17.671Z - info: Execution took 60645 ms, finished with status: 'timeout'
2018-04-07T19:35:17.675Z - info: Execution took 60649 ms, finished with status: 'crash'
2018-04-07T19:35:17.675Z - error: Something went wrong with the function!
2018-04-07T19:35:17.676Z - error:  Error: Can't set headers after they are sent.
    at validateHeader (_http_outgoing.js:494:11)
    at ServerResponse.setHeader (_http_outgoing.js:501:3)
    at ServerResponse.header (/usr/lib/node_modules/firebase-tools/node_modules/express/lib/response.js:767:10)
    at ServerResponse.send (/usr/lib/node_modules/firebase-tools/node_modules/express/lib/response.js:170:12)
    at ServerResponse.json (/usr/lib/node_modules/firebase-tools/node_modules/express/lib/response.js:267:15)
    at ProxyServer.Supervisor._proxy.on (/usr/lib/node_modules/firebase-tools/node_modules/@google-cloud/functions-emulator/src/supervisor/supervisor.js:107:14)
    at ProxyServer.emit (/usr/lib/node_modules/firebase-tools/node_modules/eventemitter3/index.js:144:27)
    at ClientRequest.proxyError (/usr/lib/node_modules/firebase-tools/node_modules/http-proxy/lib/http-proxy/passes/web-incoming.js:156:18)
    at emitOne (events.js:116:13)
    at ClientRequest.emit (events.js:211:7)
2018-04-07T19:36:36.590Z - info: Worker for getChatList closed due to file changes.
2018-04-07T19:36:36.590Z - info: Worker for test closed due to file changes.
2018-04-07T19:36:50.406Z - info: User function triggered, starting execution
2018-04-07T19:36:53.188Z - info: [ 'S9cIFvYv1ifgbmEJlI8wTi8Z7Cz2' ]
2018-04-07T19:37:09.965Z - info: User function triggered, starting execution
2018-04-07T19:37:10.291Z - info: [ 'S9cIFvYv1ifgbmEJlI8wTi8Z7Cz2' ]
2018-04-07T19:37:50.403Z - info: Execution took 60609 ms, finished with status: 'timeout'
2018-04-07T19:37:50.407Z - info: Execution took 40446 ms, finished with status: 'crash'
2018-04-07T19:38:34.908Z - info: User function triggered, starting execution
2018-04-07T19:39:34.900Z - info: Execution took 60603 ms, finished with status: 'timeout'
2018-04-07T19:39:34.904Z - info: Execution took 60607 ms, finished with status: 'crash'
2018-04-07T19:39:34.905Z - error: Something went wrong with the function!
2018-04-07T19:39:34.905Z - error:  Error: Can't set headers after they are sent.
    at validateHeader (_http_outgoing.js:494:11)
    at ServerResponse.setHeader (_http_outgoing.js:501:3)
    at ServerResponse.header (/usr/lib/node_modules/firebase-tools/node_modules/express/lib/response.js:767:10)
    at ServerResponse.send (/usr/lib/node_modules/firebase-tools/node_modules/express/lib/response.js:170:12)
    at ServerResponse.json (/usr/lib/node_modules/firebase-tools/node_modules/express/lib/response.js:267:15)
    at ProxyServer.Supervisor._proxy.on (/usr/lib/node_modules/firebase-tools/node_modules/@google-cloud/functions-emulator/src/supervisor/supervisor.js:107:14)
    at ProxyServer.emit (/usr/lib/node_modules/firebase-tools/node_modules/eventemitter3/index.js:144:27)
    at ClientRequest.proxyError (/usr/lib/node_modules/firebase-tools/node_modules/http-proxy/lib/http-proxy/passes/web-incoming.js:156:18)
    at emitOne (events.js:116:13)
    at ClientRequest.emit (events.js:211:7)
2018-04-07T19:41:06.403Z - info: User function triggered, starting execution
2018-04-07T19:42:06.398Z - info: Execution took 60606 ms, finished with status: 'timeout'
2018-04-07T19:42:06.402Z - info: Execution took 60610 ms, finished with status: 'crash'
2018-04-07T19:42:06.403Z - error: Something went wrong with the function!
2018-04-07T19:42:06.403Z - error:  Error: Can't set headers after they are sent.
    at validateHeader (_http_outgoing.js:494:11)
    at ServerResponse.setHeader (_http_outgoing.js:501:3)
    at ServerResponse.header (/usr/lib/node_modules/firebase-tools/node_modules/express/lib/response.js:767:10)
    at ServerResponse.send (/usr/lib/node_modules/firebase-tools/node_modules/express/lib/response.js:170:12)
    at ServerResponse.json (/usr/lib/node_modules/firebase-tools/node_modules/express/lib/response.js:267:15)
    at ProxyServer.Supervisor._proxy.on (/usr/lib/node_modules/firebase-tools/node_modules/@google-cloud/functions-emulator/src/supervisor/supervisor.js:107:14)
    at ProxyServer.emit (/usr/lib/node_modules/firebase-tools/node_modules/eventemitter3/index.js:144:27)
    at ClientRequest.proxyError (/usr/lib/node_modules/firebase-tools/node_modules/http-proxy/lib/http-proxy/passes/web-incoming.js:156:18)
    at emitOne (events.js:116:13)
    at ClientRequest.emit (events.js:211:7)
2018-04-07T19:43:15.268Z - info: User function triggered, starting execution
2018-04-07T19:44:15.296Z - info: Execution took 60640 ms, finished with status: 'timeout'
2018-04-07T19:46:04.602Z - info: User function triggered, starting execution
2018-04-07T19:46:08.298Z - info: [ 'S9cIFvYv1ifgbmEJlI8wTi8Z7Cz2' ]
2018-04-07T19:46:09.466Z - info: Execution took 4864 ms, user function completed successfully
2018-04-07T19:46:32.676Z - info: User function triggered, starting execution
2018-04-07T19:46:32.993Z - info: [ 'S9cIFvYv1ifgbmEJlI8wTi8Z7Cz2' ]
2018-04-07T19:46:34.555Z - info: Execution took 1879 ms, user function completed successfully
2018-04-07T19:48:01.442Z - info: User function triggered, starting execution
2018-04-07T19:48:01.753Z - info: [ 'S9cIFvYv1ifgbmEJlI8wTi8Z7Cz2' ]
2018-04-07T19:48:02.323Z - info: Execution took 881 ms, user function completed successfully
2018-04-07T19:51:59.824Z - info: User function triggered, starting execution
2018-04-07T19:52:00.631Z - info: [ 'S9cIFvYv1ifgbmEJlI8wTi8Z7Cz2' ]
2018-04-07T19:52:01.608Z - info: Execution took 1783 ms, user function completed successfully
2018-04-07T19:52:31.773Z - info: User function triggered, starting execution
2018-04-07T19:52:32.311Z - info: [ 'S9cIFvYv1ifgbmEJlI8wTi8Z7Cz2' ]
2018-04-07T19:52:32.827Z - info: Execution took 1055 ms, user function completed successfully
2018-04-07T19:53:49.985Z - info: User function triggered, starting execution
2018-04-07T19:53:50.277Z - info: [ 'S9cIFvYv1ifgbmEJlI8wTi8Z7Cz2' ]
2018-04-07T19:53:50.732Z - info: Execution took 746 ms, user function completed successfully
2018-04-07T19:54:10.058Z - info: User function triggered, starting execution
2018-04-07T19:54:10.360Z - info: [ '2mZfdVQdOHXVAaaXRPSFV6n6Bwo2' ]
2018-04-07T19:54:10.915Z - info: Execution took 857 ms, user function completed successfully
2018-04-07T19:55:43.930Z - info: User function triggered, starting execution
2018-04-07T19:55:44.244Z - info: [ '2mZfdVQdOHXVAaaXRPSFV6n6Bwo2' ]
2018-04-07T19:55:44.730Z - info: Execution took 800 ms, user function completed successfully
2018-04-07T19:56:02.944Z - info: User function triggered, starting execution
2018-04-07T19:56:03.237Z - info: [ '2mZfdVQdOHXVAaaXRPSFV6n6Bwo2' ]
2018-04-07T19:56:03.707Z - info: Execution took 763 ms, user function completed successfully
2018-04-07T19:57:30.356Z - info: User function triggered, starting execution
2018-04-07T19:57:30.658Z - info: [ '2mZfdVQdOHXVAaaXRPSFV6n6Bwo2' ]
2018-04-07T19:57:31.270Z - info: Execution took 914 ms, user function completed successfully
2018-04-07T19:59:13.950Z - info: User function triggered, starting execution
2018-04-07T19:59:14.245Z - info: [ '2mZfdVQdOHXVAaaXRPSFV6n6Bwo2' ]
2018-04-07T19:59:15.301Z - info: Execution took 1351 ms, user function completed successfully
2018-04-07T19:59:30.922Z - info: User function triggered, starting execution
2018-04-07T19:59:31.308Z - info: [ '2mZfdVQdOHXVAaaXRPSFV6n6Bwo2' ]
2018-04-07T19:59:31.782Z - info: Execution took 861 ms, user function completed successfully
2018-04-07T20:00:51.487Z - info: User function triggered, starting execution
2018-04-07T20:00:51.910Z - info: [ '2mZfdVQdOHXVAaaXRPSFV6n6Bwo2' ]
2018-04-07T20:00:52.420Z - info: Execution took 933 ms, user function completed successfully
2018-04-07T20:01:06.172Z - info: User function triggered, starting execution
2018-04-07T20:01:06.499Z - info: [ '2mZfdVQdOHXVAaaXRPSFV6n6Bwo2' ]
2018-04-07T20:01:06.972Z - info: Execution took 800 ms, user function completed successfully
2018-04-07T20:01:22.494Z - info: User function triggered, starting execution
2018-04-07T20:01:22.809Z - info: [ '2mZfdVQdOHXVAaaXRPSFV6n6Bwo2' ]
2018-04-07T20:01:23.330Z - info: Execution took 836 ms, user function completed successfully
2018-04-07T20:04:06.007Z - info: User function triggered, starting execution
2018-04-07T20:04:06.507Z - info: [ '2mZfdVQdOHXVAaaXRPSFV6n6Bwo2' ]
2018-04-07T20:04:07.476Z - info: Execution took 1470 ms, user function completed successfully
2018-04-08T06:35:13.878Z - info: User function triggered, starting execution
2018-04-08T06:35:13.897Z - info: Execution took 20 ms, user function completed successfully
2018-04-08T06:35:21.187Z - info: User function triggered, starting execution
2018-04-08T06:36:09.436Z - info: { '2mZfdVQdOHXVAaaXRPSFV6n6Bwo2': 
   { location: { latitude: 12.749945199999999, longitude: 80.19955279999999 },
     skillset: [ 'C#', 'AI' ] },
  S9cIFvYv1ifgbmEJlI8wTi8Z7Cz2: 
   { chat: '2mZfdVQdOHXVAaaXRPSFV6n6Bwo2',
     location: { latitude: 12.749945199999999, longitude: 80.19955279999999 },
     skillset: [ 'Haskell', 'AI', 'AI', 'Aerobics' ] } }
2018-04-08T06:36:09.440Z - error: [2018-04-08T06:36:09.439Z]  @firebase/database: FIREBASE WARNING: Exception was thrown by user callback. TypeError: Cannot read property 'includes' of undefined
    at Object.keys.filter.x (/home/akash/Documents/pro/juspay/metutu-server/functions/index.js:45:71)
    at Array.filter (<anonymous>)
    at admin.database.ref.once.snapshot (/home/akash/Documents/pro/juspay/metutu-server/functions/index.js:45:48)
    at onceCallback (/home/akash/Documents/pro/juspay/metutu-server/functions/node_modules/@firebase/database/dist/cjs/src/api/Query.js:244:51)
    at /home/akash/Documents/pro/juspay/metutu-server/functions/node_modules/@firebase/database/dist/cjs/src/core/view/EventRegistration.js:65:22
    at Object.exports.exceptionGuard (/home/akash/Documents/pro/juspay/metutu-server/functions/node_modules/@firebase/database/dist/cjs/src/core/util/util.js:536:9)
    at EventList.raise (/home/akash/Documents/pro/juspay/metutu-server/functions/node_modules/@firebase/database/dist/cjs/src/core/view/EventQueue.js:158:24)
    at EventQueue.raiseQueuedEventsMatchingPredicate_ (/home/akash/Documents/pro/juspay/metutu-server/functions/node_modules/@firebase/database/dist/cjs/src/core/view/EventQueue.js:111:41)
    at EventQueue.raiseEventsForChangedPath (/home/akash/Documents/pro/juspay/metutu-server/functions/node_modules/@firebase/database/dist/cjs/src/core/view/EventQueue.js:95:14)
    at Repo.onDataUpdate_ (/home/akash/Documents/pro/juspay/metutu-server/functions/node_modules/@firebase/database/dist/cjs/src/core/Repo.js:200:26) 
2018-04-08T06:36:09.441Z - error: /home/akash/Documents/pro/juspay/metutu-server/functions/node_modules/@firebase/database/dist/cjs/src/core/util/util.js:547
            throw e;
            ^

TypeError: Cannot read property 'includes' of undefined
    at Object.keys.filter.x (/home/akash/Documents/pro/juspay/metutu-server/functions/index.js:45:71)
    at Array.filter (<anonymous>)
    at admin.database.ref.once.snapshot (/home/akash/Documents/pro/juspay/metutu-server/functions/index.js:45:48)
    at onceCallback (/home/akash/Documents/pro/juspay/metutu-server/functions/node_modules/@firebase/database/dist/cjs/src/api/Query.js:244:51)
    at /home/akash/Documents/pro/juspay/metutu-server/functions/node_modules/@firebase/database/dist/cjs/src/core/view/EventRegistration.js:65:22
    at Object.exports.exceptionGuard (/home/akash/Documents/pro/juspay/metutu-server/functions/node_modules/@firebase/database/dist/cjs/src/core/util/util.js:536:9)
    at EventList.raise (/home/akash/Documents/pro/juspay/metutu-server/functions/node_modules/@firebase/database/dist/cjs/src/core/view/EventQueue.js:158:24)
    at EventQueue.raiseQueuedEventsMatchingPredicate_ (/home/akash/Documents/pro/juspay/metutu-server/functions/node_modules/@firebase/database/dist/cjs/src/core/view/EventQueue.js:111:41)
    at EventQueue.raiseEventsForChangedPath (/home/akash/Documents/pro/juspay/metutu-server/functions/node_modules/@firebase/database/dist/cjs/src/core/view/EventQueue.js:95:14)
    at Repo.onDataUpdate_ (/home/akash/Documents/pro/juspay/metutu-server/functions/node_modules/@firebase/database/dist/cjs/src/core/Repo.js:200:26)
2018-04-08T06:36:09.458Z - info: Execution took 48276 ms, finished with status: 'crash'
2018-04-08T06:36:14.036Z - error: Function worker crashed with exit code: 1
2018-04-08T06:37:13.349Z - info: User function triggered, starting execution
2018-04-08T06:37:15.746Z - info: { '2mZfdVQdOHXVAaaXRPSFV6n6Bwo2': 
   { location: { latitude: 12.749945199999999, longitude: 80.19955279999999 },
     skillset: [ 'C#', 'AI' ] },
  S9cIFvYv1ifgbmEJlI8wTi8Z7Cz2: 
   { chat: '2mZfdVQdOHXVAaaXRPSFV6n6Bwo2',
     location: { latitude: 12.749945199999999, longitude: 80.19955279999999 },
     skillset: [ 'Haskell', 'AI', 'AI', 'Aerobics' ] } }
2018-04-08T06:37:15.749Z - error: [2018-04-08T06:37:15.748Z]  @firebase/database: FIREBASE WARNING: Exception was thrown by user callback. TypeError: Cannot read property 'includes' of undefined
    at Object.keys.filter.x (/home/akash/Documents/pro/juspay/metutu-server/functions/index.js:46:71)
    at Array.filter (<anonymous>)
    at admin.database.ref.once.snapshot (/home/akash/Documents/pro/juspay/metutu-server/functions/index.js:46:48)
    at onceCallback (/home/akash/Documents/pro/juspay/metutu-server/functions/node_modules/@firebase/database/dist/cjs/src/api/Query.js:244:51)
    at /home/akash/Documents/pro/juspay/metutu-server/functions/node_modules/@firebase/database/dist/cjs/src/core/view/EventRegistration.js:65:22
    at Object.exports.exceptionGuard (/home/akash/Documents/pro/juspay/metutu-server/functions/node_modules/@firebase/database/dist/cjs/src/core/util/util.js:536:9)
    at EventList.raise (/home/akash/Documents/pro/juspay/metutu-server/functions/node_modules/@firebase/database/dist/cjs/src/core/view/EventQueue.js:158:24)
    at EventQueue.raiseQueuedEventsMatchingPredicate_ (/home/akash/Documents/pro/juspay/metutu-server/functions/node_modules/@firebase/database/dist/cjs/src/core/view/EventQueue.js:111:41)
    at EventQueue.raiseEventsForChangedPath (/home/akash/Documents/pro/juspay/metutu-server/functions/node_modules/@firebase/database/dist/cjs/src/core/view/EventQueue.js:95:14)
    at Repo.onDataUpdate_ (/home/akash/Documents/pro/juspay/metutu-server/functions/node_modules/@firebase/database/dist/cjs/src/core/Repo.js:200:26) 
/home/akash/Documents/pro/juspay/metutu-server/functions/node_modules/@firebase/database/dist/cjs/src/core/util/util.js:547
            throw e;
            ^

TypeError: Cannot read property 'includes' of undefined
    at Object.keys.filter.x (/home/akash/Documents/pro/juspay/metutu-server/functions/index.js:46:71)
    at Array.filter (<anonymous>)
    at admin.database.ref.once.snapshot (/home/akash/Documents/pro/juspay/metutu-server/functions/index.js:46:48)
    at onceCallback (/home/akash/Documents/pro/juspay/metutu-server/functions/node_modules/@firebase/database/dist/cjs/src/api/Query.js:244:51)
    at /home/akash/Documents/pro/juspay/metutu-server/functions/node_modules/@firebase/database/dist/cjs/src/core/view/EventRegistration.js:65:22
    at Object.exports.exceptionGuard (/home/akash/Documents/pro/juspay/metutu-server/functions/node_modules/@firebase/database/dist/cjs/src/core/util/util.js:536:9)
    at EventList.raise (/home/akash/Documents/pro/juspay/metutu-server/functions/node_modules/@firebase/database/dist/cjs/src/core/view/EventQueue.js:158:24)
    at EventQueue.raiseQueuedEventsMatchingPredicate_ (/home/akash/Documents/pro/juspay/metutu-server/functions/node_modules/@firebase/database/dist/cjs/src/core/view/EventQueue.js:111:41)
    at EventQueue.raiseEventsForChangedPath (/home/akash/Documents/pro/juspay/metutu-server/functions/node_modules/@firebase/database/dist/cjs/src/core/view/EventQueue.js:95:14)
    at Repo.onDataUpdate_ (/home/akash/Documents/pro/juspay/metutu-server/functions/node_modules/@firebase/database/dist/cjs/src/core/Repo.js:200:26)
2018-04-08T06:37:15.754Z - info: Execution took 4019 ms, finished with status: 'crash'
2018-04-08T06:37:15.835Z - error: Function worker crashed with exit code: 1
2018-04-08T06:38:17.448Z - info: User function triggered, starting execution
2018-04-08T06:38:19.983Z - info: { '2mZfdVQdOHXVAaaXRPSFV6n6Bwo2': 
   { location: { latitude: 12.749945199999999, longitude: 80.19955279999999 },
     skillset: [ 'C#', 'AI' ] },
  S9cIFvYv1ifgbmEJlI8wTi8Z7Cz2: 
   { chat: '2mZfdVQdOHXVAaaXRPSFV6n6Bwo2',
     location: { latitude: 12.749945199999999, longitude: 80.19955279999999 },
     skillset: [ 'Haskell', 'AI', 'AI', 'Aerobics' ] } }
2018-04-08T06:38:19.987Z - error: (node:5464) UnhandledPromiseRejectionWarning: Unhandled promise rejection (rejection id: 1): ReferenceError: value is not defined
2018-04-08T06:38:19.987Z - error: (node:5464) [DEP0018] DeprecationWarning: Unhandled promise rejections are deprecated. In the future, promise rejections that are not handled will terminate the Node.js process with a non-zero exit code.
2018-04-08T06:39:17.440Z - info: Execution took 61008 ms, finished with status: 'timeout'
2018-04-08T06:39:17.444Z - info: Execution took 61012 ms, finished with status: 'crash'
2018-04-08T06:39:17.445Z - error: Something went wrong with the function!
2018-04-08T06:39:17.445Z - error:  Error: Can't set headers after they are sent.
    at validateHeader (_http_outgoing.js:494:11)
    at ServerResponse.setHeader (_http_outgoing.js:501:3)
    at ServerResponse.header (/usr/lib/node_modules/firebase-tools/node_modules/express/lib/response.js:767:10)
    at ServerResponse.send (/usr/lib/node_modules/firebase-tools/node_modules/express/lib/response.js:170:12)
    at ServerResponse.json (/usr/lib/node_modules/firebase-tools/node_modules/express/lib/response.js:267:15)
    at ProxyServer.Supervisor._proxy.on (/usr/lib/node_modules/firebase-tools/node_modules/@google-cloud/functions-emulator/src/supervisor/supervisor.js:107:14)
    at ProxyServer.emit (/usr/lib/node_modules/firebase-tools/node_modules/eventemitter3/index.js:144:27)
    at ClientRequest.proxyError (/usr/lib/node_modules/firebase-tools/node_modules/http-proxy/lib/http-proxy/passes/web-incoming.js:156:18)
    at emitOne (events.js:116:13)
    at ClientRequest.emit (events.js:211:7)
2018-04-08T06:39:17.507Z - error: Function worker killed by signal: SIGTERM
2018-04-08T06:39:41.819Z - info: User function triggered, starting execution
2018-04-08T06:39:44.026Z - info: { '2mZfdVQdOHXVAaaXRPSFV6n6Bwo2': 
   { location: { latitude: 12.749945199999999, longitude: 80.19955279999999 },
     skillset: [ 'C#', 'AI' ] },
  S9cIFvYv1ifgbmEJlI8wTi8Z7Cz2: 
   { chat: '2mZfdVQdOHXVAaaXRPSFV6n6Bwo2',
     location: { latitude: 12.749945199999999, longitude: 80.19955279999999 },
     skillset: [ 'Haskell', 'AI', 'AI', 'Aerobics' ] } }
2018-04-08T06:40:41.822Z - info: Execution took 61018 ms, finished with status: 'timeout'
2018-04-08T06:40:41.825Z - info: Execution took 61021 ms, finished with status: 'crash'
2018-04-08T06:40:41.825Z - error: Something went wrong with the function!
2018-04-08T06:40:41.826Z - error:  Error: Can't set headers after they are sent.
    at validateHeader (_http_outgoing.js:494:11)
    at ServerResponse.setHeader (_http_outgoing.js:501:3)
    at ServerResponse.header (/usr/lib/node_modules/firebase-tools/node_modules/express/lib/response.js:767:10)
    at ServerResponse.send (/usr/lib/node_modules/firebase-tools/node_modules/express/lib/response.js:170:12)
    at ServerResponse.json (/usr/lib/node_modules/firebase-tools/node_modules/express/lib/response.js:267:15)
    at ProxyServer.Supervisor._proxy.on (/usr/lib/node_modules/firebase-tools/node_modules/@google-cloud/functions-emulator/src/supervisor/supervisor.js:107:14)
    at ProxyServer.emit (/usr/lib/node_modules/firebase-tools/node_modules/eventemitter3/index.js:144:27)
    at ClientRequest.proxyError (/usr/lib/node_modules/firebase-tools/node_modules/http-proxy/lib/http-proxy/passes/web-incoming.js:156:18)
    at emitOne (events.js:116:13)
    at ClientRequest.emit (events.js:211:7)
2018-04-08T06:41:07.457Z - info: User function triggered, starting execution
2018-04-08T06:41:16.069Z - info: { '2mZfdVQdOHXVAaaXRPSFV6n6Bwo2': 
   { location: { latitude: 12.749945199999999, longitude: 80.19955279999999 },
     skillset: [ 'C#', 'AI' ] },
  S9cIFvYv1ifgbmEJlI8wTi8Z7Cz2: 
   { chat: '2mZfdVQdOHXVAaaXRPSFV6n6Bwo2',
     location: { latitude: 12.749945199999999, longitude: 80.19955279999999 },
     skillset: [ 'Haskell', 'AI', 'AI', 'Aerobics' ] } }
2018-04-08T06:41:16.075Z - info: Execution took 8619 ms, user function completed successfully
2018-04-08T06:43:14.071Z - info: User function triggered, starting execution
2018-04-08T06:43:23.486Z - info: { '2mZfdVQdOHXVAaaXRPSFV6n6Bwo2': 
   { location: { latitude: 12.749945199999999, longitude: 80.19955279999999 },
     skillset: [ 'C#', 'AI' ] },
  S9cIFvYv1ifgbmEJlI8wTi8Z7Cz2: 
   { chat: '2mZfdVQdOHXVAaaXRPSFV6n6Bwo2',
     location: { latitude: 12.749945199999999, longitude: 80.19955279999999 },
     skillset: [ 'Haskell', 'AI', 'AI', 'Aerobics' ] } }
2018-04-08T06:43:23.490Z - info: Execution took 9420 ms, user function completed successfully
2018-04-08T06:44:12.560Z - info: User function triggered, starting execution
2018-04-08T06:44:12.564Z - info: undefined undefined undefined '500,skill=AI,lat=12,lng=80'
2018-04-08T06:44:15.238Z - info: { '2mZfdVQdOHXVAaaXRPSFV6n6Bwo2': 
   { location: { latitude: 12.749945199999999, longitude: 80.19955279999999 },
     skillset: [ 'C#', 'AI' ] },
  S9cIFvYv1ifgbmEJlI8wTi8Z7Cz2: 
   { chat: '2mZfdVQdOHXVAaaXRPSFV6n6Bwo2',
     location: { latitude: 12.749945199999999, longitude: 80.19955279999999 },
     skillset: [ 'Haskell', 'AI', 'AI', 'Aerobics' ] } }
2018-04-08T06:44:15.242Z - info: Execution took 2684 ms, user function completed successfully
2018-04-08T06:44:32.113Z - info: User function triggered, starting execution
2018-04-08T06:44:32.113Z - info: undefined '80' 'AI' '500'
2018-04-08T06:44:32.753Z - info: { '2mZfdVQdOHXVAaaXRPSFV6n6Bwo2': 
   { location: { latitude: 12.749945199999999, longitude: 80.19955279999999 },
     skillset: [ 'C#', 'AI' ] },
  S9cIFvYv1ifgbmEJlI8wTi8Z7Cz2: 
   { chat: '2mZfdVQdOHXVAaaXRPSFV6n6Bwo2',
     location: { latitude: 12.749945199999999, longitude: 80.19955279999999 },
     skillset: [ 'Haskell', 'AI', 'AI', 'Aerobics' ] } }
2018-04-08T06:44:33.394Z - error: (node:6014) UnhandledPromiseRejectionWarning: Unhandled promise rejection (rejection id: 1): Error: There is no user record corresponding to the provided identifier.
2018-04-08T06:44:33.394Z - error: (node:6014) [DEP0018] DeprecationWarning: Unhandled promise rejections are deprecated. In the future, promise rejections that are not handled will terminate the Node.js process with a non-zero exit code.
2018-04-08T06:45:11.917Z - info: User function triggered, starting execution
2018-04-08T06:45:11.917Z - info: 12 80 AI 500
2018-04-08T06:45:12.433Z - info: { '2mZfdVQdOHXVAaaXRPSFV6n6Bwo2': 
   { location: { latitude: 12.749945199999999, longitude: 80.19955279999999 },
     skillset: [ 'C#', 'AI' ] },
  S9cIFvYv1ifgbmEJlI8wTi8Z7Cz2: 
   { chat: '2mZfdVQdOHXVAaaXRPSFV6n6Bwo2',
     location: { latitude: 12.749945199999999, longitude: 80.19955279999999 },
     skillset: [ 'Haskell', 'AI', 'AI', 'Aerobics' ] } }
2018-04-08T06:45:14.129Z - error: (node:6014) UnhandledPromiseRejectionWarning: Unhandled promise rejection (rejection id: 2): Error: There is no user record corresponding to the provided identifier.
2018-04-08T06:45:32.113Z - info: Execution took 60004 ms, finished with status: 'timeout'
2018-04-08T06:45:32.120Z - info: Execution took 20206 ms, finished with status: 'crash'
2018-04-08T06:45:40.809Z - error: Function worker killed by signal: SIGTERM
2018-04-08T06:46:30.814Z - info: User function triggered, starting execution
2018-04-08T06:46:30.818Z - info: 12 80 AI 500
2018-04-08T06:46:33.000Z - info: { '2mZfdVQdOHXVAaaXRPSFV6n6Bwo2': 
   { location: { latitude: 12.749945199999999, longitude: 80.19955279999999 },
     skillset: [ 'C#', 'AI' ] },
  S9cIFvYv1ifgbmEJlI8wTi8Z7Cz2: 
   { chat: '2mZfdVQdOHXVAaaXRPSFV6n6Bwo2',
     location: { latitude: 12.749945199999999, longitude: 80.19955279999999 },
     skillset: [ 'Haskell', 'AI', 'AI', 'Aerobics' ] } }
2018-04-08T06:46:33.000Z - info: fitllere [ '2mZfdVQdOHXVAaaXRPSFV6n6Bwo2',
  'S9cIFvYv1ifgbmEJlI8wTi8Z7Cz2' ]
2018-04-08T06:46:33.554Z - error: (node:6273) UnhandledPromiseRejectionWarning: Unhandled promise rejection (rejection id: 1): Error: There is no user record corresponding to the provided identifier.
2018-04-08T06:46:33.555Z - error: (node:6273) [DEP0018] DeprecationWarning: Unhandled promise rejections are deprecated. In the future, promise rejections that are not handled will terminate the Node.js process with a non-zero exit code.
2018-04-08T06:47:13.064Z - info: Execution took 42863 ms, finished with status: 'crash'
2018-04-08T06:47:13.248Z - error: Function worker killed by signal: SIGTERM
2018-04-08T06:47:17.396Z - info: User function triggered, starting execution
2018-04-08T06:47:17.400Z - info: 12 80 AI 500
2018-04-08T06:47:20.108Z - info: { '2mZfdVQdOHXVAaaXRPSFV6n6Bwo2': 
   { location: { latitude: 12.749945199999999, longitude: 80.19955279999999 },
     skillset: [ 'C#', 'AI' ] },
  S9cIFvYv1ifgbmEJlI8wTi8Z7Cz2: 
   { chat: '2mZfdVQdOHXVAaaXRPSFV6n6Bwo2',
     location: { latitude: 12.749945199999999, longitude: 80.19955279999999 },
     skillset: [ 'Haskell', 'AI', 'AI', 'Aerobics' ] } }
2018-04-08T06:47:20.108Z - info: fitllere [ '2mZfdVQdOHXVAaaXRPSFV6n6Bwo2',
  'S9cIFvYv1ifgbmEJlI8wTi8Z7Cz2' ]
2018-04-08T06:47:20.660Z - info: Execution took 3264 ms, user function completed successfully
2018-04-08T06:47:51.377Z - info: User function triggered, starting execution
2018-04-08T06:47:51.380Z - info: 12 80 AI 500
2018-04-08T06:47:54.256Z - info: { '2mZfdVQdOHXVAaaXRPSFV6n6Bwo2': 
   { location: { latitude: 12.749945199999999, longitude: 80.19955279999999 },
     skillset: [ 'C#', 'AI' ] },
  S9cIFvYv1ifgbmEJlI8wTi8Z7Cz2: 
   { chat: '2mZfdVQdOHXVAaaXRPSFV6n6Bwo2',
     location: { latitude: 12.749945199999999, longitude: 80.19955279999999 },
     skillset: [ 'Haskell', 'AI', 'AI', 'Aerobics' ] } }
2018-04-08T06:47:54.256Z - info: fitllere [ '2mZfdVQdOHXVAaaXRPSFV6n6Bwo2',
  'S9cIFvYv1ifgbmEJlI8wTi8Z7Cz2' ]
2018-04-08T06:47:54.769Z - error: (node:6517) UnhandledPromiseRejectionWarning: Unhandled promise rejection (rejection id: 1): TypeError: Cannot read property 'skillset' of undefined
2018-04-08T06:47:54.770Z - error: (node:6517) [DEP0018] DeprecationWarning: Unhandled promise rejections are deprecated. In the future, promise rejections that are not handled will terminate the Node.js process with a non-zero exit code.
2018-04-08T06:48:23.799Z - info: Execution took 33032 ms, finished with status: 'crash'
2018-04-08T06:48:23.910Z - error: Function worker killed by signal: SIGTERM
2018-04-08T06:48:27.221Z - info: User function triggered, starting execution
2018-04-08T06:48:27.224Z - info: 12 80 AI 500
2018-04-08T06:48:29.536Z - info: { '2mZfdVQdOHXVAaaXRPSFV6n6Bwo2': 
   { location: { latitude: 12.749945199999999, longitude: 80.19955279999999 },
     skillset: [ 'C#', 'AI' ] },
  S9cIFvYv1ifgbmEJlI8wTi8Z7Cz2: 
   { chat: '2mZfdVQdOHXVAaaXRPSFV6n6Bwo2',
     location: { latitude: 12.749945199999999, longitude: 80.19955279999999 },
     skillset: [ 'Haskell', 'AI', 'AI', 'Aerobics' ] } }
2018-04-08T06:48:29.536Z - info: fitllere [ '2mZfdVQdOHXVAaaXRPSFV6n6Bwo2',
  'S9cIFvYv1ifgbmEJlI8wTi8Z7Cz2' ]
2018-04-08T06:48:30.092Z - info: Execution took 2871 ms, user function completed successfully
2018-04-08T06:49:10.461Z - info: User function triggered, starting execution
2018-04-08T06:49:10.466Z - info: 12 80 AI 500
2018-04-08T06:49:12.683Z - info: { '2mZfdVQdOHXVAaaXRPSFV6n6Bwo2': 
   { location: { latitude: 12.749945199999999, longitude: 80.19955279999999 },
     skillset: [ 'C#', 'AI' ] },
  S9cIFvYv1ifgbmEJlI8wTi8Z7Cz2: 
   { chat: '2mZfdVQdOHXVAaaXRPSFV6n6Bwo2',
     location: { latitude: 12.749945199999999, longitude: 80.19955279999999 },
     skillset: [ 'Haskell', 'AI', 'AI', 'Aerobics' ] } }
2018-04-08T06:49:12.685Z - info: fitllere [ '2mZfdVQdOHXVAaaXRPSFV6n6Bwo2',
  'S9cIFvYv1ifgbmEJlI8wTi8Z7Cz2' ]
2018-04-08T06:49:13.270Z - info: Execution took 2811 ms, user function completed successfully
2018-04-08T06:49:46.818Z - info: User function triggered, starting execution
2018-04-08T06:49:46.823Z - info: 12 80 AI 500
2018-04-08T06:49:49.883Z - info: { '2mZfdVQdOHXVAaaXRPSFV6n6Bwo2': 
   { location: { latitude: 12.749945199999999, longitude: 80.19955279999999 },
     skillset: [ 'C#', 'AI' ] },
  S9cIFvYv1ifgbmEJlI8wTi8Z7Cz2: 
   { chat: '2mZfdVQdOHXVAaaXRPSFV6n6Bwo2',
     location: { latitude: 12.749945199999999, longitude: 80.19955279999999 },
     skillset: [ 'Haskell', 'AI', 'AI', 'Aerobics' ] } }
2018-04-08T06:49:49.883Z - info: fitllere [ '2mZfdVQdOHXVAaaXRPSFV6n6Bwo2',
  'S9cIFvYv1ifgbmEJlI8wTi8Z7Cz2' ]
2018-04-08T06:49:50.462Z - info: Execution took 3645 ms, user function completed successfully
2018-04-08T06:53:22.759Z - info: User function triggered, starting execution
2018-04-08T06:53:22.759Z - info: 12 80 AI 52
2018-04-08T06:53:23.200Z - info: { '2mZfdVQdOHXVAaaXRPSFV6n6Bwo2': 
   { location: { latitude: 12.749945199999999, longitude: 80.19955279999999 },
     skillset: [ 'C#', 'AI' ] },
  S9cIFvYv1ifgbmEJlI8wTi8Z7Cz2: 
   { chat: '2mZfdVQdOHXVAaaXRPSFV6n6Bwo2',
     location: { latitude: 12.749945199999999, longitude: 80.19955279999999 },
     skillset: [ 'Haskell', 'AI', 'AI', 'Aerobics' ] } }
2018-04-08T06:53:23.200Z - info: fitllere []
2018-04-08T06:53:23.204Z - info: Execution took 445 ms, user function completed successfully
2018-04-08T06:53:27.988Z - info: User function triggered, starting execution
2018-04-08T06:53:27.988Z - info: 12 80 AI 56
2018-04-08T06:53:28.640Z - info: { '2mZfdVQdOHXVAaaXRPSFV6n6Bwo2': 
   { location: { latitude: 12.749945199999999, longitude: 80.19955279999999 },
     skillset: [ 'C#', 'AI' ] },
  S9cIFvYv1ifgbmEJlI8wTi8Z7Cz2: 
   { chat: '2mZfdVQdOHXVAaaXRPSFV6n6Bwo2',
     location: { latitude: 12.749945199999999, longitude: 80.19955279999999 },
     skillset: [ 'Haskell', 'AI', 'AI', 'Aerobics' ] } }
2018-04-08T06:53:28.641Z - info: fitllere []
2018-04-08T06:53:28.643Z - info: Execution took 654 ms, user function completed successfully
2018-04-08T06:53:33.909Z - info: User function triggered, starting execution
12 80 AI 89
2018-04-08T06:53:34.254Z - info: { '2mZfdVQdOHXVAaaXRPSFV6n6Bwo2': 
   { location: { latitude: 12.749945199999999, longitude: 80.19955279999999 },
     skillset: [ 'C#', 'AI' ] },
  S9cIFvYv1ifgbmEJlI8wTi8Z7Cz2: 
   { chat: '2mZfdVQdOHXVAaaXRPSFV6n6Bwo2',
     location: { latitude: 12.749945199999999, longitude: 80.19955279999999 },
     skillset: [ 'Haskell', 'AI', 'AI', 'Aerobics' ] } }
2018-04-08T06:53:34.255Z - info: fitllere [ '2mZfdVQdOHXVAaaXRPSFV6n6Bwo2',
  'S9cIFvYv1ifgbmEJlI8wTi8Z7Cz2' ]
2018-04-08T06:53:34.714Z - info: Execution took 804 ms, user function completed successfully
2018-04-08T06:53:38.398Z - info: User function triggered, starting execution
2018-04-08T06:53:38.398Z - info: 12 80 AI 0.5
2018-04-08T06:53:38.901Z - info: { '2mZfdVQdOHXVAaaXRPSFV6n6Bwo2': 
   { location: { latitude: 12.749945199999999, longitude: 80.19955279999999 },
     skillset: [ 'C#', 'AI' ] },
  S9cIFvYv1ifgbmEJlI8wTi8Z7Cz2: 
   { chat: '2mZfdVQdOHXVAaaXRPSFV6n6Bwo2',
     location: { latitude: 12.749945199999999, longitude: 80.19955279999999 },
     skillset: [ 'Haskell', 'AI', 'AI', 'Aerobics' ] } }
2018-04-08T06:53:38.901Z - info: fitllere []
2018-04-08T06:53:38.904Z - info: Execution took 504 ms, user function completed successfully
2018-04-08T06:53:41.876Z - info: User function triggered, starting execution
2018-04-08T06:53:41.876Z - info: 12 80 AI 86
2018-04-08T06:53:42.283Z - info: { '2mZfdVQdOHXVAaaXRPSFV6n6Bwo2': 
   { location: { latitude: 12.749945199999999, longitude: 80.19955279999999 },
     skillset: [ 'C#', 'AI' ] },
  S9cIFvYv1ifgbmEJlI8wTi8Z7Cz2: 
   { chat: '2mZfdVQdOHXVAaaXRPSFV6n6Bwo2',
     location: { latitude: 12.749945199999999, longitude: 80.19955279999999 },
     skillset: [ 'Haskell', 'AI', 'AI', 'Aerobics' ] } }
2018-04-08T06:53:42.284Z - info: fitllere []
2018-04-08T06:53:42.285Z - info: Execution took 408 ms, user function completed successfully
2018-04-08T09:12:55.307Z - info: User function triggered, starting execution
2018-04-08T09:12:58.412Z - info: [ '2mZfdVQdOHXVAaaXRPSFV6n6Bwo2' ]
2018-04-08T09:12:58.961Z - info: Execution took 3655 ms, user function completed successfully
2018-04-08T09:13:05.265Z - info: User function triggered, starting execution
2018-04-08T09:13:05.576Z - info: [ '2mZfdVQdOHXVAaaXRPSFV6n6Bwo2' ]
2018-04-08T09:13:06.049Z - info: Execution took 784 ms, user function completed successfully
2018-04-08T09:14:26.488Z - info: User function triggered, starting execution
2018-04-08T09:14:26.791Z - info: [ '2mZfdVQdOHXVAaaXRPSFV6n6Bwo2' ]
2018-04-08T09:14:27.271Z - info: Execution took 782 ms, user function completed successfully
2018-04-08T09:36:31.558Z - info: User function triggered, starting execution
2018-04-08T09:36:31.562Z - info: 12 80 AI 86
2018-04-08T09:36:35.220Z - error: [2018-04-08T09:36:35.219Z]  @firebase/database: FIREBASE WARNING: Exception was thrown by user callback. TypeError: Cannot read property 'location' of undefined
    at admin.database.ref.once.snapshot (/home/akash/Documents/pro/juspay/metutu-server/functions/index.js:46:31)
    at onceCallback (/home/akash/Documents/pro/juspay/metutu-server/functions/node_modules/@firebase/database/dist/cjs/src/api/Query.js:244:51)
    at /home/akash/Documents/pro/juspay/metutu-server/functions/node_modules/@firebase/database/dist/cjs/src/core/view/EventRegistration.js:65:22
    at Object.exports.exceptionGuard (/home/akash/Documents/pro/juspay/metutu-server/functions/node_modules/@firebase/database/dist/cjs/src/core/util/util.js:536:9)
    at EventList.raise (/home/akash/Documents/pro/juspay/metutu-server/functions/node_modules/@firebase/database/dist/cjs/src/core/view/EventQueue.js:158:24)
    at EventQueue.raiseQueuedEventsMatchingPredicate_ (/home/akash/Documents/pro/juspay/metutu-server/functions/node_modules/@firebase/database/dist/cjs/src/core/view/EventQueue.js:111:41)
    at EventQueue.raiseEventsForChangedPath (/home/akash/Documents/pro/juspay/metutu-server/functions/node_modules/@firebase/database/dist/cjs/src/core/view/EventQueue.js:95:14)
    at Repo.onDataUpdate_ (/home/akash/Documents/pro/juspay/metutu-server/functions/node_modules/@firebase/database/dist/cjs/src/core/Repo.js:200:26)
    at PersistentConnection.onDataPush_ (/home/akash/Documents/pro/juspay/metutu-server/functions/node_modules/@firebase/database/dist/cjs/src/core/PersistentConnection.js:449:18)
    at PersistentConnection.onDataMessage_ (/home/akash/Documents/pro/juspay/metutu-server/functions/node_modules/@firebase/database/dist/cjs/src/core/PersistentConnection.js:443:18) 
2018-04-08T09:36:35.221Z - error: /home/akash/Documents/pro/juspay/metutu-server/functions/node_modules/@firebase/database/dist/cjs/src/core/util/util.js:547
            throw e;
            ^

TypeError: Cannot read property 'location' of undefined
    at admin.database.ref.once.snapshot (/home/akash/Documents/pro/juspay/metutu-server/functions/index.js:46:31)
    at onceCallback (/home/akash/Documents/pro/juspay/metutu-server/functions/node_modules/@firebase/database/dist/cjs/src/api/Query.js:244:51)
    at /home/akash/Documents/pro/juspay/metutu-server/functions/node_modules/@firebase/database/dist/cjs/src/core/view/EventRegistration.js:65:22
    at Object.exports.exceptionGuard (/home/akash/Documents/pro/juspay/metutu-server/functions/node_modules/@firebase/database/dist/cjs/src/core/util/util.js:536:9)
    at EventList.raise (/home/akash/Documents/pro/juspay/metutu-server/functions/node_modules/@firebase/database/dist/cjs/src/core/view/EventQueue.js:158:24)
    at EventQueue.raiseQueuedEventsMatchingPredicate_ (/home/akash/Documents/pro/juspay/metutu-server/functions/node_modules/@firebase/database/dist/cjs/src/core/view/EventQueue.js:111:41)
    at EventQueue.raiseEventsForChangedPath (/home/akash/Documents/pro/juspay/metutu-server/functions/node_modules/@firebase/database/dist/cjs/src/core/view/EventQueue.js:95:14)
    at Repo.onDataUpdate_ (/home/akash/Documents/pro/juspay/metutu-server/functions/node_modules/@firebase/database/dist/cjs/src/core/Repo.js:200:26)
    at PersistentConnection.onDataPush_ (/home/akash/Documents/pro/juspay/metutu-server/functions/node_modules/@firebase/database/dist/cjs/src/core/PersistentConnection.js:449:18)
    at PersistentConnection.onDataMessage_ (/home/akash/Documents/pro/juspay/metutu-server/functions/node_modules/@firebase/database/dist/cjs/src/core/PersistentConnection.js:443:18)
2018-04-08T09:36:35.250Z - info: Execution took 4886 ms, finished with status: 'crash'
2018-04-08T09:36:35.306Z - error: Function worker crashed with exit code: 1
2018-04-08T09:36:49.614Z - info: User function triggered, starting execution
2018-04-08T09:36:49.619Z - info: 12 80 AI 86
2018-04-08T09:36:51.769Z - info: { '2mZfdVQdOHXVAaaXRPSFV6n6Bwo2': 
   { location: { latitude: 12.749945199999999, longitude: 80.19955279999999 },
     skillset: [ 'C#', 'AI' ] },
  S9cIFvYv1ifgbmEJlI8wTi8Z7Cz2: 
   { chat: '2mZfdVQdOHXVAaaXRPSFV6n6Bwo2',
     location: { latitude: 12.749945199999999, longitude: 80.19955279999999 },
     skillset: [ 'Haskell', 'AI', 'AI', 'Aerobics' ] } }
2018-04-08T09:36:51.770Z - info: fitllere [ '2mZfdVQdOHXVAaaXRPSFV6n6Bwo2',
  'S9cIFvYv1ifgbmEJlI8wTi8Z7Cz2' ]
2018-04-08T09:36:51.773Z - error: [2018-04-08T09:36:51.772Z]  @firebase/database: FIREBASE WARNING: Exception was thrown by user callback. ReferenceError: filteredU is not defined
    at admin.database.ref.once.snapshot (/home/akash/Documents/pro/juspay/metutu-server/functions/index.js:51:26)
    at onceCallback (/home/akash/Documents/pro/juspay/metutu-server/functions/node_modules/@firebase/database/dist/cjs/src/api/Query.js:244:51)
    at /home/akash/Documents/pro/juspay/metutu-server/functions/node_modules/@firebase/database/dist/cjs/src/core/view/EventRegistration.js:65:22
    at Object.exports.exceptionGuard (/home/akash/Documents/pro/juspay/metutu-server/functions/node_modules/@firebase/database/dist/cjs/src/core/util/util.js:536:9)
    at EventList.raise (/home/akash/Documents/pro/juspay/metutu-server/functions/node_modules/@firebase/database/dist/cjs/src/core/view/EventQueue.js:158:24)
    at EventQueue.raiseQueuedEventsMatchingPredicate_ (/home/akash/Documents/pro/juspay/metutu-server/functions/node_modules/@firebase/database/dist/cjs/src/core/view/EventQueue.js:111:41)
    at EventQueue.raiseEventsForChangedPath (/home/akash/Documents/pro/juspay/metutu-server/functions/node_modules/@firebase/database/dist/cjs/src/core/view/EventQueue.js:95:14)
    at Repo.onDataUpdate_ (/home/akash/Documents/pro/juspay/metutu-server/functions/node_modules/@firebase/database/dist/cjs/src/core/Repo.js:200:26)
    at PersistentConnection.onDataPush_ (/home/akash/Documents/pro/juspay/metutu-server/functions/node_modules/@firebase/database/dist/cjs/src/core/PersistentConnection.js:449:18)
    at PersistentConnection.onDataMessage_ (/home/akash/Documents/pro/juspay/metutu-server/functions/node_modules/@firebase/database/dist/cjs/src/core/PersistentConnection.js:443:18) 
2018-04-08T09:36:51.774Z - error: /home/akash/Documents/pro/juspay/metutu-server/functions/node_modules/@firebase/database/dist/cjs/src/core/util/util.js:547
            throw e;
            ^

ReferenceError: filteredU is not defined
    at admin.database.ref.once.snapshot (/home/akash/Documents/pro/juspay/metutu-server/functions/index.js:51:26)
    at onceCallback (/home/akash/Documents/pro/juspay/metutu-server/functions/node_modules/@firebase/database/dist/cjs/src/api/Query.js:244:51)
    at /home/akash/Documents/pro/juspay/metutu-server/functions/node_modules/@firebase/database/dist/cjs/src/core/view/EventRegistration.js:65:22
    at Object.exports.exceptionGuard (/home/akash/Documents/pro/juspay/metutu-server/functions/node_modules/@firebase/database/dist/cjs/src/core/util/util.js:536:9)
    at EventList.raise (/home/akash/Documents/pro/juspay/metutu-server/functions/node_modules/@firebase/database/dist/cjs/src/core/view/EventQueue.js:158:24)
    at EventQueue.raiseQueuedEventsMatchingPredicate_ (/home/akash/Documents/pro/juspay/metutu-server/functions/node_modules/@firebase/database/dist/cjs/src/core/view/EventQueue.js:111:41)
    at EventQueue.raiseEventsForChangedPath (/home/akash/Documents/pro/juspay/metutu-server/functions/node_modules/@firebase/database/dist/cjs/src/core/view/EventQueue.js:95:14)
    at Repo.onDataUpdate_ (/home/akash/Documents/pro/juspay/metutu-server/functions/node_modules/@firebase/database/dist/cjs/src/core/Repo.js:200:26)
    at PersistentConnection.onDataPush_ (/home/akash/Documents/pro/juspay/metutu-server/functions/node_modules/@firebase/database/dist/cjs/src/core/PersistentConnection.js:449:18)
    at PersistentConnection.onDataMessage_ (/home/akash/Documents/pro/juspay/metutu-server/functions/node_modules/@firebase/database/dist/cjs/src/core/PersistentConnection.js:443:18)
2018-04-08T09:36:51.782Z - info: Execution took 2786 ms, finished with status: 'crash'
2018-04-08T09:36:51.820Z - error: Function worker crashed with exit code: 1
2018-04-08T09:37:53.917Z - info: User function triggered, starting execution
2018-04-08T09:37:53.922Z - info: 12 80 AI 86
2018-04-08T09:37:56.106Z - info: { '2mZfdVQdOHXVAaaXRPSFV6n6Bwo2': 
   { location: { latitude: 12.749945199999999, longitude: 80.19955279999999 },
     skillset: [ 'C#', 'AI' ] },
  S9cIFvYv1ifgbmEJlI8wTi8Z7Cz2: 
   { chat: '2mZfdVQdOHXVAaaXRPSFV6n6Bwo2',
     location: { latitude: 12.749945199999999, longitude: 80.19955279999999 },
     skillset: [ 'Haskell', 'AI', 'AI', 'Aerobics' ] } }
2018-04-08T09:37:56.106Z - info: fitllere []
2018-04-08T09:37:56.115Z - info: Execution took 2198 ms, user function completed successfully
2018-04-08T09:38:31.437Z - info: User function triggered, starting execution
2018-04-08T09:38:31.441Z - info: 12 80 AI 86
2018-04-08T09:38:33.858Z - info: { location: { latitude: 12.749945199999999, longitude: 80.19955279999999 },
  skillset: [ 'C#', 'AI' ] }
2018-04-08T09:38:33.860Z - info: { '2mZfdVQdOHXVAaaXRPSFV6n6Bwo2': 
   { location: { latitude: 12.749945199999999, longitude: 80.19955279999999 },
     skillset: [ 'C#', 'AI' ] },
  S9cIFvYv1ifgbmEJlI8wTi8Z7Cz2: 
   { chat: '2mZfdVQdOHXVAaaXRPSFV6n6Bwo2',
     location: { latitude: 12.749945199999999, longitude: 80.19955279999999 },
     skillset: [ 'Haskell', 'AI', 'AI', 'Aerobics' ] } }
2018-04-08T09:38:33.864Z - info: fitllere []
2018-04-08T09:38:33.865Z - info: Execution took 2430 ms, user function completed successfully
2018-04-08T09:40:27.719Z - info: User function triggered, starting execution
2018-04-08T09:40:27.722Z - info: 12 80 AI 86
2018-04-08T09:40:30.073Z - info: { location: { latitude: 12.749945199999999, longitude: 80.19955279999999 },
  skillset: [ 'C#', 'AI' ] }
2018-04-08T09:40:30.074Z - info: { '2mZfdVQdOHXVAaaXRPSFV6n6Bwo2': 
   { location: { latitude: 12.749945199999999, longitude: 80.19955279999999 },
     skillset: [ 'C#', 'AI' ] },
  S9cIFvYv1ifgbmEJlI8wTi8Z7Cz2: 
   { chat: '2mZfdVQdOHXVAaaXRPSFV6n6Bwo2',
     location: { latitude: 12.749945199999999, longitude: 80.19955279999999 },
     skillset: [ 'Haskell', 'AI', 'AI', 'Aerobics' ] } }
2018-04-08T09:40:30.074Z - info: NaN
2018-04-08T09:40:30.075Z - info: NaN
fitllere []
2018-04-08T09:40:30.086Z - info: Execution took 2369 ms, user function completed successfully
2018-04-08T09:40:50.773Z - info: User function triggered, starting execution
2018-04-08T09:40:50.777Z - info: 12 80 AI 86
2018-04-08T09:40:53.106Z - info: { location: { latitude: 12.749945199999999, longitude: 80.19955279999999 },
  skillset: [ 'C#', 'AI' ] }
2018-04-08T09:40:53.106Z - info: { '2mZfdVQdOHXVAaaXRPSFV6n6Bwo2': 
   { location: { latitude: 12.749945199999999, longitude: 80.19955279999999 },
     skillset: [ 'C#', 'AI' ] },
  S9cIFvYv1ifgbmEJlI8wTi8Z7Cz2: 
   { chat: '2mZfdVQdOHXVAaaXRPSFV6n6Bwo2',
     location: { latitude: 12.749945199999999, longitude: 80.19955279999999 },
     skillset: [ 'Haskell', 'AI', 'AI', 'Aerobics' ] } }
2018-04-08T09:40:53.107Z - info: { latitude: 12.749945199999999, longitude: 80.19955279999999 } { location: { latitude: 12.749945199999999, longitude: 80.19955279999999 },
  skillset: [ 'C#', 'AI' ] }
2018-04-08T09:40:53.107Z - info: NaN
{ latitude: 12.749945199999999, longitude: 80.19955279999999 } { location: { latitude: 12.749945199999999, longitude: 80.19955279999999 },
  skillset: [ 'C#', 'AI' ],
  dist: NaN }
NaN
2018-04-08T09:40:53.108Z - info: fitllere []
2018-04-08T09:40:53.119Z - info: Execution took 2347 ms, user function completed successfully
2018-04-08T09:41:54.817Z - info: User function triggered, starting execution
2018-04-08T09:41:54.824Z - info: 12 80 AI 86
2018-04-08T09:41:57.916Z - info: { latitude: 12.749945199999999, longitude: 80.19955279999999 }
2018-04-08T09:41:57.917Z - info: { '2mZfdVQdOHXVAaaXRPSFV6n6Bwo2': 
   { location: { latitude: 12.749945199999999, longitude: 80.19955279999999 },
     skillset: [ 'C#', 'AI' ] },
  S9cIFvYv1ifgbmEJlI8wTi8Z7Cz2: 
   { chat: '2mZfdVQdOHXVAaaXRPSFV6n6Bwo2',
     location: { latitude: 12.749945199999999, longitude: 80.19955279999999 },
     skillset: [ 'Haskell', 'AI', 'AI', 'Aerobics' ] } }
2018-04-08T09:41:57.918Z - info: { latitude: 12.749945199999999, longitude: 80.19955279999999 } { latitude: 12.749945199999999, longitude: 80.19955279999999 }
2018-04-08T09:41:57.918Z - info: 0
{ latitude: 12.749945199999999, longitude: 80.19955279999999 } { latitude: 12.749945199999999, longitude: 80.19955279999999 }
0
2018-04-08T09:41:57.918Z - info: fitllere [ '2mZfdVQdOHXVAaaXRPSFV6n6Bwo2',
  'S9cIFvYv1ifgbmEJlI8wTi8Z7Cz2' ]
2018-04-08T09:41:58.858Z - info: Execution took 4042 ms, user function completed successfully
2018-04-08T09:53:09.232Z - info: User function triggered, starting execution
2018-04-08T09:53:09.239Z - info: undefined undefined 'AI' '300'
2018-04-08T09:53:11.703Z - info: { latitude: 12.749945199999999, longitude: 80.19955279999999 }
2018-04-08T09:53:11.704Z - info: { '2mZfdVQdOHXVAaaXRPSFV6n6Bwo2': 
   { location: { latitude: 12.749945199999999, longitude: 80.19955279999999 },
     skillset: [ 'C#', 'AI' ] },
  S9cIFvYv1ifgbmEJlI8wTi8Z7Cz2: 
   { chat: '2mZfdVQdOHXVAaaXRPSFV6n6Bwo2',
     location: { latitude: 12.749945199999999, longitude: 80.19955279999999 },
     skillset: [ 'Haskell', 'AI', 'AI', 'Aerobics' ] } }
2018-04-08T09:53:11.704Z - info: { latitude: 12.749945199999999, longitude: 80.19955279999999 } { latitude: 12.749945199999999, longitude: 80.19955279999999 }
2018-04-08T09:53:11.704Z - info: 0
{ latitude: 12.749945199999999, longitude: 80.19955279999999 } { latitude: 12.749945199999999, longitude: 80.19955279999999 }
0
2018-04-08T09:53:11.705Z - info: fitllere [ '2mZfdVQdOHXVAaaXRPSFV6n6Bwo2',
  'S9cIFvYv1ifgbmEJlI8wTi8Z7Cz2' ]
2018-04-08T09:53:12.403Z - info: Execution took 3171 ms, user function completed successfully
2018-04-08T09:55:11.621Z - info: User function triggered, starting execution
2018-04-08T09:55:11.621Z - info: undefined undefined 'AI' '3'
2018-04-08T09:55:11.942Z - info: { latitude: 12.749945199999999, longitude: 80.19955279999999 }
2018-04-08T09:55:11.942Z - info: { '2mZfdVQdOHXVAaaXRPSFV6n6Bwo2': 
   { location: { latitude: 12.749945199999999, longitude: 80.19955279999999 },
     skillset: [ 'C#', 'AI' ] },
  S9cIFvYv1ifgbmEJlI8wTi8Z7Cz2: 
   { chat: '2mZfdVQdOHXVAaaXRPSFV6n6Bwo2',
     location: { latitude: 12.749945199999999, longitude: 80.19955279999999 },
     skillset: [ 'Haskell', 'AI', 'AI', 'Aerobics' ] } }
{ latitude: 12.749945199999999, longitude: 80.19955279999999 } { latitude: 12.749945199999999, longitude: 80.19955279999999 }
0
{ latitude: 12.749945199999999, longitude: 80.19955279999999 } { latitude: 12.749945199999999, longitude: 80.19955279999999 }
0
2018-04-08T09:55:11.943Z - info: fitllere [ '2mZfdVQdOHXVAaaXRPSFV6n6Bwo2',
  'S9cIFvYv1ifgbmEJlI8wTi8Z7Cz2' ]
2018-04-08T09:55:12.642Z - info: Execution took 1021 ms, user function completed successfully
2018-04-08T09:56:54.504Z - info: User function triggered, starting execution
2018-04-08T09:56:54.505Z - info: undefined undefined 'AI' '4'
2018-04-08T09:56:54.817Z - info: { latitude: 12.749945199999999, longitude: 80.19955279999999 }
2018-04-08T09:56:54.818Z - info: { '2mZfdVQdOHXVAaaXRPSFV6n6Bwo2': 
   { location: { latitude: 12.749945199999999, longitude: 80.19955279999999 },
     skillset: [ 'C#', 'AI' ] },
  S9cIFvYv1ifgbmEJlI8wTi8Z7Cz2: 
   { chat: '2mZfdVQdOHXVAaaXRPSFV6n6Bwo2',
     location: { latitude: 12.749945199999999, longitude: 80.19955279999999 },
     skillset: [ 'Haskell', 'AI', 'AI', 'Aerobics' ] } }
{ latitude: 12.749945199999999, longitude: 80.19955279999999 } { latitude: 12.749945199999999, longitude: 80.19955279999999 }
0
{ latitude: 12.749945199999999, longitude: 80.19955279999999 } { latitude: 12.749945199999999, longitude: 80.19955279999999 }
0
fitllere [ '2mZfdVQdOHXVAaaXRPSFV6n6Bwo2',
  'S9cIFvYv1ifgbmEJlI8wTi8Z7Cz2' ]
2018-04-08T09:56:55.272Z - info: Execution took 766 ms, user function completed successfully
2018-04-08T10:07:47.500Z - info: User function triggered, starting execution
2018-04-08T10:07:47.505Z - info: undefined undefined 'AI' '83'
2018-04-08T10:07:50.231Z - info: { latitude: 12.749945199999999, longitude: 80.19955279999999 }
2018-04-08T10:07:50.232Z - info: { '2mZfdVQdOHXVAaaXRPSFV6n6Bwo2': 
   { location: { latitude: 12.749945199999999, longitude: 80.19955279999999 },
     skillset: [ 'C#', 'AI' ] },
  S9cIFvYv1ifgbmEJlI8wTi8Z7Cz2: 
   { chat: '2mZfdVQdOHXVAaaXRPSFV6n6Bwo2',
     location: { latitude: 12.749945199999999, longitude: 80.19955279999999 },
     skillset: [ 'Haskell', 'AI', 'AI', 'Aerobics' ] } }
2018-04-08T10:07:50.233Z - info: { latitude: 12.749945199999999, longitude: 80.19955279999999 } { latitude: 12.749945199999999, longitude: 80.19955279999999 }
2018-04-08T10:07:50.234Z - info: 0
2018-04-08T10:07:50.235Z - info: { latitude: 12.749945199999999, longitude: 80.19955279999999 } { latitude: 12.749945199999999, longitude: 80.19955279999999 }
2018-04-08T10:07:50.235Z - info: 0
fitllere [ '2mZfdVQdOHXVAaaXRPSFV6n6Bwo2',
  'S9cIFvYv1ifgbmEJlI8wTi8Z7Cz2' ]
2018-04-08T10:07:51.251Z - info: Execution took 3750 ms, user function completed successfully
2018-04-08T10:08:51.149Z - info: User function triggered, starting execution
2018-04-08T10:08:51.149Z - info: undefined undefined 'AI' '5'
2018-04-08T10:08:51.484Z - info: { latitude: 12.749945199999999, longitude: 80.19955279999999 }
2018-04-08T10:08:51.484Z - info: { '2mZfdVQdOHXVAaaXRPSFV6n6Bwo2': 
   { location: { latitude: 12.749945199999999, longitude: 80.19955279999999 },
     skillset: [ 'C#', 'AI' ] },
  S9cIFvYv1ifgbmEJlI8wTi8Z7Cz2: 
   { chat: '2mZfdVQdOHXVAaaXRPSFV6n6Bwo2',
     location: { latitude: 12.749945199999999, longitude: 80.19955279999999 },
     skillset: [ 'Haskell', 'AI', 'AI', 'Aerobics' ] } }
{ latitude: 12.749945199999999, longitude: 80.19955279999999 } { latitude: 12.749945199999999, longitude: 80.19955279999999 }
0
2018-04-08T10:08:51.485Z - info: { latitude: 12.749945199999999, longitude: 80.19955279999999 } { latitude: 12.749945199999999, longitude: 80.19955279999999 }
0
fitllere [ '2mZfdVQdOHXVAaaXRPSFV6n6Bwo2',
  'S9cIFvYv1ifgbmEJlI8wTi8Z7Cz2' ]
2018-04-08T10:08:52.048Z - info: Execution took 899 ms, user function completed successfully
2018-04-08T10:09:44.097Z - info: User function triggered, starting execution
2018-04-08T10:09:44.826Z - info: [ '2mZfdVQdOHXVAaaXRPSFV6n6Bwo2' ]
2018-04-08T10:09:45.404Z - info: Execution took 1309 ms, user function completed successfully
2018-04-08T10:09:55.836Z - info: User function triggered, starting execution
2018-04-08T10:09:56.156Z - info: [ '2mZfdVQdOHXVAaaXRPSFV6n6Bwo2' ]
2018-04-08T10:09:56.711Z - info: Execution took 874 ms, user function completed successfully
2018-04-08T10:10:21.114Z - info: User function triggered, starting execution
2018-04-08T10:10:21.545Z - info: [ '2mZfdVQdOHXVAaaXRPSFV6n6Bwo2' ]
2018-04-08T10:10:22.132Z - info: Execution took 1019 ms, user function completed successfully
2018-04-08T10:11:18.685Z - info: User function triggered, starting execution
2018-04-08T10:11:18.686Z - info: undefined undefined 'AI' '33'
2018-04-08T10:11:19.317Z - info: { latitude: 12.749945199999999, longitude: 80.19955279999999 }
2018-04-08T10:11:19.318Z - info: { '2mZfdVQdOHXVAaaXRPSFV6n6Bwo2': 
   { location: { latitude: 12.749945199999999, longitude: 80.19955279999999 },
     skillset: [ 'C#', 'AI' ] },
  S9cIFvYv1ifgbmEJlI8wTi8Z7Cz2: 
   { chat: '2mZfdVQdOHXVAaaXRPSFV6n6Bwo2',
     location: { latitude: 12.749945199999999, longitude: 80.19955279999999 },
     skillset: [ 'Haskell', 'AI', 'AI', 'Aerobics' ] } }
{ latitude: 12.749945199999999, longitude: 80.19955279999999 } { latitude: 12.749945199999999, longitude: 80.19955279999999 }
0
{ latitude: 12.749945199999999, longitude: 80.19955279999999 } { latitude: 12.749945199999999, longitude: 80.19955279999999 }
0
fitllere [ '2mZfdVQdOHXVAaaXRPSFV6n6Bwo2',
  'S9cIFvYv1ifgbmEJlI8wTi8Z7Cz2' ]
2018-04-08T10:11:20.200Z - info: Execution took 1513 ms, user function completed successfully
2018-04-08T10:13:06.839Z - info: User function triggered, starting execution
2018-04-08T10:13:06.839Z - info: undefined undefined 'Haskell' '3'
2018-04-08T10:13:07.159Z - info: { latitude: 12.749945199999999, longitude: 80.19955279999999 }
{ '2mZfdVQdOHXVAaaXRPSFV6n6Bwo2': 
   { location: { latitude: 12.749945199999999, longitude: 80.19955279999999 },
     skillset: [ 'C#', 'AI' ] },
  S9cIFvYv1ifgbmEJlI8wTi8Z7Cz2: 
   { chat: '2mZfdVQdOHXVAaaXRPSFV6n6Bwo2',
     location: { latitude: 12.749945199999999, longitude: 80.19955279999999 },
     skillset: [ 'Haskell', 'AI', 'AI', 'Aerobics' ] } }
2018-04-08T10:13:07.159Z - info: { latitude: 12.749945199999999, longitude: 80.19955279999999 } { latitude: 12.749945199999999, longitude: 80.19955279999999 }
0
fitllere [ 'S9cIFvYv1ifgbmEJlI8wTi8Z7Cz2' ]
2018-04-08T10:13:07.792Z - info: Execution took 952 ms, user function completed successfully
2018-04-08T11:34:31.170Z - info: User function triggered, starting execution
2018-04-08T11:34:31.174Z - info: undefined undefined 'AI' '4'
2018-04-08T11:34:33.448Z - info: { latitude: 12.749945199999999, longitude: 80.19955279999999 }
2018-04-08T11:34:33.449Z - info: { '2mZfdVQdOHXVAaaXRPSFV6n6Bwo2': 
   { location: { latitude: 12.749945199999999, longitude: 80.19955279999999 },
     skillset: [ 'C#', 'AI' ] },
  S9cIFvYv1ifgbmEJlI8wTi8Z7Cz2: 
   { chat: '2mZfdVQdOHXVAaaXRPSFV6n6Bwo2',
     location: { latitude: 12.749945199999999, longitude: 80.19955279999999 },
     skillset: [ 'Haskell', 'AI', 'AI', 'Aerobics' ] } }
2018-04-08T11:34:33.449Z - info: { latitude: 12.749945199999999, longitude: 80.19955279999999 } { latitude: 12.749945199999999, longitude: 80.19955279999999 }
2018-04-08T11:34:33.449Z - info: 0
{ latitude: 12.749945199999999, longitude: 80.19955279999999 } { latitude: 12.749945199999999, longitude: 80.19955279999999 }
0
fitllere [ '2mZfdVQdOHXVAaaXRPSFV6n6Bwo2',
  'S9cIFvYv1ifgbmEJlI8wTi8Z7Cz2' ]
2018-04-08T11:34:34.065Z - info: Execution took 2895 ms, user function completed successfully
2018-04-08T11:34:53.530Z - info: User function triggered, starting execution
2018-04-08T11:34:53.531Z - info: undefined undefined undefined undefined
2018-04-08T11:34:53.837Z - info: { latitude: 12.749945199999999, longitude: 80.19955279999999 }
2018-04-08T11:34:53.837Z - info: { '2mZfdVQdOHXVAaaXRPSFV6n6Bwo2': 
   { location: { latitude: 12.749945199999999, longitude: 80.19955279999999 },
     skillset: [ 'C#', 'AI' ] },
  S9cIFvYv1ifgbmEJlI8wTi8Z7Cz2: 
   { chat: '2mZfdVQdOHXVAaaXRPSFV6n6Bwo2',
     location: { latitude: 12.749945199999999, longitude: 80.19955279999999 },
     skillset: [ 'Haskell', 'AI', 'AI', 'Aerobics' ] } }
fitllere []
2018-04-08T11:34:53.841Z - info: Execution took 310 ms, user function completed successfully
2018-04-08T12:48:24.582Z - info: User function triggered, starting execution
2018-04-08T12:48:24.589Z - info: undefined undefined 'AI' '4'
2018-04-08T12:48:28.698Z - info: { latitude: 12.749945199999999, longitude: 80.19955279999999 }
2018-04-08T12:48:28.699Z - info: { '2mZfdVQdOHXVAaaXRPSFV6n6Bwo2': 
   { location: { latitude: 12.749945199999999, longitude: 80.19955279999999 },
     skillset: [ 'C#', 'AI' ] },
  S9cIFvYv1ifgbmEJlI8wTi8Z7Cz2: 
   { chat: '2mZfdVQdOHXVAaaXRPSFV6n6Bwo2',
     location: { latitude: 12.749945199999999, longitude: 80.19955279999999 },
     skillset: [ 'Haskell', 'AI', 'AI', 'Aerobics' ] } }
2018-04-08T12:48:28.699Z - info: { latitude: 12.749945199999999, longitude: 80.19955279999999 } { latitude: 12.749945199999999, longitude: 80.19955279999999 }
2018-04-08T12:48:28.700Z - info: 0
{ latitude: 12.749945199999999, longitude: 80.19955279999999 } { latitude: 12.749945199999999, longitude: 80.19955279999999 }
2018-04-08T12:48:28.700Z - info: 0
fitllere [ '2mZfdVQdOHXVAaaXRPSFV6n6Bwo2',
  'S9cIFvYv1ifgbmEJlI8wTi8Z7Cz2' ]
2018-04-08T12:48:29.325Z - info: Execution took 4744 ms, user function completed successfully
2018-04-08T12:49:42.128Z - info: User function triggered, starting execution
2018-04-08T12:49:42.129Z - info: undefined undefined 'AI' '33'
2018-04-08T12:49:42.599Z - info: { latitude: 12.749945199999999, longitude: 80.19955279999999 }
2018-04-08T12:49:42.600Z - info: { '2mZfdVQdOHXVAaaXRPSFV6n6Bwo2': 
   { location: { latitude: 12.749945199999999, longitude: 80.19955279999999 },
     skillset: [ 'C#', 'AI' ] },
  S9cIFvYv1ifgbmEJlI8wTi8Z7Cz2: 
   { chat: '2mZfdVQdOHXVAaaXRPSFV6n6Bwo2',
     location: { latitude: 12.749945199999999, longitude: 80.19955279999999 },
     skillset: [ 'Haskell', 'AI', 'AI', 'Aerobics' ] } }
2018-04-08T12:49:42.601Z - info: { latitude: 12.749945199999999, longitude: 80.19955279999999 } { latitude: 12.749945199999999, longitude: 80.19955279999999 }
0
{ latitude: 12.749945199999999, longitude: 80.19955279999999 } { latitude: 12.749945199999999, longitude: 80.19955279999999 }
2018-04-08T12:49:42.601Z - info: 0
fitllere [ '2mZfdVQdOHXVAaaXRPSFV6n6Bwo2',
  'S9cIFvYv1ifgbmEJlI8wTi8Z7Cz2' ]
2018-04-08T12:49:44.294Z - info: Execution took 2165 ms, user function completed successfully
2018-04-08T12:56:05.213Z - info: User function triggered, starting execution
2018-04-08T12:56:05.221Z - info: undefined undefined 'AI' '233'
2018-04-08T12:56:07.810Z - info: { latitude: 12.749945199999999, longitude: 80.19955279999999 }
2018-04-08T12:56:07.810Z - info: { '2mZfdVQdOHXVAaaXRPSFV6n6Bwo2': 
   { location: { latitude: 12.749945199999999, longitude: 80.19955279999999 },
     skillset: [ 'C#', 'AI' ] },
  S9cIFvYv1ifgbmEJlI8wTi8Z7Cz2: 
   { chat: '2mZfdVQdOHXVAaaXRPSFV6n6Bwo2',
     location: { latitude: 12.749945199999999, longitude: 80.19955279999999 },
     skillset: [ 'Haskell', 'AI', 'AI', 'Aerobics' ] } }
2018-04-08T12:56:07.811Z - info: { latitude: 12.749945199999999, longitude: 80.19955279999999 } { latitude: 12.749945199999999, longitude: 80.19955279999999 }
2018-04-08T12:56:07.811Z - info: 0
2018-04-08T12:56:07.811Z - info: { latitude: 12.749945199999999, longitude: 80.19955279999999 } { latitude: 12.749945199999999, longitude: 80.19955279999999 }
2018-04-08T12:56:07.811Z - info: 0
2018-04-08T12:56:07.811Z - info: fitllere [ '2mZfdVQdOHXVAaaXRPSFV6n6Bwo2',
  'S9cIFvYv1ifgbmEJlI8wTi8Z7Cz2' ]
2018-04-08T12:56:08.413Z - info: Execution took 3201 ms, user function completed successfully
2018-04-08T13:57:42.539Z - info: User function triggered, starting execution
2018-04-08T13:57:44.323Z - info: Execution took 1786 ms, user function completed successfully
2018-04-08T13:58:40.873Z - info: User function triggered, starting execution
2018-04-08T13:58:41.365Z - info: Execution took 492 ms, user function completed successfully
2018-04-08T13:59:32.387Z - info: User function triggered, starting execution
2018-04-08T13:59:32.892Z - info: Execution took 504 ms, user function completed successfully
2018-04-08T14:00:01.076Z - info: User function triggered, starting execution
2018-04-08T14:00:01.604Z - info: Execution took 526 ms, user function completed successfully
2018-04-08T14:04:44.732Z - info: User function triggered, starting execution
2018-04-08T14:04:45.383Z - info: Execution took 649 ms, user function completed successfully
2018-04-08T14:04:48.098Z - info: User function triggered, starting execution
2018-04-08T14:04:48.906Z - info: Execution took 809 ms, user function completed successfully
2018-04-08T14:05:09.406Z - info: User function triggered, starting execution
2018-04-08T14:05:11.232Z - info: [ '2mZfdVQdOHXVAaaXRPSFV6n6Bwo2',
  'S9cIFvYv1ifgbmEJlI8wTi8Z7Cz2' ]
2018-04-08T14:05:12.668Z - info: Execution took 3263 ms, user function completed successfully
2018-04-08T14:20:04.909Z - info: User function triggered, starting execution
2018-04-08T14:20:08.627Z - info: []
2018-04-08T14:20:08.632Z - info: Execution took 3725 ms, user function completed successfully
2018-04-08T14:20:14.299Z - info: User function triggered, starting execution
2018-04-08T14:20:14.727Z - info: []
2018-04-08T14:20:14.730Z - info: Execution took 429 ms, user function completed successfully
2018-04-08T14:20:28.559Z - info: User function triggered, starting execution
2018-04-08T14:20:29.379Z - info: Execution took 821 ms, user function completed successfully
2018-04-08T14:20:55.021Z - info: User function triggered, starting execution
2018-04-08T14:20:55.330Z - info: [ 'S9cIFvYv1ifgbmEJlI8wTi8Z7Cz2' ]
2018-04-08T14:20:55.779Z - info: Execution took 759 ms, user function completed successfully
2018-04-08T14:21:06.901Z - info: User function triggered, starting execution
2018-04-08T14:21:07.231Z - info: [ 'S9cIFvYv1ifgbmEJlI8wTi8Z7Cz2' ]
2018-04-08T14:21:07.731Z - info: Execution took 829 ms, user function completed successfully
2018-04-08T14:25:04.943Z - info: User function triggered, starting execution
2018-04-08T14:25:05.290Z - info: [ 'S9cIFvYv1ifgbmEJlI8wTi8Z7Cz2' ]
2018-04-08T14:25:05.871Z - info: Execution took 927 ms, user function completed successfully
2018-04-08T14:25:29.834Z - info: User function triggered, starting execution
2018-04-08T14:25:30.250Z - info: [ 'S9cIFvYv1ifgbmEJlI8wTi8Z7Cz2' ]
2018-04-08T14:25:31.169Z - info: Execution took 1335 ms, user function completed successfully
2018-04-08T14:26:39.552Z - info: User function triggered, starting execution
2018-04-08T14:26:39.965Z - info: [ 'S9cIFvYv1ifgbmEJlI8wTi8Z7Cz2' ]
2018-04-08T14:26:40.483Z - info: Execution took 931 ms, user function completed successfully
2018-04-08T14:26:50.840Z - info: User function triggered, starting execution
2018-04-08T14:26:51.147Z - info: [ 'S9cIFvYv1ifgbmEJlI8wTi8Z7Cz2' ]
2018-04-08T14:26:52.454Z - info: Execution took 1612 ms, user function completed successfully
2018-04-08T14:27:41.933Z - info: User function triggered, starting execution
2018-04-08T14:27:42.375Z - info: [ 'S9cIFvYv1ifgbmEJlI8wTi8Z7Cz2' ]
2018-04-08T14:27:46.845Z - info: Execution took 4912 ms, user function completed successfully
2018-04-08T14:28:01.569Z - info: User function triggered, starting execution
2018-04-08T14:28:01.888Z - info: [ 'S9cIFvYv1ifgbmEJlI8wTi8Z7Cz2' ]
2018-04-08T14:28:03.017Z - info: Execution took 1449 ms, user function completed successfully
2018-04-08T14:28:21.757Z - info: User function triggered, starting execution
2018-04-08T14:28:22.079Z - info: [ 'S9cIFvYv1ifgbmEJlI8wTi8Z7Cz2' ]
2018-04-08T14:28:22.562Z - info: Execution took 805 ms, user function completed successfully
2018-04-08T14:28:28.314Z - info: User function triggered, starting execution
2018-04-08T14:28:28.778Z - info: Execution took 463 ms, user function completed successfully
2018-04-08T14:28:36.804Z - info: User function triggered, starting execution
2018-04-08T14:28:37.269Z - info: Execution took 464 ms, user function completed successfully
2018-04-08T14:28:42.541Z - info: User function triggered, starting execution
2018-04-08T14:28:42.933Z - info: [ 'S9cIFvYv1ifgbmEJlI8wTi8Z7Cz2' ]
2018-04-08T14:28:43.809Z - info: Execution took 1267 ms, user function completed successfully
2018-04-08T14:29:10.813Z - info: User function triggered, starting execution
2018-04-08T14:29:11.187Z - info: [ 'S9cIFvYv1ifgbmEJlI8wTi8Z7Cz2' ]
2018-04-08T14:29:12.616Z - info: Execution took 1805 ms, user function completed successfully
2018-04-08T14:55:59.319Z - info: User function triggered, starting execution
2018-04-08T14:56:02.252Z - info: [ 'S9cIFvYv1ifgbmEJlI8wTi8Z7Cz2' ]
2018-04-08T14:56:02.832Z - info: Execution took 3513 ms, user function completed successfully
2018-04-08T14:56:19.901Z - info: User function triggered, starting execution
2018-04-08T14:56:20.236Z - info: [ 'S9cIFvYv1ifgbmEJlI8wTi8Z7Cz2' ]
2018-04-08T14:56:20.857Z - info: Execution took 956 ms, user function completed successfully
2018-04-08T14:56:39.068Z - info: User function triggered, starting execution
2018-04-08T14:56:39.546Z - info: Execution took 477 ms, user function completed successfully
2018-04-08T14:56:46.831Z - info: User function triggered, starting execution
2018-04-08T14:56:47.260Z - info: [ 'S9cIFvYv1ifgbmEJlI8wTi8Z7Cz2' ]
2018-04-08T14:56:47.704Z - info: Execution took 872 ms, user function completed successfully
2018-04-08T14:57:13.473Z - info: User function triggered, starting execution
2018-04-08T14:57:14.806Z - info: [ 'S9cIFvYv1ifgbmEJlI8wTi8Z7Cz2' ]
2018-04-08T14:57:15.308Z - info: Execution took 1834 ms, user function completed successfully
2018-04-08T15:06:36.988Z - info: User function triggered, starting execution
2018-04-08T15:06:39.415Z - info: [ 'S9cIFvYv1ifgbmEJlI8wTi8Z7Cz2' ]
2018-04-08T15:06:40.422Z - info: Execution took 3436 ms, user function completed successfully
2018-04-08T15:06:52.219Z - info: User function triggered, starting execution
2018-04-08T15:06:53.107Z - info: [ 'S9cIFvYv1ifgbmEJlI8wTi8Z7Cz2' ]
2018-04-08T15:06:53.739Z - info: Execution took 1520 ms, user function completed successfully
2018-04-08T15:07:08.721Z - info: User function triggered, starting execution
2018-04-08T15:07:09.127Z - info: [ 'S9cIFvYv1ifgbmEJlI8wTi8Z7Cz2' ]
2018-04-08T15:07:09.697Z - info: Execution took 975 ms, user function completed successfully
2018-04-08T15:07:58.118Z - info: User function triggered, starting execution
2018-04-08T15:08:00.729Z - info: [ 'S9cIFvYv1ifgbmEJlI8wTi8Z7Cz2' ]
2018-04-08T15:08:01.280Z - info: Execution took 3162 ms, user function completed successfully
2018-04-08T15:08:20.492Z - info: User function triggered, starting execution
2018-04-08T15:08:21.521Z - info: [ 'S9cIFvYv1ifgbmEJlI8wTi8Z7Cz2' ]
2018-04-08T15:08:22.175Z - info: Execution took 1682 ms, user function completed successfully
2018-04-08T15:08:23.834Z - info: User function triggered, starting execution
2018-04-08T15:08:24.367Z - info: [ 'S9cIFvYv1ifgbmEJlI8wTi8Z7Cz2' ]
2018-04-08T15:08:24.864Z - info: Execution took 1030 ms, user function completed successfully
2018-04-08T15:08:27.374Z - info: User function triggered, starting execution
2018-04-08T15:08:28.573Z - info: [ 'S9cIFvYv1ifgbmEJlI8wTi8Z7Cz2' ]
2018-04-08T15:08:29.108Z - info: Execution took 1735 ms, user function completed successfully
2018-04-08T15:08:49.441Z - info: User function triggered, starting execution
2018-04-08T15:08:50.737Z - info: [ 'S9cIFvYv1ifgbmEJlI8wTi8Z7Cz2' ]
2018-04-08T15:08:51.513Z - info: Execution took 2073 ms, user function completed successfully
2018-04-08T15:08:56.144Z - info: User function triggered, starting execution
2018-04-08T15:08:56.954Z - info: Execution took 813 ms, user function completed successfully
2018-04-08T15:08:58.386Z - info: User function triggered, starting execution
2018-04-08T15:08:58.864Z - info: [ 'S9cIFvYv1ifgbmEJlI8wTi8Z7Cz2' ]
2018-04-08T15:08:59.433Z - info: Execution took 1047 ms, user function completed successfully
2018-04-08T16:03:31.408Z - info: User function triggered, starting execution
2018-04-08T16:03:33.089Z - info: Execution took 2500 ms, finished with status: 'crash'
2018-04-08T16:03:34.844Z - info: User function triggered, starting execution
2018-04-08T16:03:35.865Z - info: Execution took 1830 ms, finished with status: 'crash'
2018-04-08T16:03:52.717Z - info: User function triggered, starting execution
2018-04-08T16:03:53.806Z - info: Execution took 1903 ms, finished with status: 'crash'
2018-04-08T16:04:52.244Z - info: User function triggered, starting execution
2018-04-08T16:04:55.424Z - info: [ 'S9cIFvYv1ifgbmEJlI8wTi8Z7Cz2' ]
2018-04-08T16:04:55.962Z - info: Execution took 3719 ms, user function completed successfully
2018-04-08T16:05:23.307Z - info: User function triggered, starting execution
2018-04-08T16:05:23.645Z - info: [ 'S9cIFvYv1ifgbmEJlI8wTi8Z7Cz2' ]
2018-04-08T16:05:24.925Z - info: Execution took 1618 ms, user function completed successfully
2018-04-08T17:59:09.658Z - error: /home/akash/Documents/pro/juspay/metutu-server/functions/index.js:21
        if(users.length ==)
                          ^

SyntaxError: Unexpected token )
    at createScript (vm.js:80:10)
    at Object.runInThisContext (vm.js:139:10)
    at Module._compile (module.js:599:28)
    at Object.Module._extensions..js (module.js:646:10)
    at Module.load (module.js:554:32)
    at tryModuleLoad (module.js:497:12)
    at Function.Module._load (module.js:489:3)
    at Module.require (module.js:579:17)
    at require (internal/module.js:11:18)
    at process.on (/usr/lib/node_modules/firebase-tools/node_modules/@google-cloud/functions-emulator/src/supervisor/worker.js:76:28)
2018-04-08T17:59:09.773Z - error: Function worker crashed with exit code: 1
2018-04-08T17:59:42.009Z - info: User function triggered, starting execution
2018-04-08T17:59:46.891Z - error: [2018-04-08T17:59:46.891Z]  @firebase/database: FIREBASE WARNING: Exception was thrown by user callback. TypeError: Cannot convert undefined or null to object
    at Function.keys (<anonymous>)
    at admin.database.ref.once (/home/akash/Documents/pro/juspay/metutu-server/functions/index.js:19:28)
    at onceCallback (/home/akash/Documents/pro/juspay/metutu-server/functions/node_modules/@firebase/database/dist/cjs/src/api/Query.js:244:51)
    at /home/akash/Documents/pro/juspay/metutu-server/functions/node_modules/@firebase/database/dist/cjs/src/core/view/EventRegistration.js:65:22
    at Object.exports.exceptionGuard (/home/akash/Documents/pro/juspay/metutu-server/functions/node_modules/@firebase/database/dist/cjs/src/core/util/util.js:536:9)
    at EventList.raise (/home/akash/Documents/pro/juspay/metutu-server/functions/node_modules/@firebase/database/dist/cjs/src/core/view/EventQueue.js:158:24)
    at EventQueue.raiseQueuedEventsMatchingPredicate_ (/home/akash/Documents/pro/juspay/metutu-server/functions/node_modules/@firebase/database/dist/cjs/src/core/view/EventQueue.js:111:41)
    at EventQueue.raiseEventsForChangedPath (/home/akash/Documents/pro/juspay/metutu-server/functions/node_modules/@firebase/database/dist/cjs/src/core/view/EventQueue.js:95:14)
    at Object.onComplete (/home/akash/Documents/pro/juspay/metutu-server/functions/node_modules/@firebase/database/dist/cjs/src/core/Repo.js:116:39)
    at /home/akash/Documents/pro/juspay/metutu-server/functions/node_modules/@firebase/database/dist/cjs/src/core/PersistentConnection.js:180:32 
2018-04-08T17:59:46.892Z - error: /home/akash/Documents/pro/juspay/metutu-server/functions/node_modules/@firebase/database/dist/cjs/src/core/util/util.js:547
            throw e;
            ^

TypeError: Cannot convert undefined or null to object
    at Function.keys (<anonymous>)
    at admin.database.ref.once (/home/akash/Documents/pro/juspay/metutu-server/functions/index.js:19:28)
    at onceCallback (/home/akash/Documents/pro/juspay/metutu-server/functions/node_modules/@firebase/database/dist/cjs/src/api/Query.js:244:51)
    at /home/akash/Documents/pro/juspay/metutu-server/functions/node_modules/@firebase/database/dist/cjs/src/core/view/EventRegistration.js:65:22
    at Object.exports.exceptionGuard (/home/akash/Documents/pro/juspay/metutu-server/functions/node_modules/@firebase/database/dist/cjs/src/core/util/util.js:536:9)
    at EventList.raise (/home/akash/Documents/pro/juspay/metutu-server/functions/node_modules/@firebase/database/dist/cjs/src/core/view/EventQueue.js:158:24)
    at EventQueue.raiseQueuedEventsMatchingPredicate_ (/home/akash/Documents/pro/juspay/metutu-server/functions/node_modules/@firebase/database/dist/cjs/src/core/view/EventQueue.js:111:41)
    at EventQueue.raiseEventsForChangedPath (/home/akash/Documents/pro/juspay/metutu-server/functions/node_modules/@firebase/database/dist/cjs/src/core/view/EventQueue.js:95:14)
    at Object.onComplete (/home/akash/Documents/pro/juspay/metutu-server/functions/node_modules/@firebase/database/dist/cjs/src/core/Repo.js:116:39)
    at /home/akash/Documents/pro/juspay/metutu-server/functions/node_modules/@firebase/database/dist/cjs/src/core/PersistentConnection.js:180:32
2018-04-08T17:59:46.898Z - info: Execution took 10511 ms, finished with status: 'crash'
2018-04-08T17:59:47.243Z - error: Function worker crashed with exit code: 1
2018-04-08T18:03:09.261Z - info: User function triggered, starting execution
2018-04-08T18:03:11.818Z - error: [2018-04-08T18:03:11.817Z]  @firebase/database: FIREBASE WARNING: Exception was thrown by user callback. TypeError: Cannot convert undefined or null to object
    at Function.keys (<anonymous>)
    at admin.database.ref.once (/home/akash/Documents/pro/juspay/metutu-server/functions/index.js:19:28)
    at onceCallback (/home/akash/Documents/pro/juspay/metutu-server/functions/node_modules/@firebase/database/dist/cjs/src/api/Query.js:244:51)
    at /home/akash/Documents/pro/juspay/metutu-server/functions/node_modules/@firebase/database/dist/cjs/src/core/view/EventRegistration.js:65:22
    at Object.exports.exceptionGuard (/home/akash/Documents/pro/juspay/metutu-server/functions/node_modules/@firebase/database/dist/cjs/src/core/util/util.js:536:9)
    at EventList.raise (/home/akash/Documents/pro/juspay/metutu-server/functions/node_modules/@firebase/database/dist/cjs/src/core/view/EventQueue.js:158:24)
    at EventQueue.raiseQueuedEventsMatchingPredicate_ (/home/akash/Documents/pro/juspay/metutu-server/functions/node_modules/@firebase/database/dist/cjs/src/core/view/EventQueue.js:111:41)
    at EventQueue.raiseEventsForChangedPath (/home/akash/Documents/pro/juspay/metutu-server/functions/node_modules/@firebase/database/dist/cjs/src/core/view/EventQueue.js:95:14)
    at Object.onComplete (/home/akash/Documents/pro/juspay/metutu-server/functions/node_modules/@firebase/database/dist/cjs/src/core/Repo.js:116:39)
    at /home/akash/Documents/pro/juspay/metutu-server/functions/node_modules/@firebase/database/dist/cjs/src/core/PersistentConnection.js:180:32 
2018-04-08T18:03:11.819Z - error: /home/akash/Documents/pro/juspay/metutu-server/functions/node_modules/@firebase/database/dist/cjs/src/core/util/util.js:547
            throw e;
            ^

TypeError: Cannot convert undefined or null to object
    at Function.keys (<anonymous>)
    at admin.database.ref.once (/home/akash/Documents/pro/juspay/metutu-server/functions/index.js:19:28)
    at onceCallback (/home/akash/Documents/pro/juspay/metutu-server/functions/node_modules/@firebase/database/dist/cjs/src/api/Query.js:244:51)
    at /home/akash/Documents/pro/juspay/metutu-server/functions/node_modules/@firebase/database/dist/cjs/src/core/view/EventRegistration.js:65:22
    at Object.exports.exceptionGuard (/home/akash/Documents/pro/juspay/metutu-server/functions/node_modules/@firebase/database/dist/cjs/src/core/util/util.js:536:9)
    at EventList.raise (/home/akash/Documents/pro/juspay/metutu-server/functions/node_modules/@firebase/database/dist/cjs/src/core/view/EventQueue.js:158:24)
    at EventQueue.raiseQueuedEventsMatchingPredicate_ (/home/akash/Documents/pro/juspay/metutu-server/functions/node_modules/@firebase/database/dist/cjs/src/core/view/EventQueue.js:111:41)
    at EventQueue.raiseEventsForChangedPath (/home/akash/Documents/pro/juspay/metutu-server/functions/node_modules/@firebase/database/dist/cjs/src/core/view/EventQueue.js:95:14)
    at Object.onComplete (/home/akash/Documents/pro/juspay/metutu-server/functions/node_modules/@firebase/database/dist/cjs/src/core/Repo.js:116:39)
    at /home/akash/Documents/pro/juspay/metutu-server/functions/node_modules/@firebase/database/dist/cjs/src/core/PersistentConnection.js:180:32
2018-04-08T18:03:11.829Z - info: Execution took 3187 ms, finished with status: 'crash'
2018-04-08T18:03:12.119Z - error: Function worker crashed with exit code: 1
2018-04-08T18:03:16.607Z - info: User function triggered, starting execution
2018-04-08T18:03:20.941Z - error: [2018-04-08T18:03:20.941Z]  @firebase/database: FIREBASE WARNING: Exception was thrown by user callback. TypeError: Cannot convert undefined or null to object
    at Function.keys (<anonymous>)
    at admin.database.ref.once (/home/akash/Documents/pro/juspay/metutu-server/functions/index.js:19:28)
    at onceCallback (/home/akash/Documents/pro/juspay/metutu-server/functions/node_modules/@firebase/database/dist/cjs/src/api/Query.js:244:51)
    at /home/akash/Documents/pro/juspay/metutu-server/functions/node_modules/@firebase/database/dist/cjs/src/core/view/EventRegistration.js:65:22
    at Object.exports.exceptionGuard (/home/akash/Documents/pro/juspay/metutu-server/functions/node_modules/@firebase/database/dist/cjs/src/core/util/util.js:536:9)
    at EventList.raise (/home/akash/Documents/pro/juspay/metutu-server/functions/node_modules/@firebase/database/dist/cjs/src/core/view/EventQueue.js:158:24)
    at EventQueue.raiseQueuedEventsMatchingPredicate_ (/home/akash/Documents/pro/juspay/metutu-server/functions/node_modules/@firebase/database/dist/cjs/src/core/view/EventQueue.js:111:41)
    at EventQueue.raiseEventsForChangedPath (/home/akash/Documents/pro/juspay/metutu-server/functions/node_modules/@firebase/database/dist/cjs/src/core/view/EventQueue.js:95:14)
    at Object.onComplete (/home/akash/Documents/pro/juspay/metutu-server/functions/node_modules/@firebase/database/dist/cjs/src/core/Repo.js:116:39)
    at /home/akash/Documents/pro/juspay/metutu-server/functions/node_modules/@firebase/database/dist/cjs/src/core/PersistentConnection.js:180:32 
2018-04-08T18:03:20.942Z - error: /home/akash/Documents/pro/juspay/metutu-server/functions/node_modules/@firebase/database/dist/cjs/src/core/util/util.js:547
            throw e;
            ^

TypeError: Cannot convert undefined or null to object
    at Function.keys (<anonymous>)
    at admin.database.ref.once (/home/akash/Documents/pro/juspay/metutu-server/functions/index.js:19:28)
    at onceCallback (/home/akash/Documents/pro/juspay/metutu-server/functions/node_modules/@firebase/database/dist/cjs/src/api/Query.js:244:51)
    at /home/akash/Documents/pro/juspay/metutu-server/functions/node_modules/@firebase/database/dist/cjs/src/core/view/EventRegistration.js:65:22
    at Object.exports.exceptionGuard (/home/akash/Documents/pro/juspay/metutu-server/functions/node_modules/@firebase/database/dist/cjs/src/core/util/util.js:536:9)
    at EventList.raise (/home/akash/Documents/pro/juspay/metutu-server/functions/node_modules/@firebase/database/dist/cjs/src/core/view/EventQueue.js:158:24)
    at EventQueue.raiseQueuedEventsMatchingPredicate_ (/home/akash/Documents/pro/juspay/metutu-server/functions/node_modules/@firebase/database/dist/cjs/src/core/view/EventQueue.js:111:41)
    at EventQueue.raiseEventsForChangedPath (/home/akash/Documents/pro/juspay/metutu-server/functions/node_modules/@firebase/database/dist/cjs/src/core/view/EventQueue.js:95:14)
    at Object.onComplete (/home/akash/Documents/pro/juspay/metutu-server/functions/node_modules/@firebase/database/dist/cjs/src/core/Repo.js:116:39)
    at /home/akash/Documents/pro/juspay/metutu-server/functions/node_modules/@firebase/database/dist/cjs/src/core/PersistentConnection.js:180:32
2018-04-08T18:03:20.948Z - info: Execution took 4954 ms, finished with status: 'crash'
2018-04-08T18:03:21.061Z - error: Function worker crashed with exit code: 1
2018-04-08T18:04:46.864Z - info: User function triggered, starting execution
2018-04-08T18:04:52.080Z - error: [2018-04-08T18:04:52.079Z]  @firebase/database: FIREBASE WARNING: Exception was thrown by user callback. TypeError: Cannot convert undefined or null to object
    at Function.keys (<anonymous>)
    at admin.database.ref.once (/home/akash/Documents/pro/juspay/metutu-server/functions/index.js:19:28)
    at onceCallback (/home/akash/Documents/pro/juspay/metutu-server/functions/node_modules/@firebase/database/dist/cjs/src/api/Query.js:244:51)
    at /home/akash/Documents/pro/juspay/metutu-server/functions/node_modules/@firebase/database/dist/cjs/src/core/view/EventRegistration.js:65:22
    at Object.exports.exceptionGuard (/home/akash/Documents/pro/juspay/metutu-server/functions/node_modules/@firebase/database/dist/cjs/src/core/util/util.js:536:9)
    at EventList.raise (/home/akash/Documents/pro/juspay/metutu-server/functions/node_modules/@firebase/database/dist/cjs/src/core/view/EventQueue.js:158:24)
    at EventQueue.raiseQueuedEventsMatchingPredicate_ (/home/akash/Documents/pro/juspay/metutu-server/functions/node_modules/@firebase/database/dist/cjs/src/core/view/EventQueue.js:111:41)
    at EventQueue.raiseEventsForChangedPath (/home/akash/Documents/pro/juspay/metutu-server/functions/node_modules/@firebase/database/dist/cjs/src/core/view/EventQueue.js:95:14)
    at Object.onComplete (/home/akash/Documents/pro/juspay/metutu-server/functions/node_modules/@firebase/database/dist/cjs/src/core/Repo.js:116:39)
    at /home/akash/Documents/pro/juspay/metutu-server/functions/node_modules/@firebase/database/dist/cjs/src/core/PersistentConnection.js:180:32 
2018-04-08T18:04:52.088Z - error: /home/akash/Documents/pro/juspay/metutu-server/functions/node_modules/@firebase/database/dist/cjs/src/core/util/util.js:547
            throw e;
            ^

TypeError: Cannot convert undefined or null to object
    at Function.keys (<anonymous>)
    at admin.database.ref.once (/home/akash/Documents/pro/juspay/metutu-server/functions/index.js:19:28)
    at onceCallback (/home/akash/Documents/pro/juspay/metutu-server/functions/node_modules/@firebase/database/dist/cjs/src/api/Query.js:244:51)
    at /home/akash/Documents/pro/juspay/metutu-server/functions/node_modules/@firebase/database/dist/cjs/src/core/view/EventRegistration.js:65:22
    at Object.exports.exceptionGuard (/home/akash/Documents/pro/juspay/metutu-server/functions/node_modules/@firebase/database/dist/cjs/src/core/util/util.js:536:9)
    at EventList.raise (/home/akash/Documents/pro/juspay/metutu-server/functions/node_modules/@firebase/database/dist/cjs/src/core/view/EventQueue.js:158:24)
    at EventQueue.raiseQueuedEventsMatchingPredicate_ (/home/akash/Documents/pro/juspay/metutu-server/functions/node_modules/@firebase/database/dist/cjs/src/core/view/EventQueue.js:111:41)
    at EventQueue.raiseEventsForChangedPath (/home/akash/Documents/pro/juspay/metutu-server/functions/node_modules/@firebase/database/dist/cjs/src/core/view/EventQueue.js:95:14)
    at Object.onComplete (/home/akash/Documents/pro/juspay/metutu-server/functions/node_modules/@firebase/database/dist/cjs/src/core/Repo.js:116:39)
    at /home/akash/Documents/pro/juspay/metutu-server/functions/node_modules/@firebase/database/dist/cjs/src/core/PersistentConnection.js:180:32
2018-04-08T18:04:52.089Z - info: Execution took 5844 ms, finished with status: 'crash'
2018-04-08T18:04:52.159Z - error: Function worker crashed with exit code: 1
2018-04-08T18:05:52.307Z - info: User function triggered, starting execution
2018-04-08T18:05:54.707Z - error: [2018-04-08T18:05:54.707Z]  @firebase/database: FIREBASE WARNING: Exception was thrown by user callback. TypeError: Cannot convert undefined or null to object
    at Function.keys (<anonymous>)
    at admin.database.ref.once (/home/akash/Documents/pro/juspay/metutu-server/functions/index.js:19:28)
    at onceCallback (/home/akash/Documents/pro/juspay/metutu-server/functions/node_modules/@firebase/database/dist/cjs/src/api/Query.js:244:51)
    at /home/akash/Documents/pro/juspay/metutu-server/functions/node_modules/@firebase/database/dist/cjs/src/core/view/EventRegistration.js:65:22
    at Object.exports.exceptionGuard (/home/akash/Documents/pro/juspay/metutu-server/functions/node_modules/@firebase/database/dist/cjs/src/core/util/util.js:536:9)
    at EventList.raise (/home/akash/Documents/pro/juspay/metutu-server/functions/node_modules/@firebase/database/dist/cjs/src/core/view/EventQueue.js:158:24)
    at EventQueue.raiseQueuedEventsMatchingPredicate_ (/home/akash/Documents/pro/juspay/metutu-server/functions/node_modules/@firebase/database/dist/cjs/src/core/view/EventQueue.js:111:41)
    at EventQueue.raiseEventsForChangedPath (/home/akash/Documents/pro/juspay/metutu-server/functions/node_modules/@firebase/database/dist/cjs/src/core/view/EventQueue.js:95:14)
    at Object.onComplete (/home/akash/Documents/pro/juspay/metutu-server/functions/node_modules/@firebase/database/dist/cjs/src/core/Repo.js:116:39)
    at /home/akash/Documents/pro/juspay/metutu-server/functions/node_modules/@firebase/database/dist/cjs/src/core/PersistentConnection.js:180:32 
2018-04-08T18:05:54.708Z - error: /home/akash/Documents/pro/juspay/metutu-server/functions/node_modules/@firebase/database/dist/cjs/src/core/util/util.js:547
            throw e;
            ^

TypeError: Cannot convert undefined or null to object
    at Function.keys (<anonymous>)
    at admin.database.ref.once (/home/akash/Documents/pro/juspay/metutu-server/functions/index.js:19:28)
    at onceCallback (/home/akash/Documents/pro/juspay/metutu-server/functions/node_modules/@firebase/database/dist/cjs/src/api/Query.js:244:51)
    at /home/akash/Documents/pro/juspay/metutu-server/functions/node_modules/@firebase/database/dist/cjs/src/core/view/EventRegistration.js:65:22
    at Object.exports.exceptionGuard (/home/akash/Documents/pro/juspay/metutu-server/functions/node_modules/@firebase/database/dist/cjs/src/core/util/util.js:536:9)
    at EventList.raise (/home/akash/Documents/pro/juspay/metutu-server/functions/node_modules/@firebase/database/dist/cjs/src/core/view/EventQueue.js:158:24)
    at EventQueue.raiseQueuedEventsMatchingPredicate_ (/home/akash/Documents/pro/juspay/metutu-server/functions/node_modules/@firebase/database/dist/cjs/src/core/view/EventQueue.js:111:41)
    at EventQueue.raiseEventsForChangedPath (/home/akash/Documents/pro/juspay/metutu-server/functions/node_modules/@firebase/database/dist/cjs/src/core/view/EventQueue.js:95:14)
    at Object.onComplete (/home/akash/Documents/pro/juspay/metutu-server/functions/node_modules/@firebase/database/dist/cjs/src/core/Repo.js:116:39)
    at /home/akash/Documents/pro/juspay/metutu-server/functions/node_modules/@firebase/database/dist/cjs/src/core/PersistentConnection.js:180:32
2018-04-08T18:05:54.715Z - info: Execution took 3026 ms, finished with status: 'crash'
2018-04-08T18:05:54.787Z - error: Function worker crashed with exit code: 1
2018-04-08T18:06:17.276Z - info: User function triggered, starting execution
2018-04-08T18:06:20.874Z - error: [2018-04-08T18:06:20.874Z]  @firebase/database: FIREBASE WARNING: Exception was thrown by user callback. TypeError: Cannot convert undefined or null to object
    at Function.keys (<anonymous>)
    at admin.database.ref.once (/home/akash/Documents/pro/juspay/metutu-server/functions/index.js:19:28)
    at onceCallback (/home/akash/Documents/pro/juspay/metutu-server/functions/node_modules/@firebase/database/dist/cjs/src/api/Query.js:244:51)
    at /home/akash/Documents/pro/juspay/metutu-server/functions/node_modules/@firebase/database/dist/cjs/src/core/view/EventRegistration.js:65:22
    at Object.exports.exceptionGuard (/home/akash/Documents/pro/juspay/metutu-server/functions/node_modules/@firebase/database/dist/cjs/src/core/util/util.js:536:9)
    at EventList.raise (/home/akash/Documents/pro/juspay/metutu-server/functions/node_modules/@firebase/database/dist/cjs/src/core/view/EventQueue.js:158:24)
    at EventQueue.raiseQueuedEventsMatchingPredicate_ (/home/akash/Documents/pro/juspay/metutu-server/functions/node_modules/@firebase/database/dist/cjs/src/core/view/EventQueue.js:111:41)
    at EventQueue.raiseEventsForChangedPath (/home/akash/Documents/pro/juspay/metutu-server/functions/node_modules/@firebase/database/dist/cjs/src/core/view/EventQueue.js:95:14)
    at Object.onComplete (/home/akash/Documents/pro/juspay/metutu-server/functions/node_modules/@firebase/database/dist/cjs/src/core/Repo.js:116:39)
    at /home/akash/Documents/pro/juspay/metutu-server/functions/node_modules/@firebase/database/dist/cjs/src/core/PersistentConnection.js:180:32 
2018-04-08T18:06:20.875Z - error: /home/akash/Documents/pro/juspay/metutu-server/functions/node_modules/@firebase/database/dist/cjs/src/core/util/util.js:547
            throw e;
            ^

TypeError: Cannot convert undefined or null to object
    at Function.keys (<anonymous>)
    at admin.database.ref.once (/home/akash/Documents/pro/juspay/metutu-server/functions/index.js:19:28)
    at onceCallback (/home/akash/Documents/pro/juspay/metutu-server/functions/node_modules/@firebase/database/dist/cjs/src/api/Query.js:244:51)
    at /home/akash/Documents/pro/juspay/metutu-server/functions/node_modules/@firebase/database/dist/cjs/src/core/view/EventRegistration.js:65:22
    at Object.exports.exceptionGuard (/home/akash/Documents/pro/juspay/metutu-server/functions/node_modules/@firebase/database/dist/cjs/src/core/util/util.js:536:9)
    at EventList.raise (/home/akash/Documents/pro/juspay/metutu-server/functions/node_modules/@firebase/database/dist/cjs/src/core/view/EventQueue.js:158:24)
    at EventQueue.raiseQueuedEventsMatchingPredicate_ (/home/akash/Documents/pro/juspay/metutu-server/functions/node_modules/@firebase/database/dist/cjs/src/core/view/EventQueue.js:111:41)
    at EventQueue.raiseEventsForChangedPath (/home/akash/Documents/pro/juspay/metutu-server/functions/node_modules/@firebase/database/dist/cjs/src/core/view/EventQueue.js:95:14)
    at Object.onComplete (/home/akash/Documents/pro/juspay/metutu-server/functions/node_modules/@firebase/database/dist/cjs/src/core/Repo.js:116:39)
    at /home/akash/Documents/pro/juspay/metutu-server/functions/node_modules/@firebase/database/dist/cjs/src/core/PersistentConnection.js:180:32
2018-04-08T18:06:20.889Z - info: Execution took 4432 ms, finished with status: 'crash'
2018-04-08T18:06:20.945Z - error: Function worker crashed with exit code: 1
2018-04-08T18:07:17.002Z - info: User function triggered, starting execution
2018-04-08T18:07:20.078Z - error: [2018-04-08T18:07:20.077Z]  @firebase/database: FIREBASE WARNING: Exception was thrown by user callback. TypeError: Cannot convert undefined or null to object
    at Function.keys (<anonymous>)
    at admin.database.ref.once (/home/akash/Documents/pro/juspay/metutu-server/functions/index.js:19:28)
    at onceCallback (/home/akash/Documents/pro/juspay/metutu-server/functions/node_modules/@firebase/database/dist/cjs/src/api/Query.js:244:51)
    at /home/akash/Documents/pro/juspay/metutu-server/functions/node_modules/@firebase/database/dist/cjs/src/core/view/EventRegistration.js:65:22
    at Object.exports.exceptionGuard (/home/akash/Documents/pro/juspay/metutu-server/functions/node_modules/@firebase/database/dist/cjs/src/core/util/util.js:536:9)
    at EventList.raise (/home/akash/Documents/pro/juspay/metutu-server/functions/node_modules/@firebase/database/dist/cjs/src/core/view/EventQueue.js:158:24)
    at EventQueue.raiseQueuedEventsMatchingPredicate_ (/home/akash/Documents/pro/juspay/metutu-server/functions/node_modules/@firebase/database/dist/cjs/src/core/view/EventQueue.js:111:41)
    at EventQueue.raiseEventsForChangedPath (/home/akash/Documents/pro/juspay/metutu-server/functions/node_modules/@firebase/database/dist/cjs/src/core/view/EventQueue.js:95:14)
    at Object.onComplete (/home/akash/Documents/pro/juspay/metutu-server/functions/node_modules/@firebase/database/dist/cjs/src/core/Repo.js:116:39)
    at /home/akash/Documents/pro/juspay/metutu-server/functions/node_modules/@firebase/database/dist/cjs/src/core/PersistentConnection.js:180:32 
2018-04-08T18:07:20.079Z - error: /home/akash/Documents/pro/juspay/metutu-server/functions/node_modules/@firebase/database/dist/cjs/src/core/util/util.js:547
            throw e;
            ^

TypeError: Cannot convert undefined or null to object
    at Function.keys (<anonymous>)
    at admin.database.ref.once (/home/akash/Documents/pro/juspay/metutu-server/functions/index.js:19:28)
    at onceCallback (/home/akash/Documents/pro/juspay/metutu-server/functions/node_modules/@firebase/database/dist/cjs/src/api/Query.js:244:51)
    at /home/akash/Documents/pro/juspay/metutu-server/functions/node_modules/@firebase/database/dist/cjs/src/core/view/EventRegistration.js:65:22
    at Object.exports.exceptionGuard (/home/akash/Documents/pro/juspay/metutu-server/functions/node_modules/@firebase/database/dist/cjs/src/core/util/util.js:536:9)
    at EventList.raise (/home/akash/Documents/pro/juspay/metutu-server/functions/node_modules/@firebase/database/dist/cjs/src/core/view/EventQueue.js:158:24)
    at EventQueue.raiseQueuedEventsMatchingPredicate_ (/home/akash/Documents/pro/juspay/metutu-server/functions/node_modules/@firebase/database/dist/cjs/src/core/view/EventQueue.js:111:41)
    at EventQueue.raiseEventsForChangedPath (/home/akash/Documents/pro/juspay/metutu-server/functions/node_modules/@firebase/database/dist/cjs/src/core/view/EventQueue.js:95:14)
    at Object.onComplete (/home/akash/Documents/pro/juspay/metutu-server/functions/node_modules/@firebase/database/dist/cjs/src/core/Repo.js:116:39)
    at /home/akash/Documents/pro/juspay/metutu-server/functions/node_modules/@firebase/database/dist/cjs/src/core/PersistentConnection.js:180:32
2018-04-08T18:07:20.086Z - info: Execution took 3901 ms, finished with status: 'crash'
2018-04-08T18:07:20.178Z - error: Function worker crashed with exit code: 1
2018-04-08T18:07:45.834Z - info: User function triggered, starting execution
2018-04-08T18:07:50.133Z - error: [2018-04-08T18:07:50.133Z]  @firebase/database: FIREBASE WARNING: Exception was thrown by user callback. TypeError: Cannot convert undefined or null to object
    at Function.keys (<anonymous>)
    at admin.database.ref.once (/home/akash/Documents/pro/juspay/metutu-server/functions/index.js:19:28)
    at onceCallback (/home/akash/Documents/pro/juspay/metutu-server/functions/node_modules/@firebase/database/dist/cjs/src/api/Query.js:244:51)
    at /home/akash/Documents/pro/juspay/metutu-server/functions/node_modules/@firebase/database/dist/cjs/src/core/view/EventRegistration.js:65:22
    at Object.exports.exceptionGuard (/home/akash/Documents/pro/juspay/metutu-server/functions/node_modules/@firebase/database/dist/cjs/src/core/util/util.js:536:9)
    at EventList.raise (/home/akash/Documents/pro/juspay/metutu-server/functions/node_modules/@firebase/database/dist/cjs/src/core/view/EventQueue.js:158:24)
    at EventQueue.raiseQueuedEventsMatchingPredicate_ (/home/akash/Documents/pro/juspay/metutu-server/functions/node_modules/@firebase/database/dist/cjs/src/core/view/EventQueue.js:111:41)
    at EventQueue.raiseEventsForChangedPath (/home/akash/Documents/pro/juspay/metutu-server/functions/node_modules/@firebase/database/dist/cjs/src/core/view/EventQueue.js:95:14)
    at Object.onComplete (/home/akash/Documents/pro/juspay/metutu-server/functions/node_modules/@firebase/database/dist/cjs/src/core/Repo.js:116:39)
    at /home/akash/Documents/pro/juspay/metutu-server/functions/node_modules/@firebase/database/dist/cjs/src/core/PersistentConnection.js:180:32 
2018-04-08T18:07:50.134Z - error: /home/akash/Documents/pro/juspay/metutu-server/functions/node_modules/@firebase/database/dist/cjs/src/core/util/util.js:547
            throw e;
            ^

TypeError: Cannot convert undefined or null to object
    at Function.keys (<anonymous>)
    at admin.database.ref.once (/home/akash/Documents/pro/juspay/metutu-server/functions/index.js:19:28)
    at onceCallback (/home/akash/Documents/pro/juspay/metutu-server/functions/node_modules/@firebase/database/dist/cjs/src/api/Query.js:244:51)
    at /home/akash/Documents/pro/juspay/metutu-server/functions/node_modules/@firebase/database/dist/cjs/src/core/view/EventRegistration.js:65:22
    at Object.exports.exceptionGuard (/home/akash/Documents/pro/juspay/metutu-server/functions/node_modules/@firebase/database/dist/cjs/src/core/util/util.js:536:9)
    at EventList.raise (/home/akash/Documents/pro/juspay/metutu-server/functions/node_modules/@firebase/database/dist/cjs/src/core/view/EventQueue.js:158:24)
    at EventQueue.raiseQueuedEventsMatchingPredicate_ (/home/akash/Documents/pro/juspay/metutu-server/functions/node_modules/@firebase/database/dist/cjs/src/core/view/EventQueue.js:111:41)
    at EventQueue.raiseEventsForChangedPath (/home/akash/Documents/pro/juspay/metutu-server/functions/node_modules/@firebase/database/dist/cjs/src/core/view/EventQueue.js:95:14)
    at Object.onComplete (/home/akash/Documents/pro/juspay/metutu-server/functions/node_modules/@firebase/database/dist/cjs/src/core/Repo.js:116:39)
    at /home/akash/Documents/pro/juspay/metutu-server/functions/node_modules/@firebase/database/dist/cjs/src/core/PersistentConnection.js:180:32
2018-04-08T18:07:50.140Z - info: Execution took 5121 ms, finished with status: 'crash'
2018-04-08T18:07:50.177Z - error: Function worker crashed with exit code: 1
2018-04-08T18:08:38.297Z - info: User function triggered, starting execution
2018-04-08T18:08:42.703Z - error: [2018-04-08T18:08:42.703Z]  @firebase/database: FIREBASE WARNING: Exception was thrown by user callback. TypeError: Cannot convert undefined or null to object
    at Function.keys (<anonymous>)
    at admin.database.ref.once (/home/akash/Documents/pro/juspay/metutu-server/functions/index.js:19:28)
    at onceCallback (/home/akash/Documents/pro/juspay/metutu-server/functions/node_modules/@firebase/database/dist/cjs/src/api/Query.js:244:51)
    at /home/akash/Documents/pro/juspay/metutu-server/functions/node_modules/@firebase/database/dist/cjs/src/core/view/EventRegistration.js:65:22
    at Object.exports.exceptionGuard (/home/akash/Documents/pro/juspay/metutu-server/functions/node_modules/@firebase/database/dist/cjs/src/core/util/util.js:536:9)
    at EventList.raise (/home/akash/Documents/pro/juspay/metutu-server/functions/node_modules/@firebase/database/dist/cjs/src/core/view/EventQueue.js:158:24)
    at EventQueue.raiseQueuedEventsMatchingPredicate_ (/home/akash/Documents/pro/juspay/metutu-server/functions/node_modules/@firebase/database/dist/cjs/src/core/view/EventQueue.js:111:41)
    at EventQueue.raiseEventsForChangedPath (/home/akash/Documents/pro/juspay/metutu-server/functions/node_modules/@firebase/database/dist/cjs/src/core/view/EventQueue.js:95:14)
    at Object.onComplete (/home/akash/Documents/pro/juspay/metutu-server/functions/node_modules/@firebase/database/dist/cjs/src/core/Repo.js:116:39)
    at /home/akash/Documents/pro/juspay/metutu-server/functions/node_modules/@firebase/database/dist/cjs/src/core/PersistentConnection.js:180:32 
2018-04-08T18:08:42.704Z - error: /home/akash/Documents/pro/juspay/metutu-server/functions/node_modules/@firebase/database/dist/cjs/src/core/util/util.js:547
            throw e;
            ^

TypeError: Cannot convert undefined or null to object
    at Function.keys (<anonymous>)
    at admin.database.ref.once (/home/akash/Documents/pro/juspay/metutu-server/functions/index.js:19:28)
    at onceCallback (/home/akash/Documents/pro/juspay/metutu-server/functions/node_modules/@firebase/database/dist/cjs/src/api/Query.js:244:51)
    at /home/akash/Documents/pro/juspay/metutu-server/functions/node_modules/@firebase/database/dist/cjs/src/core/view/EventRegistration.js:65:22
    at Object.exports.exceptionGuard (/home/akash/Documents/pro/juspay/metutu-server/functions/node_modules/@firebase/database/dist/cjs/src/core/util/util.js:536:9)
    at EventList.raise (/home/akash/Documents/pro/juspay/metutu-server/functions/node_modules/@firebase/database/dist/cjs/src/core/view/EventQueue.js:158:24)
    at EventQueue.raiseQueuedEventsMatchingPredicate_ (/home/akash/Documents/pro/juspay/metutu-server/functions/node_modules/@firebase/database/dist/cjs/src/core/view/EventQueue.js:111:41)
    at EventQueue.raiseEventsForChangedPath (/home/akash/Documents/pro/juspay/metutu-server/functions/node_modules/@firebase/database/dist/cjs/src/core/view/EventQueue.js:95:14)
    at Object.onComplete (/home/akash/Documents/pro/juspay/metutu-server/functions/node_modules/@firebase/database/dist/cjs/src/core/Repo.js:116:39)
    at /home/akash/Documents/pro/juspay/metutu-server/functions/node_modules/@firebase/database/dist/cjs/src/core/PersistentConnection.js:180:32
2018-04-08T18:08:42.712Z - info: Execution took 5231 ms, finished with status: 'crash'
2018-04-08T18:08:42.747Z - error: Function worker crashed with exit code: 1
2018-04-08T18:10:14.605Z - info: User function triggered, starting execution
2018-04-08T18:10:18.491Z - info: Execution took 3886 ms, user function completed successfully
2018-04-08T18:10:18.495Z - error: [2018-04-08T18:10:18.492Z]  @firebase/database: FIREBASE WARNING: Exception was thrown by user callback. TypeError: Cannot convert undefined or null to object
    at Function.keys (<anonymous>)
    at admin.database.ref.once (/home/akash/Documents/pro/juspay/metutu-server/functions/index.js:20:28)
    at onceCallback (/home/akash/Documents/pro/juspay/metutu-server/functions/node_modules/@firebase/database/dist/cjs/src/api/Query.js:244:51)
    at /home/akash/Documents/pro/juspay/metutu-server/functions/node_modules/@firebase/database/dist/cjs/src/core/view/EventRegistration.js:65:22
    at Object.exports.exceptionGuard (/home/akash/Documents/pro/juspay/metutu-server/functions/node_modules/@firebase/database/dist/cjs/src/core/util/util.js:536:9)
    at EventList.raise (/home/akash/Documents/pro/juspay/metutu-server/functions/node_modules/@firebase/database/dist/cjs/src/core/view/EventQueue.js:158:24)
    at EventQueue.raiseQueuedEventsMatchingPredicate_ (/home/akash/Documents/pro/juspay/metutu-server/functions/node_modules/@firebase/database/dist/cjs/src/core/view/EventQueue.js:111:41)
    at EventQueue.raiseEventsForChangedPath (/home/akash/Documents/pro/juspay/metutu-server/functions/node_modules/@firebase/database/dist/cjs/src/core/view/EventQueue.js:95:14)
    at Object.onComplete (/home/akash/Documents/pro/juspay/metutu-server/functions/node_modules/@firebase/database/dist/cjs/src/core/Repo.js:116:39)
    at /home/akash/Documents/pro/juspay/metutu-server/functions/node_modules/@firebase/database/dist/cjs/src/core/PersistentConnection.js:180:32 
/home/akash/Documents/pro/juspay/metutu-server/functions/node_modules/@firebase/database/dist/cjs/src/core/util/util.js:547
            throw e;
            ^

TypeError: Cannot convert undefined or null to object
    at Function.keys (<anonymous>)
    at admin.database.ref.once (/home/akash/Documents/pro/juspay/metutu-server/functions/index.js:20:28)
    at onceCallback (/home/akash/Documents/pro/juspay/metutu-server/functions/node_modules/@firebase/database/dist/cjs/src/api/Query.js:244:51)
    at /home/akash/Documents/pro/juspay/metutu-server/functions/node_modules/@firebase/database/dist/cjs/src/core/view/EventRegistration.js:65:22
    at Object.exports.exceptionGuard (/home/akash/Documents/pro/juspay/metutu-server/functions/node_modules/@firebase/database/dist/cjs/src/core/util/util.js:536:9)
    at EventList.raise (/home/akash/Documents/pro/juspay/metutu-server/functions/node_modules/@firebase/database/dist/cjs/src/core/view/EventQueue.js:158:24)
    at EventQueue.raiseQueuedEventsMatchingPredicate_ (/home/akash/Documents/pro/juspay/metutu-server/functions/node_modules/@firebase/database/dist/cjs/src/core/view/EventQueue.js:111:41)
    at EventQueue.raiseEventsForChangedPath (/home/akash/Documents/pro/juspay/metutu-server/functions/node_modules/@firebase/database/dist/cjs/src/core/view/EventQueue.js:95:14)
    at Object.onComplete (/home/akash/Documents/pro/juspay/metutu-server/functions/node_modules/@firebase/database/dist/cjs/src/core/Repo.js:116:39)
    at /home/akash/Documents/pro/juspay/metutu-server/functions/node_modules/@firebase/database/dist/cjs/src/core/PersistentConnection.js:180:32
2018-04-08T18:10:18.553Z - error: Function worker crashed with exit code: 1
2018-04-08T18:10:49.570Z - info: Execution took 4 ms, finished with status: 'crash'
